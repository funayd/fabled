var ju=Object.defineProperty;var Xu=(s,e,t)=>e in s?ju(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var u=(s,e,t)=>(Xu(s,typeof e!="symbol"?e+"":e,t),t);import{b as ze,g as nt}from"../chunks/entry.D4fMnSKz.js";import{r as Zu,F as Ku,c as yt,f as Ke,v as Bl,s as et,e as He,w as Tt,x as Au,y as Mu,z as Ju,A as Qu,q as ec,g as se,b as tc,B as ac,C as sc,Y as ir,D as oc,E as rc,G as _u,H as ic,I as qu,d as nc,J as Eu,a as vt,K as lt,L as bt,M as at,N as xu,O as Ze,i as ft,Q as nr,S as lr,T as lc,U as uc,V as kt,W as mt,X as cc,Z as pc,_ as wt,$ as gt,a0 as Wl,a1 as zl,a2 as hc,a3 as Cu,a4 as dc,a5 as mc,a6 as it,a7 as Ul}from"../chunks/skill-store.6XqOxpIu.js";import{s as we,v as pe,R as me,k as he,a as U,g as G,i as j,f as _,U as Ne,e as P,t as ve,c as F,b as Q,d as be,o as g,h as S,j as Ue,n as Re,T as Qe,S as B,A as xe,q as Ve,_ as jo,Q as ke,m as oe,aa as qe,ac as sr,ad as or,V as Pu,$ as Fe,ab as We,X as Fu,Y as Ru,Z as $u,C as $e,a9 as Ou,u as Gl,W as fc,p as Lu,a8 as wc,a0 as Nu,a2 as gc,a1 as Yl,w as jl}from"../chunks/scheduler.CN_jtChM.js";import{R as Ce,B as yc,D as w,a as Ye,b as ee,P as q,M as Fl,e as ur,f as Xl,u as Zl,d as Kl,c as Ml,g as Tc,m as vc,o as Jl}from"../chunks/modal-service.C12e8zn2.js";import{S as ge,i as ye,f as fe,b as Z,d as J,m as K,a as C,t as O,e as M,g as Ie,c as Se,o as Xo,p as Zo,h as Me}from"../chunks/index.DLY4uaOq.js";import{S as st,P as De,e as Ee,f as Ge,s as Dt,u as Rl,o as $l,T as Ko,c as bc}from"../chunks/Toggle.BqV-7_Lc.js";import{v as Hu,M as kc,L as Dc,A as Ic,g as Ol,a as Bu,b as Mo,c as Sc,d as Wu,f as Vc,h as zu,i as Ae,j as Ac,k as _c,l as qc,m as _e,n as Ec,o as Oe,p as Uu,q as xc,r as Cc,s as Pc,t as Fc,u as Rc,w as Ql,x as eu,V as tu}from"../chunks/AttributeInput.BDIDmFkJ.js";const cr="https://paste.travja.dev",Gu=s=>{if(typeof s!="string")return Promise.reject(new Error('You cannot send that. Please include a "content" argument that is a valid string.'));if(s==="")return Promise.reject(new Error("You cannot send nothing."));const e={method:"POST",body:s,headers:{"Content-Type":"text/plain"}};return fetch(`${cr}/documents`,e).then(t=>t.json()).then(t=>{if(!t.key)throw new Error("Did not receive hastebin key.");return`${cr}/${t.key}`})},Yu=async s=>(s.url&&(s.url.includes("astebin.com")||s.url.includes("paste.travja.dev"))&&!s.url.includes("raw")&&(s.url=s.url.replace(/(astebin\.com|paste\.travja\.dev)/,"$1/raw")),!s.url&&s.id&&(s.url=`${cr}/raw/${s.id}`),s.url?await(await fetch(s.url)).text():"");function $c(s){let e,t,a;function r(o){s[6](o)}let n={id:s[1],placeholder:s[2],multiple:s[3],data:s[4]?["Any",...s[5].BLOCKS]:s[5].BLOCKS};return s[0]!==void 0&&(n.selected=s[0]),e=new st({props:n}),pe.push(()=>fe(e,"selected",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,[l]){const i={};l&2&&(i.id=o[1]),l&4&&(i.placeholder=o[2]),l&8&&(i.multiple=o[3]),l&48&&(i.data=o[4]?["Any",...o[5].BLOCKS]:o[5].BLOCKS),!t&&l&1&&(t=!0,i.selected=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Oc(s,e,t){let a;he(s,Hu,h=>t(5,a=h));let{id:r=void 0}=e,{placeholder:n=""}=e,{multiple:o=!1}=e,{any:l=!1}=e,{selected:i=void 0}=e;function c(h){i=h,t(0,i)}return s.$$set=h=>{"id"in h&&t(1,r=h.id),"placeholder"in h&&t(2,n=h.placeholder),"multiple"in h&&t(3,o=h.multiple),"any"in h&&t(4,l=h.any),"selected"in h&&t(0,i=h.selected)},[i,r,n,o,l,a,c]}let Lc=class extends ge{constructor(e){super(),ye(this,e,Oc,$c,we,{id:1,placeholder:2,multiple:3,any:4,selected:0})}};function Nc(s){let e,t,a;function r(o){s[1](o)}let n={any:!0,multiple:!0};return s[0].material!==void 0&&(n.selected=s[0].material),e=new Lc({props:n}),pe.push(()=>fe(e,"selected",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&1&&(t=!0,i.selected=o[0].material,me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Hc(s){let e,t,a,r,n;e=new De({props:{label:"Material",tooltip:"[material] "+s[0].materialTooltip,$$slots:{default:[Nc]},$$scope:{ctx:s}}});function o(i){s[2](i)}let l={type:"number",intMode:!0,label:"Data",tooltip:"[data] "+s[0].dataTooltip};return s[0].data!==void 0&&(l.value=s[0].data),a=new De({props:l}),pe.push(()=>fe(a,"value",o)),{c(){Z(e.$$.fragment),t=U(),Z(a.$$.fragment)},l(i){J(e.$$.fragment,i),t=G(i),J(a.$$.fragment,i)},m(i,c){K(e,i,c),j(i,t,c),K(a,i,c),n=!0},p(i,[c]){const h={};c&1&&(h.tooltip="[material] "+i[0].materialTooltip),c&17&&(h.$$scope={dirty:c,ctx:i}),e.$set(h);const p={};c&1&&(p.tooltip="[data] "+i[0].dataTooltip),!r&&c&1&&(r=!0,p.value=i[0].data,me(()=>r=!1)),a.$set(p)},i(i){n||(C(e.$$.fragment,i),C(a.$$.fragment,i),n=!0)},o(i){O(e.$$.fragment,i),O(a.$$.fragment,i),n=!1},d(i){i&&_(t),M(e,i),M(a,i)}}}function Bc(s,e,t){let{data:a}=e;const r=Ne();function n(l){s.$$.not_equal(a.material,l)&&(a.material=l,t(0,a))}function o(l){s.$$.not_equal(a.data,l)&&(a.data=l,t(0,a))}return s.$$set=l=>{"data"in l&&t(0,a=l.data)},s.$$.update=()=>{s.$$.dirty&1&&a&&r("save")},[a,n,o]}class Wc extends ge{constructor(e){super(),ye(this,e,Bc,Hc,we,{data:0})}}class Jo extends Ce{constructor(t,a){super();u(this,"key","block");u(this,"component",Wc);u(this,"data",{material:["Any"],data:-1,materialTooltip:"",dataTooltip:""});u(this,"setTooltip",()=>{throw new Error("Block Select requires tooltips be set in the constructor")});u(this,"clone",()=>{const t=new Jo;return t.data=JSON.parse(JSON.stringify(this.data)),t});u(this,"getData",()=>{const t={};return t.material=this.data.material,t.data=this.data.data??-1,t});u(this,"getSummary",()=>this.data.material+(this.data.data!=-1?":"+this.data.data:""));u(this,"deserialize",t=>{this.data.material=t.material||["Any"],this.data.data=t.data||-1});this.data.materialTooltip=t||"",this.data.dataTooltip=a||""}}function zc(s){let e,t,a,r;function n(i){s[2](i)}function o(i){s[3](i)}let l={};return s[0].material!==void 0&&(l.selected=s[0].material),s[0].any!==void 0&&(l.any=s[0].any),e=new kc({props:l}),pe.push(()=>fe(e,"selected",n)),pe.push(()=>fe(e,"any",o)),{c(){Z(e.$$.fragment)},l(i){J(e.$$.fragment,i)},m(i,c){K(e,i,c),r=!0},p(i,c){const h={};!t&&c&1&&(t=!0,h.selected=i[0].material,me(()=>t=!1)),!a&&c&1&&(a=!0,h.any=i[0].any,me(()=>a=!1)),e.$set(h)},i(i){r||(C(e.$$.fragment,i),r=!0)},o(i){O(e.$$.fragment,i),r=!1},d(i){M(e,i)}}}function Uc(s){let e,t;return e=new De({props:{label:"Material",tooltip:"[material] "+s[1],$$slots:{default:[zc]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.tooltip="[material] "+a[1]),r&33&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Gc(s,e,t){let{data:a}=e,{tooltip:r=void 0}=e;const n=Ne();function o(i){s.$$.not_equal(a.material,i)&&(a.material=i,t(0,a))}function l(i){s.$$.not_equal(a.any,i)&&(a.any=i,t(0,a))}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"tooltip"in i&&t(1,r=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&n("save")},[a,r,o,l]}class Yc extends ge{constructor(e){super(),ye(this,e,Gc,Uc,we,{data:0,tooltip:1})}}class ut extends Ce{constructor(t=!0,a){super();u(this,"component",Yc);u(this,"key","material");u(this,"data",{material:"Dirt",any:!1});u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>{const t=new ut;return t.data.material=this.data.material,t.data.any=this.data.any,t});u(this,"getData",()=>{const t={};return t.material=this.data.material,t});u(this,"getSummary",()=>this.data.material);u(this,"deserialize",t=>this.data.material=t[this.key]||"Dirt");this.data.any=t,a&&(this.data.material=a)}}class T extends Ce{constructor(t,a,r=!1){super();u(this,"component",yc);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new T(this.name,this.key,this.data));u(this,"getData",()=>{const t={};return t[this.key]=this.data,t});u(this,"getSummary",()=>this.data?"true":"");u(this,"deserialize",t=>this.data=Zu(t[this.key]));this.name=t,this.key=a,this.data=r}}function jc(s){let e,t,a;function r(o){s[3](o)}let n={label:s[1],tooltip:s[2],type:"number",placeholder:"0"};return s[0]!==void 0&&(n.value=s[0]),e=new De({props:n}),pe.push(()=>fe(e,"value",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,[l]){const i={};l&2&&(i.label=o[1]),l&4&&(i.tooltip=o[2]),!t&&l&1&&(t=!0,i.value=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Xc(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(i){a=i,t(0,a)}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"name"in i&&t(1,r=i.name),"tooltip"in i&&t(2,n=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&o("save")},[a,r,n,l]}class Zc extends ge{constructor(e){super(),ye(this,e,Xc,jc,we,{data:0,name:1,tooltip:2})}}class D extends Ce{constructor(t,a,r=0){super();u(this,"component",Zc);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new D(this.name,this.key,this.data));u(this,"getData",()=>{const t={};return t[this.key]=this.data||0,t});u(this,"getSummary",()=>this.data.toString());u(this,"deserialize",t=>this.data=t[this.key]||0);this.name=t,this.key=a,this.data=r}}function Kc(s){let e,t,a;function r(o){s[3](o)}let n={};return s[0].value!==void 0&&(n.value=s[0].value),e=new Dc({props:n}),pe.push(()=>fe(e,"value",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&1&&(t=!0,i.value=o[0].value,me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Mc(s){let e,t;return e=new De({props:{label:s[1],tooltip:s[2],$$slots:{default:[Kc]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.label=a[1]),r&4&&(n.tooltip=a[2]),r&33&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Jc(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(i){s.$$.not_equal(a.value,i)&&(a.value=i,t(0,a))}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"name"in i&&t(1,r=i.name),"tooltip"in i&&t(2,n=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&o("save")},[a,r,n,l]}class Qc extends ge{constructor(e){super(),ye(this,e,Jc,Mc,we,{data:0,name:1,tooltip:2})}}class Le extends Ce{constructor(t,a,r){super();u(this,"component",Qc);u(this,"data",{value:[]});u(this,"name","");u(this,"key","");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new Le(this.name,this.key,[...this.data.value]));u(this,"getData",()=>{const t={};return t[this.key]=this.data.value,t});u(this,"getSummary",()=>this.data.value.join(", "));u(this,"deserialize",t=>this.data.value=t[this.key]||[]);this.name=t,this.key=a,this.data.value=r||[]}}function ep(s){let e,t,a;function r(o){s[3](o)}let n={};return s[0]!==void 0&&(n.value=s[0]),e=new Ic({props:n}),pe.push(()=>fe(e,"value",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&1&&(t=!0,i.value=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function tp(s){let e,t;return e=new De({props:{label:s[1],tooltip:s[2],$$slots:{default:[ep]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.label=a[1]),r&4&&(n.tooltip=a[2]),r&33&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function ap(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(i){a=i,t(0,a)}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"name"in i&&t(1,r=i.name),"tooltip"in i&&t(2,n=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&o("save")},[a,r,n,l]}class sp extends ge{constructor(e){super(),ye(this,e,ap,tp,we,{data:0,name:1,tooltip:2})}}class f extends Ce{constructor(t,a,r=0,n=0){super();u(this,"component",sp);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new f(this.name,this.key,this.data.base,this.data.scale));u(this,"getData",()=>{const t={};return t[`${this.key}-base`]=this.data.base||0,t[`${this.key}-scale`]=this.data.scale||0,t});u(this,"getSummary",()=>this.data.base.toString());u(this,"deserialize",t=>{this.data.base=t[`${this.key}-base`]||0,this.data.scale=t[`${this.key}-scale`]||0});this.name=t,this.key=a,this.data=new Ku(t,r,n)}}function op(s){let e,t,a,r;return{c(){e=P("div"),t=ve(s[0]),a=U(),r=P("hr"),this.h()},l(n){e=F(n,"DIV",{class:!0});var o=Q(e);t=be(o,s[0]),a=G(o),r=F(o,"HR",{class:!0}),o.forEach(_),this.h()},h(){g(r,"class","svelte-x2dop6"),g(e,"class","svelte-x2dop6")},m(n,o){j(n,e,o),S(e,t),S(e,a),S(e,r)},p(n,[o]){o&1&&Ue(t,n[0])},i:Re,o:Re,d(n){n&&_(e)}}}function rp(s,e,t){let{data:a}=e;return s.$$set=r=>{"data"in r&&t(0,a=r.data)},[a]}class ip extends ge{constructor(e){super(),ye(this,e,rp,op,we,{data:0})}}class ae extends Ce{constructor(t){super();u(this,"key","section-marker");u(this,"component",ip);u(this,"data");u(this,"setTooltip",()=>this);u(this,"clone",()=>new ae(this.data));u(this,"getData",()=>({}));u(this,"getSummary",()=>this.data);u(this,"deserialize",()=>{});this.data=t}}function np(s){let e,t,a;function r(o){s[3](o)}let n={label:s[1],tooltip:s[2]};return s[0]!==void 0&&(n.value=s[0]),e=new De({props:n}),pe.push(()=>fe(e,"value",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,[l]){const i={};l&2&&(i.label=o[1]),l&4&&(i.tooltip=o[2]),!t&&l&1&&(t=!0,i.value=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function lp(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(i){a=i,t(0,a)}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"name"in i&&t(1,r=i.name),"tooltip"in i&&t(2,n=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&o("save")},[a,r,n,l]}class up extends ge{constructor(e){super(),ye(this,e,lp,np,we,{data:0,name:1,tooltip:2})}}class x extends Ce{constructor(t,a,r=""){super();u(this,"component",up);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new x(this.name,this.key,this.data));u(this,"getData",()=>{const t={};return t[this.key]=this.data||"",t});u(this,"getSummary",()=>this.data);u(this,"deserialize",t=>this.data=t[this.key]||"");this.name=t,this.key=a,this.data=r}}function cp(s){let e,t,a,r;function n(i){s[5](i)}function o(i){s[6](i)}let l={multiple:s[3]};return s[4]!==void 0&&(l.data=s[4]),s[0]!==void 0&&(l.selected=s[0]),e=new st({props:l}),pe.push(()=>fe(e,"data",n)),pe.push(()=>fe(e,"selected",o)),{c(){Z(e.$$.fragment)},l(i){J(e.$$.fragment,i)},m(i,c){K(e,i,c),r=!0},p(i,c){const h={};c&8&&(h.multiple=i[3]),!t&&c&16&&(t=!0,h.data=i[4],me(()=>t=!1)),!a&&c&1&&(a=!0,h.selected=i[0],me(()=>a=!1)),e.$set(h)},i(i){r||(C(e.$$.fragment,i),r=!0)},o(i){O(e.$$.fragment,i),r=!1},d(i){M(e,i)}}}function pp(s){let e,t;return e=new De({props:{label:s[1],tooltip:s[2],$$slots:{default:[cp]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.label=a[1]),r&4&&(n.tooltip=a[2]),r&281&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function hp(s,e,t){let a;he(s,yt,p=>t(4,a=p));let{data:r=[]}=e,{name:n=""}=e,{tooltip:o=void 0}=e,{multiple:l=!0}=e;const i=Ne();function c(p){a=p,yt.set(a)}function h(p){r=p,t(0,r),t(3,l)}return s.$$set=p=>{"data"in p&&t(0,r=p.data),"name"in p&&t(1,n=p.name),"tooltip"in p&&t(2,o=p.tooltip),"multiple"in p&&t(3,l=p.multiple)},s.$$.update=()=>{if(s.$$.dirty&9&&!l&&r.length===0&&t(0,r=""),s.$$.dirty&1)if(r instanceof Array)t(0,r=r.map(p=>{if(p instanceof Ke)return p;const A=Bl(p);if(A)return A})),i("save");else{if(r&&!(r instanceof Ke)){const p=Bl(r);p&&t(0,r=p)}i("save")}},[r,n,o,l,a,c,h]}class dp extends ge{constructor(e){super(),ye(this,e,hp,pp,we,{data:0,name:1,tooltip:2,multiple:3})}}class Ll extends Ce{constructor(t,a,r=!0){super();u(this,"component",dp);u(this,"name");u(this,"key");u(this,"data",[]);u(this,"tooltip");u(this,"multiple",!0);u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>{const t=new Ll(this.name,this.key);return t.data=this.data,t});u(this,"getData",()=>{const t={};return this.data instanceof Array?t[this.key]=this.data.map(a=>a instanceof Ke?a.name:a):t[this.key]=this.data instanceof Ke?this.data.name:this.data,t});u(this,"getSummary",()=>this.data instanceof Array?this.data.map(t=>t instanceof Ke?t.name:t).join(", "):this.data instanceof Ke?this.data.name:this.data);u(this,"deserialize",t=>this.data=t[this.key]||(this.multiple?[]:""));this.name=t,this.key=a,this.multiple=r}}function mp(s){let e,t,a,r;function n(i){s[5](i)}function o(i){s[6](i)}let l={multiple:s[3]};return s[4]!==void 0&&(l.data=s[4]),s[0]!==void 0&&(l.selected=s[0]),e=new st({props:l}),pe.push(()=>fe(e,"data",n)),pe.push(()=>fe(e,"selected",o)),{c(){Z(e.$$.fragment)},l(i){J(e.$$.fragment,i)},m(i,c){K(e,i,c),r=!0},p(i,c){const h={};c&8&&(h.multiple=i[3]),!t&&c&16&&(t=!0,h.data=i[4],me(()=>t=!1)),!a&&c&1&&(a=!0,h.selected=i[0],me(()=>a=!1)),e.$set(h)},i(i){r||(C(e.$$.fragment,i),r=!0)},o(i){O(e.$$.fragment,i),r=!1},d(i){M(e,i)}}}function fp(s){let e,t;return e=new De({props:{label:s[1],tooltip:s[2],$$slots:{default:[mp]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.label=a[1]),r&4&&(n.tooltip=a[2]),r&281&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function wp(s,e,t){let a;he(s,et,p=>t(4,a=p));let{data:r=[]}=e,{name:n=""}=e,{tooltip:o=void 0}=e,{multiple:l=!0}=e;const i=Ne();function c(p){a=p,et.set(a)}function h(p){r=p,t(0,r),t(3,l)}return s.$$set=p=>{"data"in p&&t(0,r=p.data),"name"in p&&t(1,n=p.name),"tooltip"in p&&t(2,o=p.tooltip),"multiple"in p&&t(3,l=p.multiple)},s.$$.update=()=>{if(s.$$.dirty&9&&!l&&(!r||r.length===0)&&t(0,r=""),s.$$.dirty&1)if(r instanceof Array)t(0,r=r.map(p=>{if(p instanceof He)return p;const A=Tt(p);if(A)return A})),i("save");else{if(r&&!(r instanceof He)){const p=Tt(r);p&&t(0,r=p)}i("save")}},[r,n,o,l,a,c,h]}class gp extends ge{constructor(e){super(),ye(this,e,wp,fp,we,{data:0,name:1,tooltip:2,multiple:3})}}class Qo extends Ce{constructor(t,a,r=!0){super();u(this,"component",gp);u(this,"name");u(this,"key");u(this,"data",[]);u(this,"tooltip");u(this,"multiple",!0);u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>{const t=new Qo(this.name,this.key);return t.data=this.data,t});u(this,"getData",()=>{const t={};return this.data instanceof Array?t[this.key]=this.data.map(a=>a instanceof He?a.name:a):t[this.key]=this.data instanceof He?this.data.name:this.data,t});u(this,"getSummary",()=>this.data instanceof Array?this.data.map(t=>t instanceof He?t.name:t).join(", "):this.data instanceof He?this.data.name:this.data);u(this,"deserialize",t=>{const a=t[this.key];a instanceof Array?this.data=a.map(r=>Tt(r)||new He({name:r})):a?this.data=Tt(a)||new He({name:a}):this.data=this.multiple?[]:""});this.name=t,this.key=a,this.multiple=r}}function yp(s){let e,t,a;function r(o){s[3](o)}let n={label:s[1],tooltip:s[2],type:"number",intMode:!0,placeholder:"0"};return s[0]!==void 0&&(n.value=s[0]),e=new De({props:n}),pe.push(()=>fe(e,"value",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,[l]){const i={};l&2&&(i.label=o[1]),l&4&&(i.tooltip=o[2]),!t&&l&1&&(t=!0,i.value=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Tp(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(i){a=i,t(0,a)}return s.$$set=i=>{"data"in i&&t(0,a=i.data),"name"in i&&t(1,r=i.name),"tooltip"in i&&t(2,n=i.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&o("save")},[a,r,n,l]}class vp extends ge{constructor(e){super(),ye(this,e,Tp,yp,we,{data:0,name:1,tooltip:2})}}class L extends Ce{constructor(t,a,r=0){super();u(this,"component",vp);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new L(this.name,this.key,this.data));u(this,"getData",()=>{const t={};return t[this.key]=this.data||0,t});u(this,"getSummary",()=>this.data.toString());u(this,"deserialize",t=>this.data=t[this.key]||0);this.name=t,this.key=a,this.data=r}}function bp(s){let e,t,a,r,n,o;return{c(){e=P("div"),t=P("input"),a=U(),r=P("input"),this.h()},l(l){e=F(l,"DIV",{class:!0});var i=Q(e);t=F(i,"INPUT",{class:!0}),a=G(i),r=F(i,"INPUT",{type:!0,class:!0}),i.forEach(_),this.h()},h(){g(t,"class","text svelte-1ncbyp2"),g(r,"type","color"),g(r,"class","svelte-1ncbyp2"),g(e,"class","wrap svelte-1ncbyp2")},m(l,i){j(l,e,i),S(e,t),Qe(t,s[0]),S(e,a),S(e,r),Qe(r,s[0]),n||(o=[B(t,"input",s[3]),B(r,"input",s[4])],n=!0)},p(l,i){i&1&&t.value!==l[0]&&Qe(t,l[0]),i&1&&Qe(r,l[0])},d(l){l&&_(e),n=!1,xe(o)}}}function kp(s){let e,t;return e=new De({props:{label:s[1],tooltip:s[2],$$slots:{default:[bp]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.label=a[1]),r&4&&(n.tooltip=a[2]),r&65&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Dp(s,e,t){let{data:a}=e,{name:r=""}=e,{tooltip:n=void 0}=e;const o=Ne();function l(){a=this.value,t(0,a)}function i(){a=this.value,t(0,a)}return s.$$set=c=>{"data"in c&&t(0,a=c.data),"name"in c&&t(1,r=c.name),"tooltip"in c&&t(2,n=c.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&o("save")},[a,r,n,l,i]}class Ip extends ge{constructor(e){super(),ye(this,e,Dp,kp,we,{data:0,name:1,tooltip:2})}}class le extends Ce{constructor(t,a,r="#12cfab"){super();u(this,"component",Ip);u(this,"name");u(this,"key");u(this,"data");u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>new le(this.name,this.key,this.data));u(this,"getData",()=>{const t={};return t[this.key]=this.data||"#000000",t});u(this,"getSummary",()=>this.data);u(this,"deserialize",t=>this.data=t[this.key]||"#12cfab");this.name=t,this.key=a,this.data=r}}function au(s,e,t){const a=s.slice();return a[14]=e[t],a[15]=e,a[16]=t,a}function Sp(s){let e,t,a;function r(o){s[13](o)}let n={id:s[1],placeholder:s[2],data:s[4]?["Any",...s[6].ENCHANTS]:s[6].ENCHANTS};return s[0]!==void 0&&(n.selected=s[0]),e=new st({props:n}),pe.push(()=>fe(e,"selected",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};l&2&&(i.id=o[1]),l&4&&(i.placeholder=o[2]),l&80&&(i.data=o[4]?["Any",...o[6].ENCHANTS]:o[6].ENCHANTS),!t&&l&1&&(t=!0,i.selected=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function Vp(s){let e,t,a,r=s[0]&&s[0]instanceof Array&&su(s),n={id:s[1],placeholder:s[2],data:s[4]?["Any",...s[6].ENCHANTS]:s[6].ENCHANTS};return t=new st({props:n}),s[12](t),t.$on("select",s[7]),{c(){r&&r.c(),e=U(),Z(t.$$.fragment)},l(o){r&&r.l(o),e=G(o),J(t.$$.fragment,o)},m(o,l){r&&r.m(o,l),j(o,e,l),K(t,o,l),a=!0},p(o,l){o[0]&&o[0]instanceof Array?r?(r.p(o,l),l&1&&C(r,1)):(r=su(o),r.c(),C(r,1),r.m(e.parentNode,e)):r&&(Ie(),O(r,1,1,()=>{r=null}),Se());const i={};l&2&&(i.id=o[1]),l&4&&(i.placeholder=o[2]),l&80&&(i.data=o[4]?["Any",...o[6].ENCHANTS]:o[6].ENCHANTS),t.$set(i)},i(o){a||(C(r),C(t.$$.fragment,o),a=!0)},o(o){O(r),O(t.$$.fragment,o),a=!1},d(o){o&&_(e),r&&r.d(o),s[12](null),M(t,o)}}}function su(s){let e,t,a=Ee(s[0]),r=[];for(let o=0;o<a.length;o+=1)r[o]=ou(au(s,a,o));const n=o=>O(r[o],1,1,()=>{r[o]=null});return{c(){for(let o=0;o<r.length;o+=1)r[o].c();e=Ve()},l(o){for(let l=0;l<r.length;l+=1)r[l].l(o);e=Ve()},m(o,l){for(let i=0;i<r.length;i+=1)r[i]&&r[i].m(o,l);j(o,e,l),t=!0},p(o,l){if(l&471){a=Ee(o[0]);let i;for(i=0;i<a.length;i+=1){const c=au(o,a,i);r[i]?(r[i].p(c,l),C(r[i],1)):(r[i]=ou(c),r[i].c(),C(r[i],1),r[i].m(e.parentNode,e))}for(Ie(),i=a.length;i<r.length;i+=1)n(i);Se()}},i(o){if(!t){for(let l=0;l<a.length;l+=1)C(r[l]);t=!0}},o(o){r=r.filter(Boolean);for(let l=0;l<r.length;l+=1)O(r[l]);t=!1},d(o){o&&_(e),jo(r,o)}}}function ou(s){let e,t,a,r,n,o,l;function i(...A){return s[9](s[16],...A)}function c(){return s[10](s[16])}e=new st({props:{id:s[1],placeholder:s[2],selected:s[14].name,data:s[4]?["Any",...s[6].ENCHANTS]:s[6].ENCHANTS}}),e.$on("select",i),e.$on("remove",c);function h(A){s[11](A,s[14])}let p={label:"Level",type:"number"};return s[14].level!==void 0&&(p.value=s[14].level),r=new De({props:p}),pe.push(()=>fe(r,"value",h)),{c(){Z(e.$$.fragment),t=U(),a=P("div"),Z(r.$$.fragment),o=U(),this.h()},l(A){J(e.$$.fragment,A),t=G(A),a=F(A,"DIV",{class:!0});var k=Q(a);J(r.$$.fragment,k),o=G(k),k.forEach(_),this.h()},h(){g(a,"class","enchant svelte-11u8x1j")},m(A,k){K(e,A,k),j(A,t,k),j(A,a,k),K(r,a,null),S(a,o),l=!0},p(A,k){s=A;const v={};k&2&&(v.id=s[1]),k&4&&(v.placeholder=s[2]),k&1&&(v.selected=s[14].name),k&80&&(v.data=s[4]?["Any",...s[6].ENCHANTS]:s[6].ENCHANTS),e.$set(v);const m={};!n&&k&1&&(n=!0,m.value=s[14].level,me(()=>n=!1)),r.$set(m)},i(A){l||(C(e.$$.fragment,A),C(r.$$.fragment,A),l=!0)},o(A){O(e.$$.fragment,A),O(r.$$.fragment,A),l=!1},d(A){A&&(_(t),_(a)),M(e,A),M(r)}}}function Ap(s){let e,t,a,r;const n=[Vp,Sp],o=[];function l(i,c){return i[3]?0:1}return e=l(s),t=o[e]=n[e](s),{c(){t.c(),a=Ve()},l(i){t.l(i),a=Ve()},m(i,c){o[e].m(i,c),j(i,a,c),r=!0},p(i,[c]){let h=e;e=l(i),e===h?o[e].p(i,c):(Ie(),O(o[h],1,1,()=>{o[h]=null}),Se(),t=o[e],t?t.p(i,c):(t=o[e]=n[e](i),t.c()),C(t,1),t.m(a.parentNode,a))},i(i){r||(C(t),r=!0)},o(i){O(t),r=!1},d(i){i&&_(a),o[e].d(i)}}}function _p(s,e,t){let a;he(s,Hu,d=>t(6,a=d));let{id:r=void 0}=e,{placeholder:n=""}=e,{multiple:o=!1}=e,{any:l=!1}=e,{selected:i=void 0}=e,c;const h=(d,I=-1)=>{o?(t(0,i=i||[]),I!==-1?t(0,i[I]={name:d.detail,level:1},i):i.push({name:d.detail,level:1}),c.focus(),d.preventDefault()):t(0,i={name:d.detail,level:1})},p=d=>(console.log("remove",d),i&&i instanceof Array?(i.splice(d,1),t(0,i=[...i])):t(0,i=void 0),!0),A=(d,I)=>h(I,d),k=d=>p(d);function v(d,I){s.$$.not_equal(I.level,d)&&(I.level=d,t(0,i))}function m(d){pe[d?"unshift":"push"](()=>{c=d,t(5,c)})}function y(d){i=d,t(0,i)}return s.$$set=d=>{"id"in d&&t(1,r=d.id),"placeholder"in d&&t(2,n=d.placeholder),"multiple"in d&&t(3,o=d.multiple),"any"in d&&t(4,l=d.any),"selected"in d&&t(0,i=d.selected)},[i,r,n,o,l,c,a,h,p,A,k,v,m,y]}let qp=class extends ge{constructor(e){super(),ye(this,e,_p,Ap,we,{id:1,placeholder:2,multiple:3,any:4,selected:0})}};function Ep(s){let e,t,a;function r(o){s[2](o)}let n={multiple:!0};return s[0].enchants!==void 0&&(n.selected=s[0].enchants),e=new qp({props:n}),pe.push(()=>fe(e,"selected",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&1&&(t=!0,i.selected=o[0].enchants,me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function xp(s){let e,t;return e=new De({props:{label:"Enchant",tooltip:"[enchant] "+s[1],$$slots:{default:[Ep]},$$scope:{ctx:s}}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&2&&(n.tooltip="[enchant] "+a[1]),r&17&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Cp(s,e,t){let{data:a}=e,{tooltip:r=void 0}=e;const n=Ne();function o(l){s.$$.not_equal(a.enchants,l)&&(a.enchants=l,t(0,a))}return s.$$set=l=>{"data"in l&&t(0,a=l.data),"tooltip"in l&&t(1,r=l.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&n("save")},[a,r,o]}class Pp extends ge{constructor(e){super(),ye(this,e,Cp,xp,we,{data:0,tooltip:1})}}class Nl extends Ce{constructor(t){super();u(this,"component",Pp);u(this,"key","enchant");u(this,"data",{enchants:[]});u(this,"tooltip");u(this,"setTooltip",t=>(this.tooltip=t,this));u(this,"clone",()=>{const t=new Nl;return t.data.enchants=[...this.data.enchants],t});u(this,"getData",()=>{const t={};return t.enchants=this.data.enchants.map(({name:a,level:r})=>`${a}:${r}`),t});u(this,"getSummary",()=>this.data.enchants.map(({name:t,level:a})=>`${t} ${a}`).join(", "));u(this,"deserialize",t=>{const a=t[this.key]||[];this.data.enchants=a.map(r=>{const[n,o]=r.split(":");return{name:n,level:parseInt(o)}})});t&&(this.data.enchants=[t])}}const It=class It extends se{constructor(){super({name:"Armor Equip",description:"Applies skill effects when a player equips a new item in an armor or hand slot",data:[new w("Slots","slots",["Any","Helmet","Chestplate","Leggings","Boots","Main hand","Offhand"],["Any"],!0).setTooltip("The armor slots to check for")],summaryItems:["slots"]})}};u(It,"new",()=>new It);let pr=It;const St=class St extends se{constructor(){super({name:"Attribute Change",description:"Applies skill effects when a player's attribute changes. <code>api-attribute</code> is the attribute name, <code>api-change</code> is the change, and <code>api-value</code> is the new value",data:[new w("Attribute","attr",["Any",...ke(tc)],["Any"],!0).setTooltip("The attribute to check for")],summaryItems:["attr"]})}};u(St,"new",()=>new St);let hr=St;const Vt=class Vt extends se{constructor(){super({name:"Block Break",description:"Applies skill effects when a player breaks a block matching the given details",data:[new Jo("The type of block expected to be broken","The expected data value of the block (-1 for any data value)")],summaryItems:["block"]})}};u(Vt,"new",()=>new Vt);let dr=Vt;const At=class At extends se{constructor(){super({name:"Block Place",description:"Applies skill effects when a player places a block matching the given details",data:[new Jo("The type of block expected to be placed","The expected data value of the block (-1 for any data value)")],summaryItems:["block"]})}};u(At,"new",()=>new At);let mr=At;const _t=class _t extends se{constructor(){super({name:"Cast",description:"Applies skill effects when a player casts the skill using either the cast command, the skill bar, or click combos"})}};u(_t,"new",()=>new _t);let fr=_t;const qt=class qt extends se{constructor(){super({name:"Chat",description:"Applies skill effects when a player sends a chat message in the specified format",data:[new T("Cancel","cancel",!1).setTooltip("Whether to cancel message or not"),new T("Regex","regex",!1).setTooltip("Whether to use format value as regex or check if message contains format value"),new x("Format","format","").setTooltip("Format of message (if message contains format or regex)")],summaryItems:["format","cancel"]})}};u(qt,"new",()=>new qt);let wr=qt;const Et=class Et extends se{constructor(){super({name:"Cleanup",description:"Applies skill effects when the player disconnects or unlearns the skill. This is always applied with a skill level of 1 just for the sake of math"})}};u(Et,"new",()=>new Et);let gr=Et;const xt=class xt extends se{constructor(){super({name:"Crouch",description:"Applies skill effects when a player starts or stops crouching using the shift key",data:[new w("Crouching","type",["Start Crouching","Stop Crouching","Both"])],summaryItems:["type"]})}};u(xt,"new",()=>new xt);let yr=xt;const Ct=class Ct extends se{constructor(){super({name:"Death",description:"Applies skill effects when a player dies"})}};u(Ct,"new",()=>new Ct);let Tr=Ct;const Pt=class Pt extends se{constructor(){super({name:"Drop Item",description:"Applies skill effects upon dropping an item",data:[new w("Drop multiple","drop multiple",["True","False","Ignore"],"Ignore").setTooltip("Whether the player has to drop multiple items or a single item")],summaryItems:["drop multiple"]})}};u(Pt,"new",()=>new Pt);let vr=Pt;const Ft=class Ft extends se{constructor(){super({name:"Entity Target",description:"Applies skill effects when an entity targets the caster",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new w("Types","types",["Any",...Ol()],["Any"],!0).setTooltip("The entity types to target"),new T("Blacklist","blacklist",!1).setTooltip("Whether to consider the listed types as a blacklist, meaning only entities that do NOT match one of them will trigger.")],summaryItems:["target","types","blacklist"]})}};u(Ft,"new",()=>new Ft);let br=Ft;const Rt=class Rt extends se{constructor(){super({name:"Environment Damage",description:"Applies skill effects when a player takes environmental damage",data:[new w("Type","type",Bu,["Fall"],!0).setTooltip("The source of damage to apply for")],summaryItems:["type"]})}};u(Rt,"new",()=>new Rt);let kr=Rt;const $t=class $t extends se{constructor(){super({name:"Fishing",description:"Applies skill effects upon right-clicking with a fishing rod"})}};u($t,"new",()=>new $t);let Dr=$t;const Ot=class Ot extends se{constructor(){super({name:"Fishing Bite",description:"Applies skill effects when a fish bites the fishing rod of a player"})}};u(Ot,"new",()=>new Ot);let Ir=Ot;const Lt=class Lt extends se{constructor(){super({name:"Fishing Fail",description:"Applies skill effects when a player fails to catch a fish due to poor timing"})}};u(Lt,"new",()=>new Lt);let Sr=Lt;const Nt=class Nt extends se{constructor(){super({name:"Fishing Grab",description:"Applies skill effects when a player catches a fish"})}};u(Nt,"new",()=>new Nt);let Vr=Nt;const Ht=class Ht extends se{constructor(){super({name:"Fishing Ground",description:"Applies skill effects when the bobber of a fishing rod hits the ground"})}};u(Ht,"new",()=>new Ht);let Ar=Ht;const Bt=class Bt extends se{constructor(){super({name:"Fishing Reel",description:"Applies skill effects when a player reels in a fishing rod out of water or air with no fish on the rod"})}};u(Bt,"new",()=>new Bt);let _r=Bt;const Wt=class Wt extends se{constructor(){super({name:"Initialize",description:"Applies skill effects immediately. This can be used for passive abilities"})}};u(Wt,"new",()=>new Wt);let qr=Wt;const zt=class zt extends se{constructor(){super({name:"Item Swap",description:"Applies skill effects upon pressing the swap-key on your keyboard",data:[new T("Cancel Swap","cancel",!0).setTooltip("True cancels the item swap. False allows the item swap")],summaryItems:["cancel"]})}};u(zt,"new",()=>new zt);let Er=zt;const Ut=class Ut extends se{constructor(){super({name:"Kill",description:"Applies skill effects upon killing something",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity")],summaryItems:["target"]})}};u(Ut,"new",()=>new Ut);let xr=Ut;const Gt=class Gt extends se{constructor(){super({name:"Land",description:"Applies skill effects when a player lands on the ground",data:[new D("Min Distance","min-distance").setTooltip("The minimum distance the player should fall before effects activate")],summaryItems:["min-distance"]})}};u(Gt,"new",()=>new Gt);let Cr=Gt;const Yt=class Yt extends se{constructor(){super({name:"Launch",description:"Applies skill effects when a player launches a projectile",data:[new w("Type","type",Mo,"Any").setTooltip("The type of projectile that should be launched")],summaryItems:["type"]})}};u(Yt,"new",()=>new Yt);let Pr=Yt;const jt=class jt extends se{constructor(){super({name:"Left Click",description:"Applies skill effects upon performing a left-click",data:[new w("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").setTooltip("If the player has to be crouching in order for this trigger to function")],summaryItems:["crouch"]})}};u(jt,"new",()=>new jt);let Fr=jt;const Xt=class Xt extends se{constructor(){super({name:"Move",description:"Applies skill effects when a player moves around. This triggers every tick the player is moving, so use this sparingly. Use the 'api-moved' value to check/use the distance traveled"})}};u(Xt,"new",()=>new Xt);let Rr=Xt;const Zt=class Zt extends se{constructor(){super({name:"Physical Damage",description:"Applies skill effects when a player deals physical (or non-skill) damage. This includes melee attacks and firing a bow",data:[new T("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new w("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new D("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new D("Max Damage","dmg-max",999).setTooltip("The minimum damage that needs to be dealt")],summaryItems:["target","type","dmg-min","dmg-max"]})}};u(Zt,"new",()=>new Zt);let $r=Zt;const Kt=class Kt extends se{constructor(){super({name:"Projectile Hit",description:"Applies skill effects when a projectile hits a block/entity",data:[new T("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new w("Type","type",["Both","Entity","Block"],"Both").setTooltip("The type of what projectile hits"),new w("Projectile","projectile",Mo,["Any"],!0).setTooltip("The type of projectile shot")],summaryItems:["target","type","projectile"]})}};u(Kt,"new",()=>new Kt);let Or=Kt;const Mt=class Mt extends se{constructor(){super({name:"Projectile Tick",description:"Applies skill effects every interval while a projectile is in the air",data:[new T("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new L("Interval","interval",1).setTooltip("Interval between trigger executions"),new L("Delay","delay",0).setTooltip("Delay before executing trigger for the first time"),new w("Projectile","projectile",Mo,["Any"],!0).setTooltip("The type of projectile shot")],summaryItems:["target","interval","delay","projectile"]})}};u(Mt,"new",()=>new Mt);let Lr=Mt;const Jt=class Jt extends se{constructor(){super({name:"Right Click",description:"Applies skill effects upon performing a right-click (NOTE: When clicking in air, you have to have an item in your hand)",data:[new w("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").setTooltip("If the player has to be crouching in order for this trigger to function")],summaryItems:["crouch"]})}};u(Jt,"new",()=>new Jt);let Nr=Jt;const Qt=class Qt extends se{constructor(){super({name:"Skill Cast",description:"Applies skill effects when a player casts a skill",data:[new T("Cancel Cast","cancel",!1).setTooltip("True cancels the skill cast. False allows the skill cast"),new Le("Classes","allowed-classes").setTooltip("The list of classes which will trigger this effect. Leave blank to allow all to trigger. Use '!xxx' to exclude"),new Le("Skills","allowed-skills").setTooltip("The list of skills which will trigger this effect. Leave blank to allow all to trigger. Use '!xxx' to exclude")],summaryItems:["cancel","allowed-classes","allowed-skills"]})}};u(Qt,"new",()=>new Qt);let Hr=Qt;const ea=class ea extends se{constructor(){super({name:"Skill Damage",description:"Applies skill effects when a player deals damage with a skill",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the damaged entity"),new D("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new D("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt"),new Le("Category","category",["default"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage")],summaryItems:["target","dmg-min","dmg-max","category"]})}};u(ea,"new",()=>new ea);let Br=ea;const ta=class ta extends se{constructor(){super({name:"Took Physical Damage",description:"Applies skill effects when a player takes physical (or non-skill) damage. This includes melee attacks and projectiles not fired by a skill",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new w("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new D("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new D("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt")],summaryItems:["target","type","dmg-min","dmg-max"]})}};u(ta,"new",()=>new ta);let Wr=ta;const aa=class aa extends se{constructor(){super({name:"Took Skill Damage",description:"Applies skill effects when a player takes damage from a skill other than their own",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new D("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new D("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt"),new Le("Category","category",["default"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage")],summaryItems:["target","dmg-min","dmg-max","category"]})}};u(aa,"new",()=>new aa);let zr=aa;const sa=class sa extends se{constructor(){super({name:"Consume",description:"Applies skill effects when a player consumes an item",data:[new w("Material","material",Sc,"Any").setTooltip("The type of item that the player has consumed."),new w("Potion","potion",Wu,"Any").requireValue("material",["Potion"]).setTooltip("The type of potion effect to apply")],summaryItems:["material","potion"]})}};u(sa,"new",()=>new sa);let Ur=sa;const oa=class oa extends se{constructor(){super({name:"Heal",description:"Applies skill effects when the player receives heal from any source. Use {api-heal} to get heal value",data:[new D("Min Heal","heal-min",0).setTooltip("The minimum health that needs to be received"),new D("Max Heal","heal-max",999).setTooltip("The maximum health that needs to be received")],summaryItems:["heal-min","heal-max"]})}};u(oa,"new",()=>new oa);let Gr=oa;const ra=class ra extends se{constructor(){super({name:"Shield",description:"Applies skill effects when the player blocks damage with their shield. Use {api-blocked} to get amount of blocked damage.",data:[new T("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new w("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new D("Damage Heal","dmg-min",0).setTooltip("The minimum damage that needs to be blocked"),new D("Damage Heal","dmg-max",999).setTooltip("The maximum damage that needs to be blocked")],summaryItems:["target","type","dmg-min","dmg-max"]})}};u(ra,"new",()=>new ra);let Yr=ra;const ia=class ia extends se{constructor(){super({name:"Signal",description:"Applies skill effects when the player receive a signal emitted from Signal Emit mechanic.",data:[new T("Target Receiver","target",!0).setTooltip("True makes children target the receiver. False makes children target the emitter"),new x("Signal","signal").setTooltip("Name of signal want to receive.")],summaryItems:["target","signal"]})}};u(ia,"new",()=>new ia);let jr=ia;const ct=()=>[new w("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to get"),new T("Through Wall","wall",!1).setTooltip("Whether to allow targets to be on the other side of a wall"),new T("Include Invulnerable","invulnerable",!1).setTooltip("Whether to target on invulnerable entities"),new w("Include Caster","caster",["True","False","In area"],"False").setTooltip('Whether to include the caster in the target list. "True" will always include them, "False" will never, and "In area" will only if they are within the targeted area'),new f("Max Targets","max",99).setTooltip("The max amount of targets to apply children to")],Pe=()=>[new ae("Particles at target"),new T("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),...Be("per-target"),new w("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new T("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new f("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement")],na=class na extends Ye{constructor(){super({name:"Area",description:"Targets all units in a radius from the current target (the casting player is the default target)",data:[new f("Radius","radius",3).setTooltip("The radius of the area to target in blocks"),...ct(),new T("Random","random",!1).setTooltip("Whether to randomize the targets selected")],preview:[...Pe(),new ae("Circle Preview"),new T("Circle Preview","circle",!1).setTooltip("Displays particles as a circle around the targeted area"),new D("Density","circle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("circle",[!0]),...Be("circle"),new ae("Sphere Preview"),new T("Sphere Preview","sphere",!1).setTooltip("Displays particles as a sphere around the targeted area"),new D("Density","sphere-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("sphere",[!0]),...Be("sphere")],summaryItems:["radius","group","wall","caster","max","random"]})}};u(na,"new",()=>new na);let Xr=na;const la=class la extends Ye{constructor(){super({name:"Cone",description:"Targets all units in a line in front of the current target (the casting player is the default target). If you include the caster, that counts towards the max amount",data:[new f("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new f("Angle","angle",90).setTooltip("The angle of the cone arc in degrees"),new T("Reset Y","reset-y",!0).setTooltip("Whether to remove the Y component of the caster/target when determining targets"),...ct()],preview:[...Pe(),new ae("Triangle Preview"),new T("Triangle Preview","triangle",!1).setTooltip("Displays particles as a two lines on both sides around the targeted area"),new D("Density","triangle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("triangle",[!0]),new D("Start distance","triangle-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("triangle",[!0]),...Be("triangle"),new ae("Cone Preview"),new T("Cone Preview","cone",!1).setTooltip("Displays particles as a cone around the targeted area"),new D("Density","cone-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cone",[!0]),new D("Start distance","cone-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cone",[!0]),...Be("cone")],summaryItems:["range","angle","group","wall","caster","max"]})}};u(la,"new",()=>new la);let Zr=la;const ua=class ua extends Ye{constructor(){super({name:"Linear",description:"Targets all units in a line in front of the current target (the casting player is the default target)",data:[new f("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new f("Tolerance","tolerance").setTooltip("How much to expand the potential entity's hit-box in all directions, in blocks. This makes it easier to aim"),...ct()],preview:[...Pe(),new ae("Line Preview"),new T("Line Preview","line",!1).setTooltip("Displays particles as a line of particles in front of the caster"),new D("Density","line-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("line",[!0]),new D("Start distance","line-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("line",[!0]),...Be("line"),new ae("Cylinder Preview"),new T("Cylinder Preview","cylinder",!1).setTooltip("Displays particles as a cylinder of particles in front of the caster, showing the component's tolerance"),new D("Density","cylinder-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cylinder",[!0]),new D("Start distance","cylinder-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cylinder",[!0]),...Be("cylinder")],summaryItems:["range","tolerance","group","wall","caster","max"]})}};u(ua,"new",()=>new ua);let Kr=ua;const ca=class ca extends Ye{constructor(){super({name:"Location",description:"Targets the location the target or caster is looking at. Combine this with another targeting type for ranged area effects",data:[new f("Range","range",5).setTooltip("The max distance the location can be from the target's eyes"),new T("Entities","entities",!0).setTooltip("True to account for entities, or false to pass through them"),new T("Fluids","fluids",!1).setTooltip("True to account for fluids (water and lava), or false to pass through them"),new T("Passable blocks","passable",!0).setTooltip("True to account for passable or non-collidable blocks (grass, saplings, etc), or false to pass through them"),new T("Center","center",!1).setTooltip("Whether to move the hit location to the center of the block")],preview:[...Pe()],summaryItems:["range","entities","fluids","passable"]})}};u(ca,"new",()=>new ca);let Mr=ca;const pa=class pa extends Ye{constructor(){super({name:"Nearest",description:"Targets the closest unit(s) in a radius from the current target (the casting player is the default target). If you include the caster, that counts towards the max number",data:[new f("Range","range",3).setTooltip("The radius of the area to target in blocks"),...ct()],preview:[...Pe(),new ae("Circle Preview"),new T("Circle Preview","circle",!1).setTooltip("Displays particles as a circle around the targeted area"),new D("Density","circle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("circle",[!0]),...Be("circle"),new ae("Sphere Preview"),new T("Sphere Preview","sphere",!1).setTooltip("Displays particles as a sphere around the targeted area"),new D("Density","sphere-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("sphere",[!0]),...Be("sphere")],summaryItems:["range","group","wall","caster","max"]})}};u(pa,"new",()=>new pa);let Jr=pa;const ha=class ha extends Ye{constructor(){super({name:"Offset",description:"Targets a location that is the given offset away from each target",data:[new ae("Offset"),new f("Forward","forward").setTooltip("The offset from the target in the direction they are facing. Negative numbers go backwards"),new f("Upward","upward",2,.5).setTooltip("The offset from the target upwards. Negative numbers go below them"),new f("Right","right").setTooltip("The offset from the target to their right. Negative numbers go to the left")],preview:[...Pe()],summaryItems:["forward","upward","right"]})}};u(ha,"new",()=>new ha);let Qr=ha;const da=class da extends Ye{constructor(){super({name:"Remember",description:'Targets entities stored using the "Remember Targets" mechanic for the matching key. If it was never set, this will fail',data:[new x("Key","key","target").setTooltip('The unique key for the target group that should match that used by the "Remember Targets" skill')],preview:[...Pe()],summaryItems:["key"]})}};u(da,"new",()=>new da);let ei=da;const ma=class ma extends Ye{constructor(){super({name:"Self",description:"Returns the current target back to the caster"})}};u(ma,"new",()=>new ma);let ti=ma;const fa=class fa extends Ye{constructor(){super({name:"Single",description:"Targets a single unit in front of the current target (the casting player is the default target)",data:[new f("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new f("Tolerance","tolerance").setTooltip("How much to expand the potential entity's hitbox in all directions, in blocks. This makes it easier to aim"),new w("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to get"),new T("Through Wall","wall",!1).setTooltip("Whether to allow targets to be on the other side of a wall")],preview:[...Pe(),new ae("Line Preview"),new T("Line Preview","line",!1).setTooltip("Displays particles as a line of particles in front of the caster"),new D("Density","line-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("line",[!0]),new D("Start distance","line-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("line",[!0]),...Be("line"),new ae("Cylinder Preview"),new T("Cylinder Preview","cylinder",!1).setTooltip("Displays particles as a cylinder of particles in front of the caster, showing the component's tolerance"),new D("Density","cylinder-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cylinder",[!0]),new D("Start distance","cylinder-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cylinder",[!0]),...Be("cylinder")],summaryItems:["range","tolerance","group","wall"]})}};u(fa,"new",()=>new fa);let ai=fa;const wa=class wa extends Ye{constructor(){super({name:"World",description:"Targets all entities in the caster's world",data:[...ct()],summaryItems:["group","wall","caster","max"]})}};u(wa,"new",()=>new wa);let si=wa;const ot=()=>[new T("Check Material","check-mat",!0).setTooltip("Whether the item needs to be a certain type"),new ut(!1,"Arrow").requireValue("check-mat",[!0]).setTooltip("The type the item needs to be"),new T("Check Data","check-data",!1).setTooltip("Whether the item needs to have a certain data value"),new L("Data","data").requireValue("check-data",[!0]).setTooltip("The data value the item must have"),new T("Check Custom Data","check-custom-data",!1).setTooltip("Whether the item needs to have a certain custom model data value"),new L("Custom Data","custom-data").requireValue("check-custom-data",[!0]).setTooltip("The custom model data value the item must have"),new T("Check Lore","check-lore",!1).setTooltip("Whether the item requires a bit of text in its lore"),new x("Lore","lore","text").requireValue("check-lore",[!0]).setTooltip("The text the item requires in its lore"),new T("Check Name","check-name",!1).setTooltip("Whether the item needs to have a bit of text in its display name"),new x("Name","name","name").requireValue("check-name",[!0]).setTooltip("The text the item requires in its display name"),new T("Regex","regex",!1).setTooltip("Whether the name and lore checks are regex strings. If you do not know what regex is, leave this option alone")],ga=class ga extends ee{constructor(){super({name:"Altitude",description:"Applies child components whenever the player is on a certain height-level",data:[new f("Min","min").setTooltip("The minimum height a player has to be on"),new f("Max","max").setTooltip("The maximum height a player can be on")],summaryItems:["min","max"]})}};u(ga,"new",()=>new ga);let oi=ga;const ya=class ya extends ee{constructor(){super({name:"Armor",description:"Applies child components when the target is wearing an armor item matching the given details",data:[new w("Armor","armor",["Any","Helmet","Chestplate","Leggings","Boots"]).setTooltip("The type of armor to check"),...ot()],summaryItems:["armor","material","data","lore","name"]})}};u(ya,"new",()=>new ya);let ri=ya;const Ta=class Ta extends ee{constructor(){super({name:"Attribute",description:"Requires the target to have a given number of attributes",data:[new x("Attribute","attribute","Vitality").setTooltip("The name of the attribute you are checking the value of"),new f("Min","min").setTooltip("The minimum amount of the attribute the target requires"),new f("Max","max",999).setTooltip("The maximum amount of the attribute the target requires")],summaryItems:["attribute","min","max"]})}};u(Ta,"new",()=>new Ta);let ii=Ta;const va=class va extends ee{constructor(){super({name:"Biome",description:"Applies child components when in a specified biome",data:[new w("Type","type",["In Biome","Not In Biome"],"In Biome").setTooltip("Whether the target should be in the biome. If checking for in the biome, they must be in any one of the checked biomes. If checking for the opposite, they must not be in any of the checked biomes"),new w("Biome","biome",Vc,["Forest"],!0).setTooltip("The biomes to check for. The expectation would be any of the selected biomes need to match")],summaryItems:["type","biome"]})}};u(va,"new",()=>new va);let ni=va;const ba=class ba extends ee{constructor(){super({name:"Block",description:"Applies child components if the target is currently standing on a block of the given type",data:[new w("Type","standing",["On Block","Not On Block","In Block","Not In Block"]).setTooltip(`Specifies which block to check and whether it should match the selected material. "On Block" is directly below the player while "In Block" is the block a player's feet are in`),new ut().setTooltip("The type of the block to require the targets to stand on")],summaryItems:["standing","material"]})}};u(ba,"new",()=>new ba);let li=ba;const ka=class ka extends ee{constructor(){super({name:"Burning",description:"Applies child components if the caster burns or not",data:[new w("Type","burn",["Burn","Dont burn"],"Burn").setTooltip("Specifies whether the player has to be burning for this skill to be performed")],summaryItems:["burn"]})}};u(ka,"new",()=>new ka);let ui=ka;const Da=class Da extends ee{constructor(){super({name:"Ceiling",description:"Checks the height of the ceiling above each target",data:[new f("Distance","distance",5).setTooltip("How high to check for the ceiling"),new T("At least","at-least",!0).setTooltip("When true, the ceiling must be at least the give number of blocks high. If false, the ceiling must be lower than the given number of blocks")],summaryItems:["distance","at-least"]})}};u(Da,"new",()=>new Da);let ci=Da;const Ia=class Ia extends ee{constructor(){super({name:"Chance",description:"Rolls a chance to apply child components",data:[new f("Chance","chance",25).setTooltip('The chance to execute children as a percentage. "25" would be 25%')],summaryItems:["chance"]})}};u(Ia,"new",()=>new Ia);let pi=Ia;const Sa=class Sa extends ee{constructor(){super({name:"Class",description:'Applies child components when the target is the given class or optionally a profession of that class. For example, if you check for "Fighter" which professes into "Warrior", a "Warrior" will pass the check if you do not enable "exact"',data:[new Ll("Class","class",!1).setTooltip("The class the player should be"),new T("Exact","exact",!1).setTooltip("Whether the player must be exactly the given class. If false, they can be a later profession of the class")],summaryItems:["class","exact"]})}};u(Sa,"new",()=>new Sa);let hi=Sa;const Va=class Va extends ee{constructor(){super({name:"Class Level",description:"Applies child components when the level of the class with this skill is within the range. This only checks the level of the caster, not the targets",data:[new L("Min Level","min-level",2).setTooltip("The minimum class level the player should be. If the player has multiple classes, this will be of their main class"),new L("Max Level","max-level",99).setTooltip("The maximum class level the player should be. If the player has multiple classes, this will be of their main class")],summaryItems:["min-level","max-level"]})}};u(Va,"new",()=>new Va);let di=Va;const Aa=class Aa extends ee{constructor(){super({name:"Combat",description:"Applies child components to targets that are in/out of combat, depending on the settings",data:[new T("In Combat","combat",!0).setTooltip("Whether the target should be in or out of combat"),new D("Seconds","seconds",10).setTooltip("The time in seconds since the last combat activity before something is considered not in combat")],summaryItems:["combat","seconds"]})}};u(Aa,"new",()=>new Aa);let mi=Aa;const _a=class _a extends ee{constructor(){super({name:"Crouch",description:"Applies child components if the target player(s) are crouching",data:[new T("Crouching","crouch",!0).setTooltip("Whether the player should be crouching")],summaryItems:["crouch"]})}};u(_a,"new",()=>new _a);let fi=_a;const qa=class qa extends ee{constructor(){super({name:"Direction",description:"Applies child components when the target or caster is facing the correct direction relative to the other",data:[new w("Type","type",["Target","Caster"]).setTooltip("The entity to check the direction of"),new w("Direction","direction",["Away","Towards"]).setTooltip("The direction the chosen entity needs to be looking relative to the other")],summaryItems:["type","direction"]})}};u(qa,"new",()=>new qa);let wi=qa;const Ea=class Ea extends ee{constructor(){super({name:"Distance",description:"Applies child components when the distance between the caster and the target matches the settings",data:[new f("Min Value","min-value").setTooltip("The minimum value for the distance required. This should be >= 0"),new f("Max Value","max-value",50).setTooltip("The maximum value for the distance required. This should be larger than the minimum value")],summaryItems:["min-value","max-value"]})}};u(Ea,"new",()=>new Ea);let gi=Ea;const xa=class xa extends ee{constructor(){super({name:"Elevation",description:"Applies child components when the elevation of the target matches the settings",data:[new w("Type","type",["Normal","Difference"]).setTooltip("The type of comparison to make. Normal is just their Y-coordinate. Difference would be the difference between that the caster's Y-coordinate"),new f("Min Value","min-value").setTooltip('The minimum value for the elevation required. A positive minimum value with a "Difference" type would be for when the target is higher up than the caster'),new f("Max Value","max-value",255).setTooltip('The maximum value for the elevation required. A negative maximum value with a "Difference" type would be for when the target is below the caster')],summaryItems:["type","min-value","max-value"]})}};u(xa,"new",()=>new xa);let yi=xa;const Ca=class Ca extends ee{constructor(){super({name:"Else",description:"Applies child elements if the previous component failed to execute. This not only applies for conditions not passing, but mechanics failing due to no target or other cases"})}};u(Ca,"new",()=>new Ca);let Ti=Ca;const Pa=class Pa extends ee{constructor(){super({name:"Entity Type",description:"Applies child elements if the target matches one of the selected entity types",data:[new w("Types","types",["Location",...Ol()],[],!0).setTooltip("The entity types to target"),new T("Blacklist","blacklist",!1).setTooltip("Whether to consider the listed types as a blacklist, meaning only entities that do NOT match one of them will pass the condition.")],summaryItems:["types"]})}};u(Pa,"new",()=>new Pa);let vi=Pa;const Fa=class Fa extends ee{constructor(){super({name:"Fire",description:"Applies child components when the target is on fire",data:[new w("Type","type",["On Fire","Not On Fire"],"On Fire").setTooltip("Whether the target should be on fire")],summaryItems:["type"]})}};u(Fa,"new",()=>new Fa);let bi=Fa;const Ra=class Ra extends ee{constructor(){super({name:"Flag",description:"Applies child components when the target is marked by the appropriate flag",data:[new w("Type","type",["Set","Not Set"],"Set").setTooltip("Whether the flag should be set"),new x("Key","key","key").setTooltip("The unique key representing the flag. This should match the key for when you set it using the Flag mechanic or the Flat Toggle mechanic")],summaryItems:["type","key"]})}};u(Ra,"new",()=>new Ra);let ki=Ra;const $a=class $a extends ee{constructor(){super({name:"Food",description:"Applies child components when the target's food level matches the settings",data:[new w("Type","type",["Food","Percent","Difference","Difference Percent"]).setTooltip("The type of measurement to use for the food. Food level is their flat food left. Percent is the percentage of food they have left. Difference is the difference between the target's flat food and the caster's. Difference percent is the difference between the target's percentage food left and the caster's"),new f("Min Value","min-value").setTooltip('The minimum food required. A positive minimum with one of the "Difference" types would be for when the target has more food'),new f("Max Value","max-value",10,2).setTooltip('The maximum food required. A negative maximum with one of the "Difference" types would be for when the target has less food')],summaryItems:["type","min-value","max-value"]})}};u($a,"new",()=>new $a);let Di=$a;const Oa=class Oa extends ee{constructor(){super({name:"Ground",description:"Applies child components when the target is on the ground",data:[new w("Type","type",["On Ground","Not On Ground"]).setTooltip("Whether the target should be on the ground")],summaryItems:["type"]})}};u(Oa,"new",()=>new Oa);let Ii=Oa;const La=class La extends ee{constructor(){super({name:"Health",description:"Applies child components when the target's health matches the settings",data:[new w("Type","type",["Health","Percent","Difference","Difference Percent"]).setTooltip("The type of measurement to use for the health. Health is their flat health left. Percent is the percentage of health they have left. Difference is the difference between the target's flat health and the caster's. Difference percent is the difference between the target's percentage health left and the caster's"),new f("Min Value","min-value").setTooltip('The minimum health required. A positive minimum with one of the "Difference" types would be for when the target has more health'),new f("Max Value","max-value",10,2).setTooltip('The maximum health required. A negative maximum with one of the "Difference" types would be for when the target has less health')],summaryItems:["type","min-value","max-value"]})}};u(La,"new",()=>new La);let Si=La;const Na=class Na extends ee{constructor(){super({name:"Item",description:"Applies child components when the target is wielding an item matching the given material",data:[...ot()],summaryItems:["material","data","lore","name"]})}};u(Na,"new",()=>new Na);let Vi=Na;const Ha=class Ha extends ee{constructor(){super({name:"Inventory",description:"Applies child components when the target player contains the given item in their inventory. This does not work on mobs",data:[new f("Amount","amount",1).setTooltip("The amount of the item needed in the player's inventory"),...ot()],summaryItems:["material","amount","data","lore","name"]})}};u(Ha,"new",()=>new Ha);let Ai=Ha;const Ba=class Ba extends ee{constructor(){super({name:"Light",description:"Applies child components when the light level at the target's location matches the settings",data:[new f("Min Light","min-light").setTooltip("The minimum light level needed. 16 is full brightness while 0 is complete darkness"),new f("Max Light","max-light",16,16).setTooltip("The maximum light level needed. 16 is full brightness while 0 is complete darkness")],summaryItems:["min-light","max-light"]})}};u(Ba,"new",()=>new Ba);let _i=Ba;const Wa=class Wa extends ee{constructor(){super({name:"Mana",description:"Applies child components when the target's mana matches the settings",data:[new w("Type","type",["Mana","Percent","Difference","Difference Percent"],"Mana").setTooltip("The type of measurement to use for the mana. Mana is their flat mana left. Percent is the percentage of mana they have left. Difference is the difference between the target's flat mana and the caster's. Difference percent is the difference between the target's percentage mana left and the caster's"),new f("Min Value","min-value").setTooltip("The minimum amount of mana needed"),new f("Max Value","max-value",10,2).setTooltip("The maximum amount of mana needed")],summaryItems:["type","min-value","max-value"]})}};u(Wa,"new",()=>new Wa);let qi=Wa;const za=class za extends ee{constructor(){super({name:"Money",description:"Applies child components when the target's balance matches the settings (requires Vault and an economy plugin). Always is false for non-player targets",data:[new w("Type","type",["Min","Max","Between"],"Min").setTooltip("The type of comparison to make"),new f("Min Value","min-value",10).requireValue("type",["Min","Between"]).setTooltip("The minimum balance the target must have, inclusive"),new f("Max Value","max-value",100).requireValue("type",["Max","Between"]).setTooltip("The maximum balance the target can have, inclusive")],summaryItems:["type","min-value","max-value"]})}};u(za,"new",()=>new za);let Ei=za;const Ua=class Ua extends ee{constructor(){super({name:"Mounted",description:"Applies child elements if the target is being mounted by one of the selected entity types",data:[new w("Types","types",zu,["Any"],!0).setTooltip("The entity types that can be mounting the target")],summaryItems:["types"]})}};u(Ua,"new",()=>new Ua);let xi=Ua;const Ga=class Ga extends ee{constructor(){super({name:"Mounting",description:"Applies child elements if the target is mounting one of the selected entity types",data:[new w("Types","types",zu,["Any"],!0).setTooltip("The entity types the target can be mounting")],summaryItems:["types"]})}};u(Ga,"new",()=>new Ga);let Ci=Ga;const Ya=class Ya extends ee{constructor(){super({name:"MythicMob Type",description:"Applies child elements if the target corresponds to one of the entered MythicMob types, or is not a MythicMob if left empty",data:[new Le("MythicMob Types","types").setTooltip("The MythicMob types to target")],summaryItems:["types"]})}};u(Ya,"new",()=>new Ya);let Pi=Ya;const ja=class ja extends ee{constructor(){super({name:"Name",description:"Applies child components when the target has a name matching the settings",data:[new T("Contains Text","contains",!0).setTooltip("Whether the target should have a name containing the text"),new T("Regex","regex",!1).setTooltip("Whether the text is formatted as regex. If you do not know what regex is, ignore this option"),new x("Text","text","text").setTooltip("The text to look for in the target's name")],summaryItems:["contains","text"]})}};u(ja,"new",()=>new ja);let Fi=ja;const Xa=class Xa extends ee{constructor(){super({name:"Offhand",description:"Applies child components when the target is wielding an item matching the given material as an offhand item. This is for v1.9+ servers only",data:[...ot()],summaryItems:["material","data","lore","name"]})}};u(Xa,"new",()=>new Xa);let Ri=Xa;const Za=class Za extends ee{constructor(){super({name:"Permission",description:"Applies child components if the caster has the required permission",data:[new x("Permission","perm","some.permission").setTooltip("The permission the player needs to have")],summaryItems:["perm"]})}};u(Za,"new",()=>new Za);let $i=Za;const Ka=class Ka extends ee{constructor(){super({name:"Potion",description:"Applies child components when the target has the potion effect",data:[new w("Type","type",["Active","Not Active"],"Active").setTooltip("Whether the potion should be active"),new w("Potion","potion",Wu,"Any").setTooltip("The type of potion to look for"),new f("Min Rank","min-rank").setTooltip("The minimum rank the potion effect can be"),new f("Max Rank","max-rank",999).setTooltip("The maximum rank the potion effect can be")],summaryItems:["type","potion","min-rank","max-rank"]})}};u(Ka,"new",()=>new Ka);let Oi=Ka;const Ma=class Ma extends ee{constructor(){super({name:"Skill Level",description:"Applies child components when the skill level is with the range. This checks the skill level of the caster, not the targets",data:[new Qo("Skill","skill",!1).setTooltip("The name of the skill to check the level of. If you want to check the current skill, enter the current skill's name anyway"),new L("Min Level","min-level",2).setTooltip("The minimum level of the skill needed"),new L("Max Level","max-level",99).setTooltip("The maximum level of the skill needed")],summaryItems:["skill","min-level","max-level"]})}};u(Ma,"new",()=>new Ma);let Li=Ma;const Ja=class Ja extends ee{constructor(){super({name:"Slot",description:"Applies child components when the target player has a matching item in the given slot",data:[new Le("Slots (one per line)","slot",["9"]).setTooltip("The slots to look at. Slots 0-8 are the hot bar, 9-35 are the main inventory, 36-39 are armor, and 40 is the offhand slot. Multiple slots will check if any of the slots match"),...ot()],summaryItems:["slot","material","data","lore","name"]})}};u(Ja,"new",()=>new Ja);let Ni=Ja;const Qa=class Qa extends ee{constructor(){super({name:"Status",description:"Applies child components when the target has the status condition",data:[new w("Type","type",["Active","Not Active"]).setTooltip("Whether the status should be active"),new w("Status","status",["Any","Absorb","Curse","Disarm","Invincible","Invulnerable","Root","Silence","Stun"]).setTooltip("The status to look for")],summaryItems:["type","status"]})}};u(Qa,"new",()=>new Qa);let Hi=Qa;const es=class es extends ee{constructor(){super({name:"Time",description:"Applies child components when the server time matches the settings",data:[new w("Time","time",["Day","Night"],"Day").setTooltip("The time to check for in the current world")],summaryItems:["time"]})}};u(es,"new",()=>new es);let Bi=es;const ts=class ts extends ee{constructor(){super({name:"Tool",description:"Applies child components when the target is wielding a matching tool",data:[new w("Material","material",["Any","Wood","Stone","Iron","Gold","Diamond","Netherite"]).setTooltip("The material the held tool needs to be made out of"),new w("Tool","tool",["Any","Axe","Hoe","Pickaxe","Shovel","Sword"]).setTooltip("The type of tool it needs to be")],summaryItems:["material","tool"]})}};u(ts,"new",()=>new ts);let Wi=ts;const as=class as extends ee{constructor(){super({name:"Value",description:"Applies child components if a stored value is within the given range",data:[new x("Key","key","value").setTooltip("The unique string used for the value set by the Value mechanics"),new f("Min Value","min-value",1).setTooltip("The lower bound of the required value"),new f("Max Value","max-value",999).setTooltip("The upper bound of the required value")],summaryItems:["key","min-value","max-value"]})}};u(as,"new",()=>new as);let zi=as;const ss=class ss extends ee{constructor(){super({name:"Value Text",description:"Applies child components if text value match to the settings",data:[new w("Mode","mode",["REGEX","EXACTLY","CONTAIN","START","END"],"EXACTLY").setTooltip("The comparison mode should be conditioned."),new x("Key","value","").setTooltip("Key of the value to be compared."),new x("Expect","expect","").setTooltip("Strings used for comparison.")]})}};u(ss,"new",()=>new ss);let Ui=ss;const os=class os extends ee{constructor(){super({name:"Water",description:"Applies child components when the target is in or out of water, depending on the settings",data:[new w("State","state",["In Water","Out Of Water"]).setTooltip("Whether the target needs to be in the water")],summaryItems:["state"]})}};u(os,"new",()=>new os);let Gi=os;const rs=class rs extends ee{constructor(){super({name:"Weather",description:"Applies child components when the target's location has the given weather condition",data:[new w("Type","type",["Rain","None","Snow","Thunder"]).setTooltip("Whether the target needs to be in the water")],summaryItems:["type"]})}};u(rs,"new",()=>new rs);let Yi=rs;const is=class is extends ee{constructor(){super({name:"World",description:"Applies child components when the target is in a specific world",data:[new T("Blacklist","blacklist",!1).setTooltip("Whether the list should be seen as a blacklist"),new Le("Worlds","worlds").setTooltip("Which worlds should be taken into consideration")],summaryItems:["blacklist","worlds"]})}};u(is,"new",()=>new is);let ji=is;const ns=class ns extends ee{constructor(){super({name:"Yaw",description:"Applies child components when the target is facing the correct direction. This is on a scale of 0-360 degrees. 0 is south, 90 is west, 180 is north, and 270 is east",data:[new D("Min Yaw","min-yaw",0).setTooltip("The minimum yaw the target should be facing"),new D("Max Yaw","max-yaw",60).setTooltip("The maximum yaw the target should be facing")],summaryItems:["min-yaw","max-yaw"]})}};u(ns,"new",()=>new ns);let Xi=ns;const er=()=>[new ae("Item Options"),new ut(!1,"Arrow").setTooltip("The type of item to give to the player"),new L("Amount","amount",1).setTooltip("The quantity of the item to give to the player"),new L("Durability","data").requireValue("material",Ql()).setTooltip("The durability to reduce from the item"),new T("Unbreakable","unbreakable",!1).requireValue("material",Ql()).setTooltip("Whether to make the item unbreakable"),new L("CustomModelData","byte",0).setTooltip("The CustomModelData of the item"),new w("Hide Flags","hide-flags",["Enchants","Attributes","Unbreakable","Destroys","Placed on","Potion effects","Dye"],[],!0).setTooltip("Flags to hide from the item"),new T("Custom Name/Lore","custom",!1).setTooltip("Whether to apply a custom name/lore to the item"),new x("Name","name","Name").requireValue("custom",[!0]).setTooltip("The name of the item"),new Le("Lore","lore").requireValue("custom",[!0]).setTooltip("The lore text for the item (the text below the name)"),new le("Potion Color","potion_color","#385dc6").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion color in hex RGB"),new w("Potion Type","potion_type",Uu,"Speed").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The type of potion"),new L("Potion Level","potion_level").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion level"),new L("Potion Duration","potion_duration",30).requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion duration (seconds)"),new le("Armor Color","armor_color","#a06540").requireValue("material",["Leather helmet","Leather chestplate","Leather leggings","Leather boots"]).setTooltip("The armor color in hex RGB"),new Nl().setTooltip("The enchantment to apply to the item")],rt=()=>[new T("Preserve Velocity","preserve").setTooltip("Whether to preserve the target's velocity post-warp"),new T("Set Yaw","setYaw",!1).setTooltip("Whether to set the target's yaw on teleport"),new T("Relative","relative-yaw",!1).requireValue("setYaw",[!0]).setTooltip("Whether to set the yaw relative to the target's current yaw"),new f("Yaw","yaw",0).requireValue("setYaw",[!0]).setTooltip("The Yaw of the desired position (left/right orientation)"),new T("Set Pitch","setPitch",!1).setTooltip("Whether to set the target's pitch on teleport"),new T("Relative","relative-pitch",!1).requireValue("setPitch",[!0]).setTooltip("Whether to set the pitch relative to the target's current pitch"),new f("Pitch","pitch",0).requireValue("setPitch",[!0]).setTooltip("The Pitch of the desired position (up/down orientation)")],pt=()=>[new ae("Particle Options"),new w("Particle","particle",Oe,"Villager happy").setTooltip("The type of particle to display"),new w("Material","material",()=>[..._e()],"Arrow").requireValue("particle",["Item crack"]).setTooltip("The material to use for the particles"),new w("Material","material",()=>[...Ae()],"Dirt").requireValue("particle",["Block crack","Block dust","Falling dust","Block marker"]).setTooltip("The block to use for the particles"),new L("Durability","durability",0).requireValue("particle",["Item crack"]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","type",0).requireValue("particle",["Item crack"]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","dust-color","#FF0000").requireValue("particle",["Redstone","Dust color transition"]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","final-dust-color","#FF0000").requireValue("particle",["Dust color transition"]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","dust-size",1).requireValue("particle",["Redstone","Dust color transition"]).setTooltip("The size of the dust particles"),new w("Arrangement","arrangement",["Sphere","Circle","Hemisphere"],"Sphere").setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","direction",["XY","XZ","YZ"],"XZ").requireValue("arrangement",["Circle"]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","radius",1).setTooltip("The radius of the arrangement in blocks"),new f("Points","particles",20).setTooltip("The amount of points that conform the chosen arrangement"),new L("Effect Data","data").requireValue("particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new L("Visible Radius","visible-radius",25).setTooltip("How far away players can see the particles from in blocks"),new D("DX","dx").setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","dy").setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","dz").setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","amount",1).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","speed",.1).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],tr=()=>[new ae("Projectile Options"),new f("Velocity","velocity",3).setTooltip("How fast the projectile is launched, in meters per second. A negative value fires it in the opposite direction."),new f("Lifespan","lifespan",5).setTooltip("How long in secods before the projectile will expire in case it doesn't hit anything."),new T("On Expire","on-expire",!1).setTooltip("Whether to add the projectile's expire location as one of the targets. You can filter out this target with EntityTypeContidion: Location"),new w("Spread","spread",["Cone","Horizontal Cone","Rain"],"Cone").setTooltip('The orientation for firing projectiles. Cone will fire arrows in a cone centered on your reticle. Horizontal cone does the same as cone, just locked to the XZ axis (parallel to the ground). Rain drops the projectiles from above the target. For firing one arrow straight, use "Cone"'),new f("Amount","amount",1).setTooltip("The number of projectiles to fire"),new f("Angle","angle",30).requireValue("spread",["Cone","Horizontal Cone"]).setTooltip("The angle in degrees of the cone arc to spread projectiles over. If you are only firing one projectile, this does not matter."),new f("Height","height",8).requireValue("spread",["Rain"]).setTooltip("The distance in blocks over the target to rain the projectiles from"),new f("Radius","rain-radius",2).requireValue("spread",["Rain"]).setTooltip("The radius of the rain emission area in blocks"),new ae("Offset"),new f("Forward Offset","forward").setTooltip("How far forward in front of the target the projectile should fire from in blocks. A negative value will put it behind."),new f("Upward Offset","upward").setTooltip("How far above the target the projectile should fire from in blocks. A negative value will put it below."),new f("Right Offset","right").setTooltip("How far to the right of the target the projectile should fire from. A negative value will put it to the left.")],ar=()=>[new ae("Homing"),new T("Homing","homing",!1).setTooltip("Whether to make this a homing projectile"),new w("Target","target",["Nearest","Remember Target"],"Nearest").setTooltip('What target to home into. "Nearest" will track the nearest valid target each tick. "Remember Target" tracks a target saved through a Remember Targets Mechanic.').requireValue("homing",[!0]),new f("Homing distance","homing-distance",10).setTooltip("Maximum distance at which the projectile can target an entity, in meters.").requireValue("homing",[!0]).requireValue("target",["Nearest"]),new x("Remember key","remember-key","target").requireValue("homing",[!0]).requireValue("target",["Remember Target"]),new f("Correction","correction",.5).setTooltip("Maximum corrective acceleration of the projectile, in meters per squared tick. Higher values mean the projectile can make more tight turns.").requireValue("homing",[!0]),new T("Through Wall","wall",!1).setTooltip("Whether to allow targets to be on the other side of a wall").requireValue("homing",[!0])],Fp=s=>(s.requireValue("use-effect",[!0]),s),Rp=s=>s,ht=s=>{let e=Rp;return s&&(e=Fp),[new ae("Particle Effect Options"),new T("Use Effect","use-effect").setTooltip("Whether to use a particle effect."),e(new x("Effect Key","effect-key","default").setTooltip("The key to refer to the effect by. Only one effect of each key can be active at a time.")),e(new f("Duration","duration",1).setTooltip("The time to play the effect for in seconds")),e(new x("Shape","-shape","hexagon").setTooltip('Key of a formula for deciding where particles are played each iteration. View "effects.yml" for a list of defined formulas and their keys.')),e(new w("Shape Direction","-shape-dir",["XY","YZ","XZ"],"XY").setTooltip("The plane the shape formula applies to. XZ would be flat, the other two are vertical.")),e(new x("Shape Size","-shape-size","1").setTooltip("Formula for deciding the size of the shape. This can be any sort of formula using the operations defined in the wiki.")),e(new x("Animation","-animation","one-circle").setTooltip('Key of a formula for deciding where the particle effect moves relative to the target. View "effects.yml" for a list of defined formulas and their keys.')),e(new w("Animation Direction","-anim-dir",["XY","YZ","XZ"],"XZ").setTooltip("The plane the animation motion moves through. XZ would be flat, the other two are vertical.")),e(new x("Animation Size","-anim-size","1").setTooltip("Formula for deciding the multiplier of the animation distance. This can be any sort of formula using the operations defined in the wiki.")),e(new L("Interval","-interval",1).setTooltip("Number of ticks between playing particles.")),e(new L("View Range","-view-range",25).setTooltip("How far away the effect can be seen from.")),e(new w("Particle","-particle-type",Oe,"Villager happy").setTooltip("The type of particle to use.")),e(new w("Material","-particle-material",_e,"Dirt").requireValue("-particle-type",["Item crack"]).setTooltip("The material to use for the particle.")),e(new w("Material","-particle-material",Ae,"Dirt").requireValue("-particle-type",["Block crack","Block dust","Falling dust","Block marker"]).setTooltip("The block to use for the particle.")),e(new L("Durability","-particle-durability").requireValue("particle",["Item crack"]).setTooltip("The durability to be reduced from the item used to make the particles")),e(new L("CustomModelData","-particle-data").requireValue("-particle-type",["Item crack"]).setTooltip("The data value for the material used by the particle. For 1.14+ determines the CustomModelData of the item.")),new le("Dust Color","-particle-dust-color","#FF0000").requireValue("-particle-type",["Redstone","Dust color transition"]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","-particle-final-dust-color","#FF0000").requireValue("-particle-type",["Dust color transition"]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","-particle-dust-size",1).requireValue("-particle-type",["Redstone","Dust color transition"]).setTooltip("The size of the dust particles"),e(new L("Amount","-particle-amount",1).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color.')),e(new D("DX","-particle-dx").setTooltip("Offset in the X direction, used as the Red value for some particles.")),e(new D("DY","-particle-dy").setTooltip("Offset in the Y direction, used as the Green value for some particles.")),e(new D("DZ","-particle-dz").setTooltip("Offset in the Z direction, used as the Blue value for some particles.")),e(new D("Speed","-particle-speed",.1).setTooltip("Speed of the particle. For some particles controls other parameters, such as size.")),e(new D("Initial Rotation","-initial-rotation").setTooltip("The amount to rotate the effect (useful for effects like the square).")),e(new T("Rotate w/ Player","-with-rotation",!0).setTooltip("Whether to follow the rotation of the player for the effect."))]},ls=class ls extends q{constructor(){super({name:"Armor",description:"Sets the specified armor slot of the target to the item defined by the settings",data:[new w("Slot","slot",["Hand","Off Hand","Feet","Legs","Chest","Head"]).setTooltip("The slot number to set the item to"),new T("Overwrite","overwrite",!1).setTooltip("USE WITH CAUTION. Whether to overwrite an existing item in the slot. If true, will permanently delete the existing iem"),...er()],summaryItems:["slot","material","data","lore","name"]})}};u(ls,"new",()=>new ls);let Zi=ls;const us=class us extends q{constructor(){super({name:"Armor Stand",description:"Summons an armor stand that can be used as a marker or for item display (check Armor Mechanic for latter). Applies child components on the armor stand",data:[new x("Armor Stand Key","key","default").setTooltip("The key to refer to the armor stand by. Only one armor stand of each key can be active per target at a time"),new f("Duration","duration",5).setTooltip("How long the armor stand lasts before being deleted"),new x("Name","name","Armor Stand").setTooltip("The name the armor stand displays"),new T("Name visible","name-visible",!1).setTooltip("Whether the armor stand's name should be visible from afar"),new T("Follow target","follow",!1).setTooltip("Whether the armor stand should follow the target"),new T("Marker","marker",!1).setTooltip("Setting this to true will remove the armor stand's hit-box but will also disable gravity"),new T("Apply gravity","gravity",!0).setTooltip("Whether the armor stand should be affected by gravity").requireValue("marker",[!1]),new T("Small","tiny",!1).setTooltip("Whether the armor stand should be small"),new T("Show arms","arms",!1).setTooltip("Whether the armor stand should display its arms"),new T("Show base plate","base",!1).setTooltip("Whether the armor stand should display its base plate"),new T("Visible","visible",!0).setTooltip("Whether the armor stand should be visible"),new ae("Offset"),new f("Forward Offset","forward").setTooltip("How far forward in front of the target the armor stand should be in blocks. A negative value will put it behind"),new f("Upward Offset","upward").setTooltip("How far above the target the armor stand should be in blocks. A negative value will put it below"),new f("Right Offset","right").setTooltip("How far to the right the armor stand should be of the target. A negative value will put it to the left")],summaryItems:["duration","name","follow","gravity","visible"]},!0)}};u(us,"new",()=>new us);let Ki=us;const cs=class cs extends q{constructor(){super({name:"Armor Stand Pose",description:"Sets the pose of an armor stand target. Values should be in the format x,y,z where rotations are in degrees. Example: 0.0,0.0,0.0",data:[new x("Head","head","").setTooltip("The pose values of the head. Leave empty if should be ignored"),new x("Body","body","").setTooltip("The pose values of the body. Leave empty if should be ignored"),new x("Left Arm","left-arm","").setTooltip("The pose values of the left arm. Leave empty if should be ignored"),new x("Right Arm","right-arm","").setTooltip("The pose values of the right arm. Leave empty if should be ignored"),new x("Left Leg","left-leg","").setTooltip("The pose values of the left leg. Leave empty if should be ignored"),new x("Right Leg","right-leg","").setTooltip("The pose values of the right leg. Leave empty if should be ignored")]})}};u(cs,"new",()=>new cs);let Mi=cs;const ps=class ps extends q{constructor(){super({name:"Armor Stand Remove",description:"Removes an armor stand with the given key",data:[new x("Armor Stand Key","key","default").setTooltip("The key to refer to the armor stand by. Only one armor stand of each key can be active per target at a time")],summaryItems:["key"]})}};u(ps,"new",()=>new ps);let Ji=ps;const hs=class hs extends q{constructor(){super({name:"Attribute",description:"Gives a player bonus attributes temporarily",data:[new x("Attribute","key","Intelligence").setTooltip("The name of the attribute to add to"),new w("Operation","operation",["ADD_NUMBER","MULTIPLY_PERCENTAGE"],"ADD_NUMBER").setTooltip("The operation on the original value by amount, ADD_NUMBER: Scalar adding, MULTIPLY_PERCENTAGE: Multiply the value by amount"),new f("Amount","amount",5,2).setTooltip("The amount to use with the operation"),new f("Seconds","seconds",3).setTooltip("How long in seconds to give the attributes to the player"),new T("Stackable","stackable",!1).setTooltip("Whether applying multiple times stacks the effects")],summaryItems:["key","operation","amount","seconds"]})}};u(hs,"new",()=>new hs);let Qi=hs;const ds=class ds extends q{constructor(){super({name:"Block",description:"Changes blocks to the given type of block for a limited duration",data:[new w("Shape","shape",["Sphere","Cuboid"],"Sphere").setTooltip("The shape of the region to change the blocks for"),new w("Type","type",()=>["Air","Any","Solid",...Ae()],"Solid").setTooltip("The type of blocks to replace. Air or any would be for making obstacles while solid would change the environment"),new w("Block","block",Ae,"Ice").setTooltip("The type of block to turn the region into"),new L("Block Data","data").setTooltip("The block data to apply, mostly applicable for things like signs, woods, steps, or the similar"),new T("Reset Yaw","reset-yaw",!1).setTooltip("Whether the target's yaw should be reset, effectively making the offsets cardinally aligned"),new f("Seconds","seconds",5).setTooltip("How long the blocks should be replaced for"),new f("Radius","radius",3).requireValue("shape",["Sphere"]).setTooltip("The radius of the sphere region in blocks"),new f("Width (X)","width",5).requireValue("shape",["Cuboid"]).setTooltip("The width of the cuboid in blocks"),new f("Height (Y)","height",5).requireValue("shape",["Cuboid"]).setTooltip("The height of the cuboid in blocks"),new f("Depth (Z)","depth",5).requireValue("shape",["Cuboid"]).setTooltip("The depth of the cuboid in blocks"),new ae("Offset"),new f("Forward Offset","forward").setTooltip("How far forward in front of the target the region should be in blocks. A negative value will put it behind"),new f("Upward Offset","upward").setTooltip("How far above the target the region should be in blocks. A negative value will put it below"),new f("Right Offset","right").setTooltip("How far to the right the region should be of the target. A negative value will put it to the left")],preview:[...Pe(),new T("Center only","per-target-center-only",!0).setTooltip("Whether to display particles only at the center of the affected area, or at each affected block").requireValue("per-target",[!0])],summaryItems:["shape","type","block","seconds"]})}};u(ds,"new",()=>new ds);let en=ds;const ms=class ms extends q{constructor(){super({name:"Buff",description:"Buffs combat stats of the target",data:[new T("Immediate","immediate",!1).setTooltip("Whether to apply the buff to the current damage trigger"),new w("Type","type",["DAMAGE","DEFENSE","SKILL_DAMAGE","SKILL_DEFENSE","HEALING"],"DAMAGE").requireValue("immediate",[!1]).setTooltip("What type of buff to apply. DAMAGE/DEFENSE is for regular attacks, SKILL_DAMAGE/SKILL_DEFENSE are for damage from abilities, and HEALING is for healing from abilities"),new w("Modifier","modifier",["Flat","Multiplier"],"Flat").setTooltip("The sort of scaling for the buff. Flat will increase/reduce incoming damage by a fixed amount where Multiplier does it by a percentage of the damage. Multipliers above 1 will increase damage taken while multipliers below 1 reduce damage taken"),new x("Category","category","").requireValue("type",["SKILL_DAMAGE","SKILL_DEFENSE"]).setTooltip("What kind of skill damage to affect. If left empty, this will affect all skill damage"),new f("Value","value",1).setTooltip("The amount to increase/decrease incoming damage by"),new f("Seconds","seconds",3).requireValue("immediate",[!1]).setTooltip("The duration of the buff in seconds")],summaryItems:["type","modifier","value","seconds"]})}};u(ms,"new",()=>new ms);let tn=ms;const fs=class fs extends q{constructor(){super({name:"Cancel",description:"Cancels the event that caused the trigger this is under to go off. For example, damage based triggers will stop the damage that was dealt while the Launch trigger would stop the projectile from firing"})}};u(fs,"new",()=>new fs);let an=fs;const ws=class ws extends q{constructor(){super({name:"Cancel Effect",description:"Stops a particle effect prematurely",data:[new x("Effect Key","effect-key","default").setTooltip("The key used when setting up the effect")],summaryItems:["effect-key"]},!1)}};u(ws,"new",()=>new ws);let sn=ws;const gs=class gs extends q{constructor(){super({name:"Channel",description:"Applies child effects after a duration which can be interrupted. During the channel, the player cannot move, attack, or use other spells",data:[new T("Still","still",!0).setTooltip("Whether to hold the player in place while channeling"),new f("Time","time",3).setTooltip("The amouont of time, in seconds, to channel for")],summaryItems:["still","time"]},!0)}};u(gs,"new",()=>new gs);let on=gs;const ys=class ys extends q{constructor(){super({name:"Cleanse",description:"Cleanses negative potion or status effects from the targets",data:[new w("Potion","potion",Ac,void 0,!0).setTooltip("The type of potion effect to remove from the target"),new w("Status","status",["All","Curse","Disarm","Root","Silence","Stun"],void 0,!0).setTooltip("The status to remove from the target")],summaryItems:["potion","status"]},!1)}};u(ys,"new",()=>new ys);let rn=ys;const Ts=class Ts extends q{constructor(){super({name:"Command",description:"Executes a command for each of the targets",data:[new x("Command","command","").setTooltip(`The command to execute. {player} = caster's name, {target} = target's name, {targetUUID} = target's UUID (useful if targets are non players), &lc: "{", &rc: "}", &sq: "'"`),new w("Execute Type","type",["Console","OP"],"OP").setTooltip("Console: executes the command from the console. OP: Only if the target is a player, will have them execute it while given a temporary OP permission (If server closes in the meantime, the permission might stay, not recommended!!)")],summaryItems:["command","type"]},!1)}};u(Ts,"new",()=>new Ts);let nn=Ts;const vs=class vs extends q{constructor(){super({name:"Cooldown",description:"Lowers the cooldowns of the target's skill(s). If you provide a negative amount, it will increase the cooldown",data:[new x('Skill (or "all")',"skill","all").setTooltip("The skill to modify the cooldown for"),new w("Type","type",["Seconds","Percent"],"Seconds").setTooltip("The modification unit to use. Seconds will add/subtract seconds from the cooldown while Percent will add/subtract a percentage of its full cooldown"),new f("Value","value",-1).setTooltip("The amount to add/subtract from the skill's cooldown")],summaryItems:["skill","type","value"]},!1)}};u(vs,"new",()=>new vs);let ln=vs;const bs=class bs extends q{constructor(){super({name:"Damage",description:"Inflicts skill damage to each target. Multiplier type would be a percentage of the target health",data:[new w("Type","type",["Damage","Multiplier","Percent Left","Percent Missing"],"Damage").setTooltip("The unit to use for the amount of damage. Damage will deal flat damage, Multiplier will deal a percentage of the target's max health, Percent Left will deal a percentage of their current health, and Percent Missing will deal a percentage of the difference between their max health and current health"),new f("Value","value",3,1).setTooltip("The amount of damage to deal"),new T("True Damage","true").setTooltip("Whether to deal true damage. True damage ignores armor and all plugin checks, and doesn not have a damage animation nor knockback"),new x("Damage Type","classifier","default").setTooltip('The type of damage to deal. Can act as elemental damage or fake physical damage. Supports Damage types from ProRPGItems like "PRORPGITEMS_magical"'),new T("Apply Knockback","knockback",!0).setTooltip("Whether the damage will inflict knockback. Ignored if it is True Damage"),new w("Damage Cause","cause",["Contact","Custom","Entity Attack","Entity Sweep Attack","Projectile","Suffocation","Fall","Fire","Fire Tick","Melting","Lava","Drowning","Block Explosion","Entity Explosion","Void","Lightning","Suicide","Starvation","Poison","Magic","Wither","Falling Block","Thorns","Dragon Breath","Fly Into Wall","Hot Floor","Cramming","Dryout","Freeze","Sonic Boom"],"Custom").setTooltip("Damage Cause considered by the server. This will have influence over the death message and ProRPGItems' defenses").requireValue("true",[!1])],summaryItems:["value","true","knockback"]},!1)}};u(bs,"new",()=>new bs);let un=bs;const ks=class ks extends q{constructor(){super({name:"Damage Buff",description:"Modifies the physical damage dealt by each target by a multiplier or a flat amount for a limited duration. Negative flat amounts or multipliers less than one will reduce damage dealt while the opposite will increase damage dealt. (e.g. a 5% damage buff would be a multiplier or 1.05)",data:[new w("Type","type",["Flat","Multiplier"],"Flat").setTooltip("The type of buff to apply. Flat increases damage by a fixed amount while multiplier increases it by a percentage"),new T("Skill Damage","skill").setTooltip("Whether to buff skill damage. If false, it will affect physical damage"),new f("Value","value",1).setTooltip('The amount to increase/decrease the damage by. A negative amoutn with the "Flat" type will decrease damage, similar to a number less than 1 for the multiplier'),new f("Seconds","seconds",3).setTooltip("The duration of the buff in seconds")],summaryItems:["type","skill","value","seconds"]},!1)}};u(ks,"new",()=>new ks);let cn=ks;const Ds=class Ds extends q{constructor(){super({name:"Damage Lore",description:"Damages each target based on a value found in the lore of the item held by the caster",data:[new w("Hand","hand",["Main","Offhand"],"Main").setTooltip("The hand to check for the item. Offhand items are MC 1.9+ only"),new x("Regex","regex","Damage: {value}").setTooltip("The regex for the text to look for. Use {value} for where the important number should be. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new f("Multiplier","multiplier",1).setTooltip("The multiplier to use on the value to get the actual damage to deal"),new T("True Damage","true").setTooltip("Whether to deal true damage. True damage ignores armor and all plugin checks"),new x("Classifier","classifier","default").setTooltip("The type of damage to deal. Can act as elemental damage or fake physical damage"),new T("Apply Knockback","knockback",!0).setTooltip("Whether the damage will inflict knockback. Ignored if it is True Damage"),new w("Damage Cause","cause",["Contact","Entity Attack","Entity Sweep Attack","Projectile","Suffocation","Fall","Fire","Fire Tick","Melting","Lava","Drowning","Block Explosion","Entity Explosion","Void","Lightning","Suicide","Starvation","Poison","Magic","Wither","Falling Block","Thorns","Dragon Breath","Custom","Fly Into Wall","Hot Floor","Cramming","Dryout","Freeze","Sonic Boom"],"Entity Attack").setTooltip("Damage Cause considered by the server. This will have influence over the death message and ProRPGItems' defenses").requireValue("true",[!1])],summaryItems:["hand","multiplier","true","knockback"]},!1)}};u(Ds,"new",()=>new Ds);let pn=Ds;const Is=class Is extends q{constructor(){super({name:"Defense Buff",description:"Modifies the physical damage taken by each target by a multiplier or a flat amount for a limited duration. Negative flag amounts or multipliers less than one will reduce damage taken while the opposite will increase damage taken. (e.g. a 5% defense buff would be a multiplier or 0.95, since you would be taking 95% damage)",data:[new w("Type","type",["Flat","Multiplier"],"Flat").setTooltip("The type of buff to apply. Flat will increase/reduce incoming damage by a fixed amount where Multiplier does it by a percentage of the damage. Multipliers above 1 will increase damage taken while multipliers below 1 reduce damage taken"),new T("Skill Defense","skill").setTooltip("Whether to buff skill defense. If false, it will affect physical defense"),new f("Value","value",1).setTooltip("The amount to increase/decrease incoming damage by"),new f("Seconds","seconds",3).setTooltip("The duration of the buff in seconds")],summaryItems:["type","skill","value","seconds"]},!1)}};u(Is,"new",()=>new Is);let hn=Is;const Ss=class Ss extends q{constructor(){super({name:"Delay",description:"Applies child components after a delay",data:[new f("Delay","delay",2).setTooltip("The amount of time to wait before applying child components in seconds")],summaryItems:["delay"]},!0)}};u(Ss,"new",()=>new Ss);let dn=Ss;const Vs=class Vs extends q{constructor(){super({name:"Disguise",description:"Disguises each target according to the settings. This mechanic requires the LibsDisguise plugin to be installed on your server",data:[new f("Duration","duration",-1).setTooltip("How long to apply the disguise for in seconds. Use a negative number to permanently disguise the targets"),new w("Type","type",["Mob","Player","Misc"],"Mob").setTooltip("The type of disguise to use, as defined by the LibsDisguise plugin"),new w("Mob","mob",_c,"Zombie").requireValue("type",["Mob"]).setTooltip("The type of mob to disguise the target as"),new T("Adult","adult",!0).requireValue("type",["Mob"]).setTooltip("Whether to use the adult variant of the mob"),new x("Player","player","Eniripsa96").requireValue("type",["Player"]).setTooltip("The player to disguise the target as"),new w("Misc","misc",qc,"Painting").requireValue("type",["Misc"]).setTooltip("The object to disguise the target as"),new L("Data","data",0).requireValue("misc",["Area effect cloud","Armor stand","Arrow","Boat","Dragon fireball","Egg","Ender crystal","Ender pearl","Ender signal","Experience orb","Fireball","Firework","Fishing hook","Item frame","Leash hitch","Minecart","Minecart chest","Minecart command","Minecart furnace","Minecart hopper","Minecart mob spawner","Minecart tnt","Painting","Primed tnt","Shulker bullet","Snowball","Spectral arrow","Splash potion","Thrown exp bottle","Wither skull"]).setTooltip("Data value to use for the disguise type. What it does depends on the disguise"),new w("Material","mat",()=>[..._e()],"Arrow").requireValue("misc",["Dropped item"]).setTooltip("Material to use for the disguise type."),new w("Material","mat",()=>[...Ae()],"Anvil").requireValue("misc",["Falling block"]).setTooltip("Block to use for the disguise type.")],summaryItems:["duration","type","mob","player","misc"]},!1)}};u(Vs,"new",()=>new Vs);let mn=Vs;const As=class As extends q{constructor(){super({name:"Durability",description:"Lowers the durability of a held item",data:[new f("Amount","amount",1).setTooltip("Amount to reduce the item's durability by"),new T("Offhand","offhand").setTooltip("Whether to apply to the offhand slot")],summaryItems:["amount","offhand"]},!1)}};u(As,"new",()=>new As);let fn=As;const _s=class _s extends q{constructor(){super({name:"Experience",description:"Modifies target's specified class experience",data:[new L("Value","value",1),new w("Mode","mode",["give","take","set"],"give",!1).setTooltip("To give, take or set specified valued"),new w("Type","type",["flat","percent"],"flat",!1).setTooltip("Flat value or percent from next level experience"),new x("Group","group","class").setTooltip("Group name to modify experience"),new T("Level Down","level-down",!1).setTooltip("Whether to use skill and level down player class if current exp is insufficient")],summaryItems:["value","mode","type","group"]},!1)}};u(_s,"new",()=>new _s);let wn=_s;const qs=class qs extends q{constructor(){super({name:"Explosion",description:"Causes an explosion at the current target's position",data:[new f("Power","power",3).setTooltip("The strength of the explosion"),new T("Damage Blocks","damage").setTooltip("Whether to damage blocks with the explosion"),new T("Fire","fire").setTooltip("Whether to set affected blocks on fire")],summaryItems:["power","damage","fire"]},!1)}};u(qs,"new",()=>new qs);let gn=qs;const Es=class Es extends q{constructor(){super({name:"Fire",description:"Sets the target on fire for a duration",data:[new f("Damage","damage",1).setTooltip("The damage dealt by each fire tick"),new f("Seconds","seconds",3,1).setTooltip("The duration of the fire in seconds")],summaryItems:["damage","seconds"]},!1)}};u(Es,"new",()=>new Es);let yn=Es;const xs=class xs extends q{constructor(){super({name:"Flag",description:"Marks the target with a flag for a duration. Flags can be checked by other triggers, spells or the related for interesting synergies and effects",data:[new x("Key","key","key").setTooltip("The unique string for the flag. Use the same key when checking it in a Flag Condition"),new f("Seconds","seconds",3,1).setTooltip("The duration the flag should be set for. To set one indefinitely, use Flag Toggle")],summaryItems:["key","seconds"]})}};u(xs,"new",()=>new xs);let Tn=xs;const Cs=class Cs extends q{constructor(){super({name:"Flag Clear",description:"Clears a flag from the target",data:[new x("Key","key","key").setTooltip("The unique string for the flag. This should match that of the mechanic that set the flag to begin with")],summaryItems:["key"]})}};u(Cs,"new",()=>new Cs);let vn=Cs;const Ps=class Ps extends q{constructor(){super({name:"Flag Toggle",description:"Toggles a flag on or off for the target. This can be used to make toggle effects",data:[new x("Key","key","key").setTooltip("The unique string for the flag. Use the same key when checking it in a Flag Condition")],summaryItems:["key"]})}};u(Ps,"new",()=>new Ps);let bn=Ps;const Fs=class Fs extends q{constructor(){super({name:"Food",description:"Adds or removes to a player's hunger and saturation",data:[new f("Food","food",1,1).setTooltip("The amount of food to give. Use a negative number to lower the food meter"),new f("Saturation","saturation").setTooltip("How much saturation to give. Use a negative number to lower saturation. This is the hidden value that determines how long until food starts going down")],summaryItems:["food","saturation"]},!1)}};u(Fs,"new",()=>new Fs);let kn=Fs;const Rs=class Rs extends q{constructor(){super({name:"Forget Targets",description:'Clears targets stored by the "Remember Targets" mechanic',data:[new x("Key","key","key").setTooltip("The unique key the targets were stored under")],summaryItems:["key"]},!1)}};u(Rs,"new",()=>new Rs);let Dn=Rs;const $s=class $s extends q{constructor(){super({name:"Heal",description:"Restores health to each target",data:[new w("Type","type",["Health","Percent"],"Health").setTooltip("The unit to use for the amount of health to restore. Health restores a flat amount while Percent restores a percentage of their max health"),new f("Value","value",3,1).setTooltip("The amount of health to restore")],summaryItems:["type","value"]},!1)}};u($s,"new",()=>new $s);let In=$s;const Os=class Os extends q{constructor(){super({name:"Health Set",description:"Sets the target's health to the specified amount, ignoring resistances, damage buffs, and so on",data:[new f("Health","health",1).setTooltip("The health to set to")],summaryItems:["health"]},!1)}};u(Os,"new",()=>new Os);let Sn=Os;const Ls=class Ls extends q{constructor(){super({name:"Held Item",description:"Sets the held item slot of the target player. This will do nothing if trying to set it to a skill slot",data:[new f("Slot","slot").setTooltip("The slot to set it to")],summaryItems:["slot"]},!1)}};u(Ls,"new",()=>new Ls);let Vn=Ls;const Ns=class Ns extends q{constructor(){super({name:"Immunity",description:"Provides damage immunity from one source for a duration",data:[new w("Type","type",Ec,"Poison").setTooltip("The damage type to give an immunity for"),new f("Seconds","seconds",3).setTooltip("How long to give an immunity for"),new f("Multiplier","multiplier").setTooltip("The multiplier for the incoming damage. Use 0 if you want full immunity")],summaryItems:["type","seconds","multiplier"]})}};u(Ns,"new",()=>new Ns);let An=Ns;const Hs=class Hs extends q{constructor(){super({name:"Interrupt",description:"Interrupts any channeling being done by each target if applicable"})}};u(Hs,"new",()=>new Hs);let _n=Hs;const Bs=class Bs extends q{constructor(){super({name:"Invisibility",description:"Applies invisibility effect on target, optionally hiding equipment (Requires ProtocolLib).",data:[new L("Duration","duration",200).setTooltip("Duration in ticks"),new T("Hide Equipment","hideEquipment",!1).setTooltip("Whether to hide equipment or not. Requires ProtocolLib.")],summaryItems:["duration","hideEquipment"]})}};u(Bs,"new",()=>new Bs);let qn=Bs;const Ws=class Ws extends q{constructor(){super({name:"Item",description:"Gives each player target the item defined by the settings",data:[...er()],summaryItems:["material","amount"]})}};u(Ws,"new",()=>new Ws);let En=Ws;const zs=class zs extends q{constructor(){super({name:"Item Drop",description:"Spawns a dropped item defined by the settings at the specified location",data:[new f("Pickup Delay","pickup_delay",10).setTooltip("How many ticks must pass before the item can be picked up, in ticks"),new f("Duration","duration",6e3).setTooltip("The time after which the item will despawn if not picked up, in ticks. Caps at 6000"),...er(),new ae("Offset"),new f("Forward offset","forward").setTooltip("How far forward in blocks to teleport. A negative value teleports backwards"),new f("Upward offset","upward").setTooltip("How far upward in blocks to teleport. A negative value teleports downward"),new f("Right offset","right").setTooltip("How far to the right in blocks to teleport. A negative value teleports to the left")],summaryItems:["pickup_delay","duration","material","amount"]})}};u(zs,"new",()=>new zs);let xn=zs;const Us=class Us extends q{constructor(){super({name:"Item Projectile",description:"Launches a projectile using an item as its visual that applies child components upon landing. The target passed on will be the collided target or the location where it landed if it missed",data:[new w("Group","group",["Ally","Enemy"],"Enemy").setTooltip("The alignment of targets to hit"),new T("Wall Collisions","walls",!0).setTooltip("Wheter to account for wall collisions. If false, the item will just slide through them."),new f("Collision Radius","collision-radius",.2).setTooltip("The radius of the projectile considered when calculating collisions."),...er(),...ar(),...tr(),...ht(!0)],preview:[new L("Refresh period","period",5).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new ae("Particles at target"),new T("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),new w("Particle","per-target-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("per-target",[!0]),new w("Material","per-target-material",()=>[..._e()],"Arrow").requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The material to use for the particles"),new w("Material","per-target-material",()=>[...Ae()],"Dirt").requireValue("per-target-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("per-target",[!0]).setTooltip("The block to use for the particles"),new L("Durability","per-target-durability",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","per-target-type",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","per-target-dust-color","#FF0000").requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","per-target-final-dust-color","#FF0000").requireValue("per-target-particle",["Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","per-target-dust-size",1).requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","per-target-data").requireValue("per-target-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("per-target",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","per-target-dx").requireValue("per-target",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","per-target-dy").requireValue("per-target",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","per-target-dz").requireValue("per-target",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","per-target-amount",1).requireValue("per-target",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","per-target-speed",.1).requireValue("per-target",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size"),new w("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new T("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new f("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement"),new ae("Path Preview"),new T("Path Preview","path",!1).setTooltip("Displays particles through the paths of the projectiles"),new D("Steps per particle","path-steps",2).setTooltip("How many collision steps to run between each particle display").requireValue("path",[!0]),new w("Particle","path-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("path",[!0]),new w("Material","path-material",()=>[..._e()],"Arrow").requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The material to use for the particles"),new w("Material","path-material",()=>[...Ae()],"Dirt").requireValue("path-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("path",[!0]).setTooltip("The block to use for the particles"),new L("Durability","path-durability",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","path-type",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","path-dust-color","#FF0000").requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","path-final-dust-color","#FF0000").requireValue("path-particle",["Dust color transition"]).requireValue("path",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","path-dust-size",1).requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","path-data").requireValue("path-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("path",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","path-dx").requireValue("path",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","path-dy").requireValue("path",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","path-dz").requireValue("path",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","path-amount",1).requireValue("path",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","path-speed",.1).requireValue("path",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],summaryItems:["group","material","velocity","spread","angle","correction","homing","collision-radius"]},!0)}};u(Us,"new",()=>new Us);let Cn=Us;const Gs=class Gs extends q{constructor(){super({name:"Item Remove",description:"Removes an item from a player inventory. This does nothing to mobs",data:[new f("Amount","amount",1).setTooltip("The amount of the item needed in the player's inventory"),...ot()],summaryItems:["amount","material"]},!1)}};u(Gs,"new",()=>new Gs);let Pn=Gs;const Ys=class Ys extends q{constructor(){super({name:"Launch",description:"Launches the target relative to their forward direction. Use negative values to go in the opposite direction (e.g. negative forward makes the target go backwards)",data:[new w("Relative","relative",["Target","Caster","Between"],"Target").setTooltip('Determines what is considered "forward". Target uses the direction the target is facing, Caster uses the direction the caster is facing, and Between uses the direction from the target to the caster'),new T("Reset Y","reset-y").setTooltip("Whether to reset the Y value. False means the upward velocity is a combination of the setting and the relative vector."),new f("Forward Speed","forward").setTooltip("The speed to give the target in the direction they are facing/looking"),new f("Upward Speed","upward",2,.5).setTooltip("The speed to give the target upwards, this is added to the calculated vector if 'Use Look' is true"),new f("Right Speed","right").setTooltip("The speed to give the target to their right")],summaryItems:["relative","reset-y","forward","upward","right"]},!1)}};u(Ys,"new",()=>new Ys);let Fn=Ys;const js=class js extends q{constructor(){super({name:"Lightning",description:"Strikes lightning on or near the target, applying child components to the struck targets. Negative offsets will offset it in the opposite direction (e.g. negative forward offset puts it behind the target)",data:[new f("Damage","damage",5).setTooltip("The damage dealt by the lightning bolt"),new w("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to hit"),new T("Include Caster","caster").setTooltip("Whether the lightning strike can hit the caster"),new T("Fire","fire",!0).setTooltip("Whether the lightning should start a fire on hit"),new ae("Offset"),new f("Forward Offset","forward").setTooltip("How far in front of the target in blocks to place the lightning"),new f("Right Offset","right").setTooltip("How far to the right of the target in blocks to place the lightning")],summaryItems:["damage","group","caster","fire"]},!0)}};u(js,"new",()=>new js);let Rn=js;const Xs=class Xs extends q{constructor(){super({name:"Mana",description:"Restores or deducts mana from the target",data:[new w("Type","type",["Mana","Percent"],"Mana").setTooltip("The unit to use for the amount of mana to restore/drain. Mana does a flat amount while Percent does a percentage of their max mana"),new f("Value","value",1).setTooltip("The amount of mana to restore/drain")],summaryItems:["type","value"]},!1)}};u(Xs,"new",()=>new Xs);let $n=Xs;const Zs=class Zs extends q{constructor(){super({name:"Message",description:"Sends a message to each player target. To include numbers from Value mechanics, use the filters {<key>} where <key> is the key the value is stored under",data:[new x("Message","message","text").setTooltip(`The message to display. {player} = caster's name, {target} = target's name, {targetUUID} = target's UUID (useful if targets are non players), &lc: "{", &rc: "}", &sq: "'"`)],summaryItems:["message"]})}};u(Zs,"new",()=>new Zs);let On=Zs;const Ks=class Ks extends q{constructor(){super({name:"Mine",description:"Destroys a selection of blocks at the location of the target",data:[new w("Material","materials",()=>["Origin","Any",...Ae()],["Origin"],!0).setTooltip("The types of blocks allowed to be broken. 'Origin' refers to the material at the targeted location"),new T("Drop","drop",!0).setTooltip("Whether to create drops for the destroyed blocks"),new w("Tool","tool",()=>["Caster","Target",..._e()],"Diamond pickaxe").requireValue("drop",[!0]).setTooltip("What tool to use when breaking the blocks. This allows to take into account the fact that, for example, Diamond Ore does not drop when mined with a Stone Pickaxe, as well as to consider enchantments like Looting and Silk Touch. 'Caster' an 'Target' refers to the items in their respective main hands"),new w("Shape","shape",["Sphere","Cuboid"],"Sphere").setTooltip("The shape of the region to mine"),new f("Radius","radius",2).requireValue("shape",["Sphere"]).setTooltip("The radius of the sphere, in blocks"),new f("Width (X)","width",3).requireValue("shape",["Cuboid"]).setTooltip("The width of the cuboid, in blocks"),new f("Height (Y)","height",3).requireValue("shape",["Cuboid"]).setTooltip("The height of the cuboid, in blocks"),new f("Depth (Z)","depth",3).requireValue("shape",["Cuboid"]).setTooltip("The depth of the cuboid, in blocks"),new ae("Offset"),new f("Forward Offset","forward").setTooltip("How far forward in front of the target the region should be in blocks. A negative value will put it behind"),new f("Upward Offset","upward").setTooltip("How far above the target the region should be in blocks. A negative value will put it below"),new f("Right Offset","right").setTooltip("How far to the right the region should be of the target. A negative value will put it to the left")],preview:[...Pe(),new T("Center only","per-target-center-only",!0).setTooltip("Whether to display particles only at the center of the affected area, or at each affected block").requireValue("per-target",[!0])],summaryItems:["materials","drop","tool","shape","radius"]})}};u(Ks,"new",()=>new Ks);let Ln=Ks;const Ms=class Ms extends q{constructor(){super({name:"Money",description:"Adds or multiplies the target's balance by some amount (requires Vault and an economy plugin). Fails if the resulting balance is not within the range allowed by the economy plugin",data:[new w("Type","type",["Add","Multiply"],"Add").setTooltip("Whether the target's balance will be added or multiplied by the set amount"),new f("Amount","amount",5).setTooltip("The amount that the target's balance will be added or multiplied by. Can be negative"),new T("Allows negative","allows_negative").setTooltip("Whether the mechanic will be executed even if it will result in the target having a negative balance")],summaryItems:["type","amount"]})}};u(Ms,"new",()=>new Ms);let Nn=Ms;const Js=class Js extends q{constructor(){super({name:"Mount",description:"Mounts entities",data:[new w("Type","type",["Caster->Target","Target->Caster"],"Caster->Target").setTooltip("The direction of the mounting"),new f("Stack Size","max",5).setTooltip("The maximum amount of entities to stack")],summaryItems:["type"]})}};u(Js,"new",()=>new Js);let Hn=Js;const Qs=class Qs extends q{constructor(){super({name:"Particle",description:"Plays a particle effect about the target",data:[...pt(),new ae("Offset"),new D("Forward Offset","forward").setTooltip("How far forward in front of the target in blocks to play the particles. A negative value will go behind"),new D("Upward Offset","upward").setTooltip("How far above the target in blocks to play the particles. A negative value will go below"),new D("Right Offset","right").setTooltip("How far to the right of the target to play the particles. A negative value will go to the left")],summaryItems:["particle","amount","spread","dust-color"]})}};u(Qs,"new",()=>new Qs);let Bn=Qs;const eo=class eo extends q{constructor(){super({name:"Particle Animation",description:"Plays an animated particle effect at the location of each target over time by applying various transformations",data:[new L("Steps","steps",1).setTooltip("The number of times to play particles and apply translations each application"),new D("Frequency","frequency",.05).setTooltip("How often to apply the animation in seconds. 0.05 is the fastest (1 tick). Lower than that will act the same"),new L("Angle","angle",0).setTooltip("How far the animation should rotate over the duration in degrees"),new L("Start Angle","start",0).setTooltip("The starting orientation of the animation. Horizontal translations and the forward/right offsets will be based off of this"),new f("Duration","duration",5).setTooltip("How long the animation should last for in seconds"),new f("H-Translation","h-translation").setTooltip("How far the animation moves horizontally relative to the center over a cycle. Positive values make it expand from the center while negative values make it contract"),new f("V-Translation","v-translation").setTooltip("How far the animation moves vertically over a cycle. Positive values make it rise while negative values make it sink"),new L("H-Cycles","h-cycles",1).setTooltip("How many times to move the animation position throughout the animation. Every other cycle moves it back to where it started. For example, two cycles would move it out and then back in"),new L("V-Cycles","v-cycles",1).setTooltip("How many times to move the animation position throughout the animation. Every other cycle moves it back to where it started. For example, two cycles would move it up and then back down"),...pt(),new ae("Offset"),new D("Forward Offset","forward",0).setTooltip("How far forward in front of the target in blocks to play the particles. A negative value will go behind"),new D("Upward Offset","upward",0).setTooltip("How far above the target in blocks to play the particles. A negative value will go below"),new D("Right Offset","right",0).setTooltip("How far to the right of the target to play the particles. A negative value will go to the left"),new T("Rotate w/ Player","-with-rotation").setTooltip("Whether to follow the rotation of the player for the effect")],summaryItems:["steps","frequency","angle","duration","particle","amount","spread","dust-color"]})}};u(eo,"new",()=>new eo);let Wn=eo;const to=class to extends q{constructor(){super({name:"Particle Effect",description:"Plays a particle effect that follows the current target, using formulas to determine shape, size, and motion",data:[...ht(!1)],summaryItems:["effect-key","-particle","-particle-dust-color"]})}};u(to,"new",()=>new to);let zn=to;const ao=class ao extends q{constructor(){super({name:"Particle Image",description:"Displays an image using particles that (optionally) follows the current target",data:[new x("Effect Key","effect-key","default").setTooltip("The key to refer to the effect by. Only one effect of each key can be active at a time."),new x("Image","img","default.png").setTooltip("The image to display. Put images in the plugins/Fabled/images folder"),new f("Duration","duration",5).setTooltip("The time to play the effect for in seconds"),new L("Interval","interval",5).setTooltip("Number of ticks between playing particles."),new L("Frame Frequency","iterations-per-frame",3).setTooltip("Number of iterations before moving to the next frame of a gif. 1 is the fastest, 0 will not animate"),new L("View Range","view-range",25).setTooltip("How far away the effect can be seen from."),new w("Direction","direction",["XY","YZ","XZ"],"XY").setTooltip("The plane the shape formula applies to. Player follows the player's look direction. XZ would be flat, the other two are vertical."),new D("Width","width",3).setTooltip("The width of the image in blocks"),new D("Height","height",3).requireValue("lock-aspect",[!1]).setTooltip("The height of the image in blocks"),new T("Lock Aspect Ratio","lock-aspect",!0).setTooltip("Whether to keep the aspect ratio of the image"),new L("Resolution","resolution",6).setTooltip("Number of particles per block. 6 particles per block is typically pretty decent with a dust size of 1"),new x("Dust Size","dust-size","1").setTooltip("The formula for the size of the dust particles. <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Rotate","rotate","0").setTooltip("The formula to rotate the effect, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Tilt","tilt","0").setTooltip("The formula to tilt the effect forward, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Spin","spin","0").setTooltip("The formula to spin the effect, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Scale","scale","1").setTooltip("The formula to scale the effect, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Forward Offset","forward","0").setTooltip("The formula to offset the effect forward, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Upward Offset","upward","0").setTooltip("The formula to offset the effect upward, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new x("Right Offset","right","0").setTooltip("The formula to offset the effect to the right, <code>t</code> is the number of iterations, <code>l</code> is the skill level"),new T("Rotate w/ Player","with-rotation",!0).setTooltip("Whether to follow the rotation of the player for the effect.")],summaryItems:["effect-key","img","duration"]})}};u(ao,"new",()=>new ao);let Un=ao;const so=class so extends q{constructor(){super({name:"Particle Projectile",description:"Launches a projectile using particles as its visual that applies child components upon landing. The target passed on will be the collided target or the location where it landed if it missed",data:[new T("Pierce","pierce").setTooltip("Whether this projectile should pierce through initial targets and continue hitting those behind them"),new w("Group","group",["Ally","Enemy"],"Enemy").setTooltip("The alignment of targets to hit"),new L("Steps","steps",2).setTooltip("Amount of collision steps to run per meter travelled."),new f("Collision Radius","collision-radius",1.5).setTooltip("The radius of the projectile considered when calculating collisions."),new f("Gravity","gravity",-.04).setTooltip("Vertical acceleration the projectile is subjected to, in meters per squared tick. Negative values make it fall while positive values make it rise."),new f("Drag","drag",.02).setTooltip("Air resistance of the projectile, in inverse seconds. Greater values mean the projectile will slow down more over time, and reach a lower terminal velocity."),new L("Particle period","period",2).setTooltip("How often to play a particle effect where the projectile is."),...ar(),...tr(),...pt(),...ht(!0)],preview:[new L("Refresh period","period",5).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new ae("Particles at target"),new T("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),new w("Particle","per-target-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("per-target",[!0]),new w("Material","per-target-material",()=>[..._e()],"Arrow").requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The material to use for the particles"),new w("Material","per-target-material",()=>[...Ae()],"Dirt").requireValue("per-target-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("per-target",[!0]).setTooltip("The block to use for the particles"),new L("Durability","per-target-durability",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","per-target-type",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","per-target-dust-color","#FF0000").requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","per-target-final-dust-color","#FF0000").requireValue("per-target-particle",["Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","per-target-dust-size",1).requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","per-target-data").requireValue("per-target-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("per-target",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","per-target-dx").requireValue("per-target",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","per-target-dy").requireValue("per-target",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","per-target-dz").requireValue("per-target",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","per-target-amount",1).requireValue("per-target",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","per-target-speed",.1).requireValue("per-target",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size"),new w("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new T("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new f("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement"),new ae("Path Preview"),new T("Path Preview","path",!1).setTooltip("Displays particles through the paths of the projectiles"),new D("Steps per particle","path-steps",2).setTooltip("How many collision steps to run between each particle display").requireValue("path",[!0]),new w("Particle","path-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("path",[!0]),new w("Material","path-material",()=>[..._e()],"Arrow").requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The material to use for the particles"),new w("Material","path-material",()=>[...Ae()],"Dirt").requireValue("path-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("path",[!0]).setTooltip("The block to use for the particles"),new L("Durability","path-durability",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","path-type",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","path-dust-color","#FF0000").requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","path-final-dust-color","#FF0000").requireValue("path-particle",["Dust color transition"]).requireValue("path",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","path-dust-size",1).requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","path-data").requireValue("path-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("path",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","path-dx").requireValue("path",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","path-dy").requireValue("path",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","path-dz").requireValue("path",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","path-amount",1).requireValue("path",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","path-speed",.1).requireValue("path",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],summaryItems:["steps","gravity","drag","frequency","pierce","group","particle","amount","spread","dust-color","correction","homing"]},!0)}};u(so,"new",()=>new so);let Gn=so;const oo=class oo extends q{constructor(){super({name:"Passive",description:"Applies child components continuously every period. The seconds value below is the period or how often it applies",data:[new f("Seconds","seconds",1).setTooltip("The delay in seconds between each application")],summaryItems:["seconds"]},!0)}};u(oo,"new",()=>new oo);let Yn=oo;const ro=class ro extends q{constructor(){super({name:"Permission",description:"Grants each player target a permission for a limited duration. This mechanic requires Vault with an accompanying permissions plugin in order to work",data:[new x("Permission","perm","plugin.perm.key").setTooltip("The permission to give to the player"),new f("Seconds","seconds",3).setTooltip("How long in seconds to give the permission to the player")],summaryItems:["perm","seconds"]})}};u(ro,"new",()=>new ro);let jn=ro;const io=class io extends q{constructor(){super({name:"Potion",description:"Applies a potion effect to the target for a duration",data:[new w("Potion","potion",Uu,"Absorption").setTooltip("The type of potion effect to apply"),new T("Ambient Particles","ambient",!0).setTooltip("Whether to show ambient particles"),new f("Tier","tier",1).setTooltip("The strength of the potion"),new f("Seconds","seconds",3,1).setTooltip("How long to apply the effect for")],summaryItems:["potion","tier","seconds"]},!1)}};u(io,"new",()=>new io);let Xn=io;const no=class no extends q{constructor(){super({name:"Potion Projectile",description:"Drops a splash potion from each target that does not apply potion effects by default. This will apply child elements when the potion lands. The targets supplied will be everything hit by the potion. If nothing is hit by the potion, the target will be the location it landed",data:[new le("Color","color","#ff0000").setTooltip("The hex color code to use for the potion"),new w("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of entities to hit"),new T("Flaming","flaming",!1).setTooltip("Whether to make the launched projectiles on fire"),new T("Linger","linger",!1).setTooltip("Whether the potion should be a lingering potion (for 1.9+ only)"),new ae("Area Effect Cloud").requireValue("linger",[!0]),new f("Duration","duration",30).setTooltip("How long the resulting area effect cloud lasts, in seconds.").requireValue("linger",[!0]),new f("Wait time","wait-time",.5).setTooltip("How long an entity has to be exposed to the cloud before its effect is applied, in seconds.").requireValue("linger",[!0]),new f("Reapplication delay","reapplication-delay",1).setTooltip("For how long an entity will be immune from subsequent exposure, in seconds.").requireValue("linger",[!0]),new f("Duration on use","duration-on-use",0).setTooltip("How much the duration of the cloud will decrease by when it applies an effect to an entity, in seconds.").requireValue("linger",[!0]),new f("Radius","cloud-radius",3).setTooltip("The initial radius of the cloud, in meters.").requireValue("linger",[!0]),new f("Radius on use","radius-on-use",-.5).setTooltip("How much the radius of the cloud will decrease by when it applies an effect to an entity, in meters.").requireValue("linger",[!0]),new f("Radius per tick","radius-per-tick",-.1).setTooltip("How much the radius of the cloud will decrease by, in meters per second").requireValue("linger",[!0]),new w("Cloud Particle","cloud-particle",Oe,"Spell mob").setTooltip("The type of particle the cloud is composed of").requireValue("linger",[!0]),new w("Material","cloud-material",()=>[..._e()],"Arrow").requireValue("cloud-particle",["Item crack"]).setTooltip("The material to use for the particles"),new w("Material","cloud-material",()=>[...Ae()],"Dirt").requireValue("cloud-particle",["Block crack","Block dust","Falling dust","Block marker"]).setTooltip("The block to use for the particles"),new L("Durability","cloud-durability",0).requireValue("cloud-particle",["Item crack"]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","cloud-type",0).requireValue("cloud-particle",["Item crack"]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","cloud-dust-color","#FF0000").requireValue("cloud-particle",["Redstone","Dust color transition"]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","cloud-final-dust-color","#FF0000").requireValue("cloud-particle",["Dust color transition"]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","cloud-dust-size",1).requireValue("cloud-particle",["Redstone","Dust color transition"]).setTooltip("The size of the dust particles"),...ar(),...tr(),...pt(),...ht(!0)],preview:[new L("Refresh period","period",5).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new ae("Particles at target"),new T("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),new w("Particle","per-target-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("per-target",[!0]),new w("Material","per-target-material",()=>[..._e()],"Arrow").requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The material to use for the particles"),new w("Material","per-target-material",()=>[...Ae()],"Dirt").requireValue("per-target-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("per-target",[!0]).setTooltip("The block to use for the particles"),new L("Durability","per-target-durability",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","per-target-type",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","per-target-dust-color","#FF0000").requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","per-target-final-dust-color","#FF0000").requireValue("per-target-particle",["Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","per-target-dust-size",1).requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","per-target-data").requireValue("per-target-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("per-target",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","per-target-dx").requireValue("per-target",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","per-target-dy").requireValue("per-target",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","per-target-dz").requireValue("per-target",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","per-target-amount",1).requireValue("per-target",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","per-target-speed",.1).requireValue("per-target",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size"),new w("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new T("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new f("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement"),new ae("Path Preview"),new T("Path Preview","path",!1).setTooltip("Displays particles through the paths of the projectiles"),new D("Steps per particle","path-steps",2).setTooltip("How many collision steps to run between each particle display").requireValue("path",[!0]),new w("Particle","path-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("path",[!0]),new w("Material","path-material",()=>[..._e()],"Arrow").requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The material to use for the particles"),new w("Material","path-material",()=>[...Ae()],"Dirt").requireValue("path-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("path",[!0]).setTooltip("The block to use for the particles"),new L("Durability","path-durability",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","path-type",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","path-dust-color","#FF0000").requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","path-final-dust-color","#FF0000").requireValue("path-particle",["Dust color transition"]).requireValue("path",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","path-dust-size",1).requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","path-data").requireValue("path-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("path",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","path-dx").requireValue("path",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","path-dy").requireValue("path",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","path-dz").requireValue("path",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","path-amount",1).requireValue("path",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","path-speed",.1).requireValue("path",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],summaryItems:["group","color","linger","velocity","spread","angle","amount","correction","homing"]},!0)}};u(no,"new",()=>new no);let Zn=no;const lo=class lo extends q{constructor(){super({name:"Projectile",description:"Launches a projectile that applies child components on hit. The target supplied will be the struck target",data:[new w("Projectile","projectile",xc,"Arrow").setTooltip("The type of projectile to fire"),new T("Flaming","flaming",!1).setTooltip("Whether to make the launched projectiles on fire"),new w("Cost","cost",["None","All","One"],"None").setTooltip(`The item cost of the skill. "One" will only charge the player 1 item of it's type, whereas "All" will charge 1 for each fired projectile`),new ae("Item Override").requireValue("projectile",["Egg","Ender pearl","Snowball","Splash potion","Thrown exp bottle","Trident"]),new T("Override item","override-item",!1).setTooltip("Whether to override the item display of the projectile"),new w("Material","material",()=>[..._e()],"Snowball").requireValue("projectile",["Egg","Ender pearl","Snowball","Splash potion","Thrown exp bottle","Trident"]).requireValue("override-item",[!0]).setTooltip("The material to use for the projectile"),new T("Enchanted","enchanted",!1).requireValue("projectile",["Egg","Ender pearl","Snowball","Splash potion","Thrown exp bottle","Trident"]).requireValue("override-item",[!0]).setTooltip("Whether to apply the enchanted glint in the item"),new L("Durability","durability",0).requireValue("projectile",["Egg","Ender pearl","Snowball","Splash potion","Thrown exp bottle","Trident"]).requireValue("override-item",[!0]).setTooltip("The durability to be reduced from the item used for the projectile"),new L("CustomModelData","custom-model-data",0).requireValue("projectile",["Egg","Ender pearl","Snowball","Splash potion","Thrown exp bottle","Trident"]).requireValue("override-item",[!0]).setTooltip("The CustomModelData of the item used for the projectile"),...ar(),...tr(),...pt(),...ht(!0)],preview:[new L("Refresh period","period",5).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new ae("Particles at target"),new T("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),new w("Particle","per-target-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("per-target",[!0]),new w("Material","per-target-material",()=>[..._e()],"Arrow").requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The material to use for the particles"),new w("Material","per-target-material",()=>[...Ae()],"Dirt").requireValue("per-target-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("per-target",[!0]).setTooltip("The block to use for the particles"),new L("Durability","per-target-durability",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","per-target-type",0).requireValue("per-target-particle",["Item crack"]).requireValue("per-target",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","per-target-dust-color","#FF0000").requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","per-target-final-dust-color","#FF0000").requireValue("per-target-particle",["Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","per-target-dust-size",1).requireValue("per-target-particle",["Redstone","Dust color transition"]).requireValue("per-target",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","per-target-data").requireValue("per-target-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("per-target",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","per-target-dx").requireValue("per-target",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","per-target-dy").requireValue("per-target",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","per-target-dz").requireValue("per-target",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","per-target-amount",1).requireValue("per-target",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","per-target-speed",.1).requireValue("per-target",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size"),new w("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new w("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new f("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new T("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new f("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement"),new ae("Path Preview"),new T("Path Preview","path",!1).setTooltip("Displays particles through the paths of the projectiles"),new D("Steps per particle","path-steps",2).setTooltip("How many collision steps to run between each particle display").requireValue("path",[!0]),new w("Particle","path-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue("path",[!0]),new w("Material","path-material",()=>[..._e()],"Arrow").requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The material to use for the particles"),new w("Material","path-material",()=>[...Ae()],"Dirt").requireValue("path-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue("path",[!0]).setTooltip("The block to use for the particles"),new L("Durability","path-durability",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData","path-type",0).requireValue("path-particle",["Item crack"]).requireValue("path",[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color","path-dust-color","#FF0000").requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color","path-final-dust-color","#FF0000").requireValue("path-particle",["Dust color transition"]).requireValue("path",[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size","path-dust-size",1).requireValue("path-particle",["Redstone","Dust color transition"]).requireValue("path",[!0]).setTooltip("The size of the dust particles"),new L("Effect Data","path-data").requireValue("path-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue("path",[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX","path-dx").requireValue("path",[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY","path-dy").requireValue("path",[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ","path-dz").requireValue("path",[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount","path-amount",1).requireValue("path",[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed","path-speed",.1).requireValue("path",[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],summaryItems:["projectile","flaming","cost","particle","amount","spread","dust-color","effect-key","correction","homing"]},!0)}};u(lo,"new",()=>new lo);let Kn=lo;const uo=class uo extends q{constructor(){super({name:"Purge",description:"Purges the target of positive potion effects or statuses",data:[new w("Potion","potion",Cc,void 0,!0).setTooltip("The potion effect to remove from the target, if any"),new w("Status","status",["All","Absorb","Invincible"],["All"],!0).setTooltip("The status to remove from the target, if any")],summaryItems:["potion","status"]},!1)}};u(uo,"new",()=>new uo);let Mn=uo;const co=class co extends q{constructor(){super({name:"Push",description:"Pushes the target relative to the caster. This will do nothing if used with the caster as the target. Positive numbers apply knockback while negative numbers pull them in",data:[new w("Type","type",["Fixed","Inverse","Scaled"],"Fixed").setTooltip("How to scale the speed based on relative position. Fixed does the same speed to all targets. Inverse pushes enemies farther away faster. Scaled pushes enemies closer faster"),new f("Speed","speed",3,1).setTooltip("How fast to push the target away. Use a negative value to pull them closer"),new x("Source","source","none").setTooltip("The source to push/pull from. This should be a key used in a Remember Targets mechanic. If no targets are remembered, this will default to the caster")],summaryItems:["type","speed"]},!1)}};u(co,"new",()=>new co);let Jn=co;const po=class po extends q{constructor(){super({name:"Remember Targets",description:"Stores the current targets for later use under a specified key",data:[new x("Key","key","target").setTooltip('The unique key to store the targets under. The "Remember" target will use this key to apply effects to the targets later on')],summaryItems:["key"]},!1)}};u(po,"new",()=>new po);let Qn=po;const ho=class ho extends q{constructor(){super({name:"Repeat",description:"Applies child components multiple times. When it applies them is determined by the delay (seconds before the first application) and period (seconds between successive applications)",data:[new f("Repetitions","repetitions",3).setTooltip("How many times to activate child components"),new D("Period","period",1).setTooltip("The time in seconds between each time applying child components"),new D("Delay","delay").setTooltip("The initial delay before starting to apply child components"),new T("Stop on Fail","stop-on-fail",!1).setTooltip("Whether to stop the repeat task early if the effects fail")],summaryItems:["repetitions","period","delay","stop-on-fail"]},!0)}};u(ho,"new",()=>new ho);let el=ho;const mo=class mo extends q{constructor(){super({name:"Signal Emit",description:"Send a custom signal to all target that can be reused and processed separately.",data:[new x("Signal","signal").setTooltip("The name of signal will be emit."),new T("Self-handling","handler",!1).setTooltip(`
If true, the signal will be sent to the caster itself and the target are the current targets.
 If false, a signal is sent to each target and the target is caster`),new Le("Arguments","argument").setTooltip("Arguments used for signal processing. One value per line. The value will be stored in value api-arg[<index>]. The first value will be specially stored at api-arg")],summaryItems:["signal","handler","argument"]},!1)}};u(mo,"new",()=>new mo);let tl=mo;const fo=class fo extends q{constructor(){super({name:"Skill cast",description:"Make target cast other skill. Applicable to players only!",data:[new w("Cast mode","mode",["All","First","Random"],"All").setTooltip("Choose which skills to cast (excluding unavailable skills)."),new T("Force cast","force",!1).setTooltip("True if player will cast regardless of whether they have that skill or not"),new Le("Skills","skills").setTooltip('The list of skills.Each skill can come with the level like "example skill:3". If player has skill, level will is available level. Else, level is 1.')],summaryItems:["mode","force","skills"]},!1)}};u(fo,"new",()=>new fo);let al=fo;const wo=class wo extends q{constructor(){super({name:"Sound",description:"Plays a sound at the target's location",data:[new w("Sound","sound",()=>["Custom",...Pc()],"Ambient Cave").setTooltip("The sound clip to play. Select 'Custom' to enter custom sounds from your resource pack"),new x("Custom sound name","custom","myrp:some_sound").requireValue("sound",["Custom"]).setTooltip("Namespaced key of your custom sound"),new f("Volume","volume",100).setTooltip("The volume of the sound as a percentage. Numbers above 100 will not get any louder, but will be heard from a farther distance"),new f("Pitch","pitch",1).setTooltip("The pitch of the sound as a numeric speed multiplier between 0.5 and 2")],summaryItems:["sound","volume","pitch"]},!1)}};u(wo,"new",()=>new wo);let sl=wo;const go=class go extends q{constructor(){super({name:"Stat",description:'Gives a player bonus stat temporarily. All available <a href="https://github.com/promcteam/proskillapi/wiki/attributes#attribute-stats">attribute stats</a>',data:[new x("Stat","key","health").setTooltip("The name of the stat to add to"),new w("Operation","operation",["ADD_NUMBER","MULTIPLY_PERCENTAGE"],"ADD_NUMBER").setTooltip("The operation on the original value by amount, ADD_NUMBER: Scalar adding, MULTIPLY_PERCENTAGE: Multiply the value by amount"),new f("Amount","amount",5,2).setTooltip("The amount to use with the operation"),new f("Seconds","seconds",3).setTooltip("How long in seconds to give the stat to the player"),new T("Stackable","stackable").setTooltip("Whether applying multiple times stacks the effects")],summaryItems:["key","operation","amount","seconds"]})}};u(go,"new",()=>new go);let ol=go;const yo=class yo extends q{constructor(){super({name:"Status",description:"Applies a status effect to the target for a duration",data:[new w("Status","status",["Absorb","Curse","Disarm","Invincible","Invulnerable","Root","Silence","Stun"],"Stun").setTooltip("The status to apply"),new f("Duration","duration",3,1).setTooltip("How long in seconds to apply the status")],summaryItems:["status","duration"]})}};u(yo,"new",()=>new yo);let rl=yo;const To=class To extends q{constructor(){super({name:"Summon",description:"Summons a mob on each target. Child components will start off targeting the mob so you can add effects to it. Hostile mobs may attack the caster",data:[new w("Type","type",Ol,"Zombie"),new x("Name","name","{player}'s Minion").setTooltip("The displayed name of the wolf. Use {player} to embed the caster's name"),new f("Health","health",10).setTooltip("The starting health of the mob"),new f("Amount","amount",1).setTooltip("How many mobs to summon")],summaryItems:["type","name","amount"]},!0)}};u(To,"new",()=>new To);let il=To;const vo=class vo extends q{constructor(){super({name:"Taunt",description:"Draws aggro of targeted creatures. Regular mobs are set to attack the caster. The Spigot/Bukkit API for this was not functional on older versions, so it may not work on older servers. For MythicMobs, this uses their aggro system using the amount chosen below",data:[new f("Amount","amount",1).setTooltip("The amount of aggro to apply if MythicMobs is active. Use negative amounts to reduce aggro")],summaryItems:["amount"]},!1)}};u(vo,"new",()=>new vo);let nl=vo;const bo=class bo extends q{constructor(){super({name:"Throw",description:"Throws entities off of the target's head and targets them for child components",data:[new w("Relative","relative",["Target","Caster","Thrown"],"Caster").setTooltip('Determines what is considered "forward". Target uses the direction the target is facing, Caster uses the direction the caster is facing, Thrown uses the direction of the entity to be thrown'),new f("Speed","speed",2).setTooltip("The speed to give the target in the direction they are facing")],summaryItems:["relative","speed"]},!0)}};u(bo,"new",()=>new bo);let ll=bo;const ko=class ko extends q{constructor(){super({name:"Trigger",description:"Listens for a trigger on the current targets for a duration",data:[new w("Trigger","trigger",()=>Object.values(ke(Au)).map(e=>e.name),"Death").setTooltip("The trigger to listen for"),new f("Duration","duration",5).setTooltip("How long to listen to the trigger for"),new T("Stackable","stackable",!0).setTooltip("Whether different players (or the same player) can listen to the same target at the same time"),new T("Once","once",!0).setTooltip("Whether the trigger should only be used once each cast. When false, the trigger can execute as many times as it happens for the duration"),new w("Material","material",Fc,["Any"],!0).requireValue("trigger",["Block Break","Block Place"]).setTooltip("The type of block expected to be handled"),new L("Data","data",-1).requireValue("trigger",["Block Break","Block Place"]).setTooltip("The expected data value of the block (-1 for any data value)"),new w("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").requireValue("trigger",["Left Click","Right Click"]).setTooltip("If the player has to be crouching in order for this trigger to function"),new w("Type","type",["Start Crouching","Stop Crouching","Both"],"Start Crouching").requireValue("trigger",["Crouch"]).setTooltip("Whether you want to apply components when crouching or not crouching"),new w("Drop multiple","drop multiple",["True","False","Ignore"],"Ignore").requireValue("trigger",["Drop Item"]).setTooltip("Whether the player has to drop multiple items or a single item"),new w("Type","type",Bu,["Fall"],!0).requireValue("trigger",["Environment Damage"]).setTooltip("The source of damage to apply for"),new T("Cancel swap","cancel",!0).requireValue("trigger",["Item Swap"]).setTooltip("True cancels the item swap. False allows the item swap"),new D("Min Distance","min-distance",0).requireValue("trigger",["Land"]).setTooltip("The minimum distance the player should fall before effects activating"),new w("Type","type",Mo,"Any").requireValue("trigger",["Launch"]).setTooltip("The type of projectile that should be launched"),new w("Type","type",["Both","Melee","Projectile"],"Both").requireValue("trigger",["Physical Damage","Took Physical Damage"]).setTooltip("The type of damage dealt"),new x("Category","category","").requireValue("trigger",["Skill Damage","Took Skill Damage"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage"),new T("Target Listen Target","target",!0).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("True makes children target the target that has been listened to. False makes children target the entity fighting the target entity"),new D("Min Damage","dmg-min",0).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("The minimum damage that needs to be dealt"),new D("Max Damage","dmg-max",999).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("The maximum damage that needs to be dealt"),new x("Signal","signal","").requireValue("trigger",["Signal"]).setTooltip("The name of signal will be listened to")],summaryItems:["trigger","duration","once","signal"]},!0)}};u(ko,"new",()=>new ko);let ul=ko;const Do=class Do extends q{constructor(){super({name:"Value Add",description:"Adds to a stored value under a unique key for the caster. If the value wasn't set before, this will set the value to the given amount",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new f("Amount","amount",1).setTooltip("The amount to add to the value"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","amount","save"]},!1)}};u(Do,"new",()=>new Do);let cl=Do;const Io=class Io extends q{constructor(){super({name:"Value Attribute",description:"Loads a player's attribute count for a specific attribute as a stored value to be used in other mechanics",data:[new x("Key","key","attribute").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new x("Attribute","attribute","Vitality").setTooltip("The name of the attribute you are loading the value of"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","attribute","save"]},!1)}};u(Io,"new",()=>new Io);let pl=Io;const So=class So extends q{constructor(){super({name:"Value Copy",description:"Copies a stored value from the caster to the target or vice versa",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new x("Destination","destination","value").setTooltip("The key to copy the original value to"),new T("To target","to-target",!0).setTooltip("Whether to copy the value to the target or from the target to the caster"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","destination","to-target","save"]},!1)}};u(So,"new",()=>new So);let hl=So;const Vo=class Vo extends q{constructor(){super({name:"Value Distance",description:"Stores the distance between the target and the caster into a value",data:[new x("Key","key","attribute").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","save"]},!1)}};u(Vo,"new",()=>new Vo);let dl=Vo;const Ao=class Ao extends q{constructor(){super({name:"Value Divide",description:"Divides a stored value under a unique key for the caster. If the value wasn't set before, this will not do anything",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new f("Divisor","divisor",1).setTooltip("The amount to divide the value by"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","divisor","save"]},!1)}};u(Ao,"new",()=>new Ao);let ml=Ao;const _o=class _o extends q{constructor(){super({name:"Value Health",description:"Stores the target's current health as a value under a given key for the caster",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new w("Type","type",["Current","Max","Missing","Percent"],"Current").setTooltip("Current provides the health the target has, max provides their total health, missing provides how much health they have lost, and percent is the ratio of health to total health"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","type","save"]},!1)}};u(_o,"new",()=>new _o);let fl=_o;const qo=class qo extends q{constructor(){super({name:"Value Location",description:"Loads the first target's current location into a stored value for use at a later time",data:[new x("Key","key","location").setTooltip("The unique key to store the location under. This key can be used in place of attribute values to use the stored value"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","save"]},!1)}};u(qo,"new",()=>new qo);let wl=qo;const Eo=class Eo extends q{constructor(){super({name:"Value Load",description:"If there is a value already stored on the account, that value will be retrieved and then be used as a normal value.",data:[new x("Key","key").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value."),new T("Override","override",!0).setTooltip("If false and the current value have been set, nothing will change."),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","override","save"]},!1)}};u(Eo,"new",()=>new Eo);let gl=Eo;const xo=class xo extends q{constructor(){super({name:"Value Lore",description:"Loads a value from a held item's lore into a stored value under the given unique key for the caster",data:[new x("Key","key","lore").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new w("Hand","hand",["Main","Offhand"],"Main").setTooltip("The hand to check for the item. Offhand items are MC 1.9+ only"),new x("Regex","regex","Damage: {value}").setTooltip("The regex string to look for, using {value} as the number to store. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new f("Multiplier","multiplier",1).setTooltip("The multiplier for the acquired value. If you want the value to remain unchanged, leave this value at 1"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","hand","regex","multiplier","save"]},!1)}};u(xo,"new",()=>new xo);let yl=xo;const Co=class Co extends q{constructor(){super({name:"Value Lore Slot",description:"Loads a value from an item's lore into a stored value under the given unique key for the caster",data:[new x("Key","key","lore").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new L("Slot","slot",9).setTooltip("The slot of the inventory to fetch the item from. Slots 0-8 are the hotbar, 9-35 are the main inventory, 36-39 are armor, and 40 is the offhand slot"),new x("Regex","regex","Damage: {value}").setTooltip("The regex string to look for, using {value} as the number to store. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new f("Multiplier","multiplier",1).setTooltip("The multiplier for the acquired value. If you want the value to remain unchanged, leave this value at 1"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","slot","regex","multiplier","save"]},!1)}};u(Co,"new",()=>new Co);let Tl=Co;const Po=class Po extends q{constructor(){super({name:"Value Mana",description:"Stores the target player's current mana as a value under a given key for the caster",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new w("Type","type",["Current","Max","Missing","Percent"],"Current").setTooltip("Current provides the mana the target has, max provides their total mana, missing provides how much mana they have lost, and percent is the ratio of health to total mana"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","type","save"]},!1)}};u(Po,"new",()=>new Po);let vl=Po;const Fo=class Fo extends q{constructor(){super({name:"Value Multiply",description:"Multiplies a stored value under a unique key for the caster. If the value wasn't set before, this will not do anything",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new f("Multiplier","multiplier",1).setTooltip("The amount to multiply the value by"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","multiplier","save"]},!1)}};u(Fo,"new",()=>new Fo);let bl=Fo;const Ro=class Ro extends q{constructor(){super({name:"Value Placeholder",description:"Uses a placeholder string and stores it as a value for the caster",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new w("Type","type",["Number","String"],"Number").setTooltip("The type of value to store. Number values require numeric placeholders. String values can be used in messages or commands"),new x("Placeholder","placeholder","{value}").setTooltip("The placeholder string to use. Can contain multiple placeholders if using the String type"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","type","placeholder","save"]},!1)}};u(Ro,"new",()=>new Ro);let kl=Ro;const $o=class $o extends q{constructor(){super({name:"Value Random",description:"Stores a specified value under a given key for the caster",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new T("Integer","integer",!1).setTooltip("Whether to only generate integer values"),new w("Type","type",["Normal","Triangular"],"Normal").setTooltip("The type of random to use. Triangular favors numbers in the middle, similar to rolling two dice"),new f("Min","min").setTooltip("The minimum value it can be"),new f("Max","max").setTooltip("The maximum value it can be"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","type","min","max","save"]},!1)}};u($o,"new",()=>new $o);let Dl=$o;const Oo=class Oo extends q{constructor(){super({name:"Value Rotation",description:"Stores a value as the rotation between the target's look direction and a remembered location as a source. The caster is used if no targets are remembered or no source key is passed",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new x("Source","source","").setTooltip("The key to use as the source location for the rotation. If left empty, the caster is used"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","source","save"]},!1)}};u(Oo,"new",()=>new Oo);let Il=Oo;const Lo=class Lo extends q{constructor(){super({name:"Value Round",description:"Rounds a stored value under a unique key for the caster. If the value wasn't set before, this will not do anything",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new w("Type","type",["Round","Ceiling","Floor"],"Round").setTooltip("The type of rounding to use. Round rounds to the nearest integer, ceiling rounds up, and floor rounds down"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","type","save"]},!1)}};u(Lo,"new",()=>new Lo);let Sl=Lo;const No=class No extends q{constructor(){super({name:"Value Set",description:"Stores a specified value under a given key for the caster",data:[new x("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new f("Value","value",1).setTooltip("The value to store under the key"),new T("Save","save",!1).setTooltip("If true, save the key value to persistent value. Persistent value is not lost when the player leaves the server and is stored separately on each account")],summaryItems:["key","value","save"]},!1)}};u(No,"new",()=>new No);let Vl=No;const Ho=class Ho extends q{constructor(){super({name:"Warp",description:"Warps the target relative to their forward direction. Use negative numbers to go in the opposite direction (e.g. negative forward will cause the target to warp backwards)",data:[new T("Through Walls","walls").setTooltip("Whether to allow the target to teleport through walls"),new T("Open Spaces Only","open",!0).setTooltip("Whether to only allow teleporting to open spaces. The side-effect of open spaces is the warp position is set to the middle of the block instead of the complete relative position"),new ae("Position"),new f("Forward","forward",3,1).setTooltip("How far forward in blocks to teleport. A negative value teleports backwards"),new f("Upward","upward").setTooltip("How far upward in blocks to teleport. A negative value teleports downward"),new f("Right","right").setTooltip("How far to the right in blocks to teleport. A negative value teleports to the left"),...rt()],preview:[...Pe()],summaryItems:["walls","forward","upward","right","preserve"]},!1)}};u(Ho,"new",()=>new Ho);let Al=Ho;const Bo=class Bo extends q{constructor(){super({name:"Warp Location",description:"Warps the target to a specified location",data:[new x('World (or "current")',"world","current").setTooltip("The name of the world that the location is in"),new D("X","x",0).setTooltip("The X-coordinate of the desired position"),new D("Y","y",0).setTooltip("The Y-coordinate of the desired position"),new D("Z","z",0).setTooltip("The Z-coordinate of the desired position"),...rt()],preview:[...Pe()],summaryItems:["world","x","y","z","preserve"]},!1)}};u(Bo,"new",()=>new Bo);let _l=Bo;const Wo=class Wo extends q{constructor(){super({name:"Warp Random",description:"Warps the target in a random direction the given distance",data:[new T("Only Horizontal","horizontal",!0).setTooltip("Whether to limit the random position to the horizontal plane"),new T("Through Walls","walls",!1).setTooltip("Whether to allow the target to teleport through walls"),new f("Distance","distance",3,1).setTooltip("The max distance in blocks to teleport"),...rt()],summaryItems:["horizontal","walls","distance","preserve"]},!1)}};u(Wo,"new",()=>new Wo);let ql=Wo;const zo=class zo extends q{constructor(){super({name:"Warp Swap",description:"Switches the location of the caster and the target. If multiple targets are provided, this takes the first one",data:[...rt()],summaryItems:["preserve"]})}};u(zo,"new",()=>new zo);let El=zo;const Uo=class Uo extends q{constructor(){super({name:"Warp Target",description:"Warps either the target or the caster to the other. This does nothing when the target is the caster",data:[new w("Type","type",["Caster to Target","Target to Caster"],"Caster to Target").setTooltip("The direction to warp the involved targets"),...rt()],summaryItems:["type","preserve"]})}};u(Uo,"new",()=>new Uo);let xl=Uo;const Go=class Go extends q{constructor(){super({name:"Warp Value",description:"Warps all targets to a location remembered using the Value Location mechanic",data:[new x("Key","key","location").setTooltip("The unique key the location is stored under. This should be the same key used in the Value Location mechanic"),...rt()],preview:[...Pe()],summaryItems:["key","preserve"]},!1)}};u(Go,"new",()=>new Go);let Cl=Go;const Yo=class Yo extends q{constructor(){super({name:"Wolf",description:"Summons a wolf on each target for a duration. Child components will start off targeting the wolf so you can add effects to it. You can also give it its own skillset, though Cast triggers will not occur",data:[new w("Collar Color","color",Rc,"Black").setTooltip("The color of the collar that the wolf should wear"),new x("Wolf Name","name","{player}'s Wolf").setTooltip("The displayed name of the wolf. Use {player} to embed the caster's name"),new f("Health","health",10).setTooltip("The starting health of the wolf"),new f("Damage","damage",3).setTooltip("The damage dealt by the wolf each attack"),new T("Sitting","sitting",!1).setTooltip("Whether the wolf starts off sitting"),new f("Duration","seconds",10).setTooltip("How long to summon the wolf for"),new f("Amount","amount",1).setTooltip("How many wolves to summon"),new Qo("Skills","skills",!0).setTooltip("The skills to give the wolf. Skills are executed at the level of the skill summoning the wolf. Skills needing a Cast trigger will not work")],summaryItems:["color","name","seconds","amount"]},!0)}};u(Yo,"new",()=>new Yo);let Pl=Yo;const Be=s=>[new L("Refresh period",s+"-period",5).requireValue(s,[!0]).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new w("Particle",s+"-particle",Oe,"Crit").setTooltip("The type of particle to display").requireValue(s,[!0]),new w("Material",s+"-material",()=>[..._e()],"Arrow").requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The material to use for the particles"),new w("Material",s+"-material",()=>[...Ae()],"Dirt").requireValue(s+"-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue(s,[!0]).setTooltip("The block to use for the particles"),new L("Durability",s+"-durability",0).requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new L("CustomModelData",s+"-type",0).requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new le("Dust Color",s+"-dust-color","#FF0000").requireValue(s+"-particle",["Redstone","Dust color transition"]).requireValue(s,[!0]).setTooltip("The color of the dust particles in hex RGB"),new le("Final Dust Color",s+"-final-dust-color","#FF0000").requireValue(s+"-particle",["Dust color transition"]).requireValue(s,[!0]).setTooltip("The color to transition to, in hex RGB"),new D("Dust Size",s+"-dust-size",1).requireValue(s+"-particle",["Redstone","Dust color transition"]).requireValue(s,[!0]).setTooltip("The size of the dust particles"),new L("Effect Data",s+"-data").requireValue(s+"-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue(s,[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new D("DX",s+"-dx").requireValue(s,[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new D("DY",s+"-dy").requireValue(s,[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new D("DZ",s+"-dz").requireValue(s,[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new D("Amount",s+"-amount",1).requireValue(s,[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new D("Speed",s+"-speed",.1).requireValue(s,[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],$p=()=>{Au.set({ATTR_CHANGE:{name:"Attribute Change",component:hr},BLOCK_BREAK:{name:"Block Break",component:dr},BLOCK_PLACE:{name:"Block Place",component:mr},CAST:{name:"Cast",component:fr},CHAT:{name:"Chat",component:wr},CLEANUP:{name:"Cleanup",component:gr},CROUCH:{name:"Crouch",component:yr},DEATH:{name:"Death",component:Tr},ENTITY_TARGET:{name:"Entity Target",component:br},HEAL:{name:"Heal",component:Gr},INIT:{name:"Initialize",component:qr},KILL:{name:"Kill",component:xr},LAND:{name:"Land",component:Cr},LEFT_CLICK:{name:"Left Click",component:Fr},RIGHT_CLICK:{name:"Right Click",component:Nr},MOVE:{name:"Move",component:Rr},PROJ_HIT:{name:"Projectile Hit",component:Or},PROJ_LAUNCH:{name:"Projectile Launch",alias:"Launch",component:Pr},PROJ_TICK:{name:"Projectile Tick",component:Lr},SIGNAL:{name:"Signal",component:jr},SHIELD:{name:"Shield",component:Yr},SKILL_CAST:{name:"Skill Cast",component:Hr},ARMOR_EQUIP:{name:"Armor Equip",component:pr,section:"Item"},CONSUME:{name:"Consume",component:Ur,section:"Item"},DROP_ITEM:{name:"Drop Item",component:vr,section:"Item"},ITEM_SWAP:{name:"Item Swap",component:Er,section:"Item"},FISHING:{name:"Fishing",component:Dr,section:"Fishing"},FISHING_BITE:{name:"Fishing Bite",component:Ir,section:"Fishing"},FISHING_FAIL:{name:"Fishing Fail",component:Sr,section:"Fishing"},FISHING_GRAB:{name:"Fishing Grab",component:Vr,section:"Fishing"},FISHING_GROUND:{name:"Fishing Ground",component:Ar,section:"Fishing"},FISHING_REEL:{name:"Fishing Reel",component:_r,section:"Fishing"},ENV_DAMAGE:{name:"Environment Damage",component:kr,section:"Damage"},PHYS_DAMAGE:{name:"Physical Damage",component:$r,section:"Damage"},TOOK_PHYS:{name:"Took Physical Damage",component:Wr,section:"Damage"},SKILL_DAMAGE:{name:"Skill Damage",component:Br,section:"Damage"},TOOK_SKILL:{name:"Took Skill Damage",component:zr,section:"Damage"}}),Mu.set({AREA:{name:"Area",component:Xr},CONE:{name:"Cone",component:Zr},LINEAR:{name:"Linear",component:Kr},LOCATION:{name:"Location",component:Mr},NEAREST:{name:"Nearest",component:Jr},OFFSET:{name:"Offset",component:Qr},REMEMBER:{name:"Remember",component:ei},SELF:{name:"Self",component:ti},SINGLE:{name:"Single",component:ai},WORLD:{name:"World",component:si}}),Ju.set({ALTITUDE:{name:"Altitude",component:oi},ARMOR:{name:"Armor",component:ri},ATTRIBUTE:{name:"Attribute",component:ii},BIOME:{name:"Biome",component:ni},BLOCK:{name:"Block",component:li},BURNING:{name:"Burning",component:ui},CEILING:{name:"Ceiling",component:ci},CHANCE:{name:"Chance",component:pi},CLASS:{name:"Class",component:hi},CLASS_LEVEL:{name:"Class Level",component:di},COMBAT:{name:"Combat",component:mi},CROUCH:{name:"Crouch",component:fi},DIRECTION:{name:"Direction",component:wi},DISTANCE:{name:"Distance",component:gi},ELEVATION:{name:"Elevation",component:yi},ELSE:{name:"Else",component:Ti},ENTITY_TYPE:{name:"Entity Type",component:vi},FIRE:{name:"Fire",component:bi},FLAG:{name:"Flag",component:ki},FOOD:{name:"Food",component:Di},GROUND:{name:"Ground",component:Ii},HEALTH:{name:"Health",component:Si},INVENTORY:{name:"Inventory",component:Ai},ITEM:{name:"Item",component:Vi},LIGHT:{name:"Light",component:_i},MANA:{name:"Mana",component:qi},MONEY:{name:"Money",component:Ei},MOUNTED:{name:"Mounted",component:xi},MOUNTING:{name:"Mounting",component:Ci},MYTHICMOB_TYPE:{name:"MythicMob Type",component:Pi},NAME:{name:"Name",component:Fi},OFFHAND:{name:"Offhand",component:Ri},PERMISSION:{name:"Permission",component:$i},POTION:{name:"Potion",component:Oi},SKILL_LEVEL:{name:"Skill Level",component:Li},SLOT:{name:"Slot",component:Ni},STATUS:{name:"Status",component:Hi},TIME:{name:"Time",component:Bi},TOOL:{name:"Tool",component:Wi},VALUE:{name:"Value",component:zi},VALUETEXT:{name:"Value Text",component:Ui},WATER:{name:"Water",component:Gi},WEATHER:{name:"Weather",component:Yi},WORLD:{name:"World",component:ji},YAW:{name:"Yaw",component:Xi}}),Qu.set({ARMOR:{name:"Armor",component:Zi},ARMOR_STAND:{name:"Armor Stand",component:Ki},ARMOR_STAND_POSE:{name:"Armor Stand Pose",component:Mi},ARMOR_STAND_REMOVE:{name:"Armor Stand Remove",component:Ji},ATTRIBUTE:{name:"Attribute",component:Qi},BLOCK:{name:"Block",component:en},BUFF:{name:"Buff",component:tn},CANCEL:{name:"Cancel",component:an},CHANNEL:{name:"Channel",component:on},CLEANSE:{name:"Cleanse",component:rn},COMMAND:{name:"Command",component:nn},COOLDOWN:{name:"Cooldown",component:ln},DAMAGE:{name:"Damage",component:un},DAMAGE_BUFF:{name:"Damage Buff",component:cn},DAMAGE_LORE:{name:"Damage Lore",component:pn},DEFENSE_BUFF:{name:"Defense Buff",component:hn},DELAY:{name:"Delay",component:dn},DISGUISE:{name:"Disguise",component:mn},DURABILITY:{name:"Durability",component:fn},EXPERIENCE:{name:"Experience",component:wn},EXPLOSION:{name:"Explosion",component:gn},FIRE:{name:"Fire",component:yn},FOOD:{name:"Food",component:kn},FORGET_TARGETS:{name:"Forget Targets",component:Dn},HEAL:{name:"Heal",component:In},HEALTH_SET:{name:"Health Set",component:Sn},HELD_ITEM:{name:"Held Item",component:Vn},IMMUNITY:{name:"Immunity",component:An},INTERRUPT:{name:"Interrupt",component:_n},INVISIBILITY:{name:"Invisibility",component:qn},ITEM:{name:"Item",component:En},ITEM_DROP:{name:"Item Drop",component:xn},ITEM_PROJECTILE:{name:"Item Projectile",component:Cn},ITEM_REMOVE:{name:"Item Remove",component:Pn},LAUNCH:{name:"Launch",component:Fn},LIGHTNING:{name:"Lightning",component:Rn},MANA:{name:"Mana",component:$n},MESSAGE:{name:"Message",component:On},MINE:{name:"Mine",component:Ln},MONEY:{name:"Money",component:Nn},MOUNT:{name:"Mount",component:Hn},PASSIVE:{name:"Passive",component:Yn},PERMISSION:{name:"Permission",component:jn},POTION:{name:"Potion",component:Xn},POTION_PROJECTILE:{name:"Potion Projectile",component:Zn},PROJECTILE:{name:"Projectile",component:Kn},PURGE:{name:"Purge",component:Mn},PUSH:{name:"Push",component:Jn},REMEMBER_TARGETS:{name:"Remember Targets",component:Qn},REPEAT:{name:"Repeat",component:el},SIGNAL_EMIT:{name:"Signal Emit",component:tl},SKILL_CAST:{name:"Skill Cast",component:al},SOUND:{name:"Sound",component:sl},STAT:{name:"Stat",component:ol},STATUS:{name:"Status",component:rl},SUMMON:{name:"Summon",component:il},TAUNT:{name:"Taunt",component:nl},THROW:{name:"Throw",component:ll},TRIGGER:{name:"Trigger",component:ul},WOLF:{name:"Wolf",component:Pl},CANCEL_EFFECT:{name:"Cancel Effect",component:sn,section:"Particle"},PARTICLE:{name:"Particle",component:Bn,section:"Particle"},PARTICLE_ANIMATION:{name:"Particle Animation",component:Wn,section:"Particle"},PARTICLE_EFFECT:{name:"Particle Effect",component:zn,section:"Particle"},PARTICLE_IMAGE:{name:"Particle Image",component:Un,section:"Particle"},PARTICLE_PROJECTILE:{name:"Particle Projectile",component:Gn,section:"Particle"},FLAG:{name:"Flag",component:Tn,section:"Flag"},FLAG_CLEAR:{name:"Flag Clear",component:vn,section:"Flag"},FLAG_TOGGLE:{name:"Flag Toggle",component:bn,section:"Flag"},VALUE_ADD:{name:"Value Add",component:cl,section:"Value"},VALUE_ATTRIBUTE:{name:"Value Attribute",component:pl,section:"Value"},VALUE_COPY:{name:"Value Copy",component:hl,section:"Value"},VALUE_DISTANCE:{name:"Value Distance",component:dl,section:"Value"},VALUE_DIVIDE:{name:"Value Divide",component:ml,section:"Value"},VALUE_HEALTH:{name:"Value Health",component:fl,section:"Value"},VALUE_LOAD:{name:"Value Load",component:gl,section:"Value"},VALUE_LOCATION:{name:"Value Location",component:wl,section:"Value"},VALUE_LORE:{name:"Value Lore",component:yl,section:"Value"},VALUE_LORE_SLOT:{name:"Value Lore Slot",component:Tl,section:"Value"},VALUE_MANA:{name:"Value Mana",component:vl,section:"Value"},VALUE_MULTIPLY:{name:"Value Multiply",component:bl,section:"Value"},VALUE_PLACEHOLDER:{name:"Value Placeholder",component:kl,section:"Value"},VALUE_RANDOM:{name:"Value Random",component:Dl,section:"Value"},VALUE_ROTATION:{name:"Value Rotation",component:Il,section:"Value"},VALUE_ROUND:{name:"Value Round",component:Sl,section:"Value"},VALUE_SET:{name:"Value Set",component:Vl,section:"Value"},WARP:{name:"Warp",component:Al,section:"Warp"},WARP_LOC:{name:"Warp Location",component:_l,section:"Warp"},WARP_RANDOM:{name:"Warp Random",component:ql,section:"Warp"},WARP_SWAP:{name:"Warp Swap",component:El,section:"Warp"},WARP_TARGET:{name:"Warp Target",component:xl,section:"Warp"},WARP_VALUE:{name:"Warp Value",component:Cl,section:"Warp"}}),ec.set(!0)},Op=!1,rr="fabled.magemonkey.studio",Je=`


~~~~~


`,Lp=async({url:s})=>{if($p(),s.host.includes("localhost"))return;if(s.searchParams.has("migrationData")){Yu({url:s.searchParams.get("migrationData")||void 0}).then(o=>{const l=o.split(Je)[0],i=o.split(Je)[1],c=o.split(Je)[2],h=o.split(Je)[3];ac(l).then(()=>{}),sc(i),localStorage.setItem("skillFolders",c),localStorage.setItem("classFolders",h),window.location.href=`https://${rr}${ze}`}).catch(console.error);return}if(s.host===rr||ke(et).length==0)return;alert("We're migrating to a new URL. You're now going to be redirected. Your skills/classes should remain in tact.");const e=ir.stringify(await oc(),{lineWidth:0}),t=ir.stringify(rc(),{lineWidth:0}),a=localStorage.getItem("skillFolders"),r=localStorage.getItem("classFolders"),n=e+Je+t+Je+a+Je+r;Gu(n).then(o=>window.location.href=`https://${rr}?migrationData=${o}`)},Ph=Object.freeze(Object.defineProperty({__proto__:null,load:Lp,ssr:Op},Symbol.toStringTag,{value:"Module"}));function Np(s){let e,t,a,r="Upload File",n,o,l="Select File",i,c,h,p,A='<span class="svelte-8b3mcy">OR</span>',k,v,m,y="Import from URL",d,I,N,z,$="Import",Y,V;return{c(){e=P("div"),t=P("div"),a=P("div"),a.textContent=r,n=U(),o=P("label"),o.textContent=l,i=U(),c=P("input"),h=U(),p=P("div"),p.innerHTML=A,k=U(),v=P("div"),m=P("div"),m.textContent=y,d=U(),I=P("input"),N=U(),z=P("div"),z.textContent=$,this.h()},l(b){e=F(b,"DIV",{class:!0});var H=Q(e);t=F(H,"DIV",{class:!0});var re=Q(t);a=F(re,"DIV",{"data-svelte-h":!0}),oe(a)!=="svelte-d6qc1n"&&(a.textContent=r),n=G(re),o=F(re,"LABEL",{for:!0,class:!0,"data-svelte-h":!0}),oe(o)!=="svelte-rsmggv"&&(o.textContent=l),i=G(re),c=F(re,"INPUT",{id:!0,type:!0,class:!0}),re.forEach(_),h=G(H),p=F(H,"DIV",{class:!0,"data-svelte-h":!0}),oe(p)!=="svelte-1vhlovm"&&(p.innerHTML=A),k=G(H),v=F(H,"DIV",{class:!0});var W=Q(v);m=F(W,"DIV",{"data-svelte-h":!0}),oe(m)!=="svelte-kmd8jc"&&(m.textContent=y),d=G(W),I=F(W,"INPUT",{class:!0}),N=G(W),z=F(W,"DIV",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(z)!=="svelte-9wtjih"&&(z.textContent=$),W.forEach(_),H.forEach(_),this.h()},h(){g(o,"for","file-upload"),g(o,"class","button"),g(c,"id","file-upload"),g(c,"type","file"),g(c,"class","hidden svelte-8b3mcy"),c.multiple=!0,g(t,"class","option svelte-8b3mcy"),g(p,"class","or svelte-8b3mcy"),g(I,"class","svelte-8b3mcy"),g(z,"class","button"),g(z,"tabindex","0"),g(z,"role","button"),g(v,"class","option svelte-8b3mcy"),g(e,"class","options svelte-8b3mcy")},m(b,H){j(b,e,H),S(e,t),S(t,a),S(t,n),S(t,o),S(t,i),S(t,c),S(e,h),S(e,p),S(e,k),S(e,v),S(v,m),S(v,d),S(v,I),Qe(I,s[1]),S(v,N),S(v,z),Y||(V=[B(c,"change",s[4]),B(I,"input",s[5]),B(z,"click",s[3]),B(z,"keypress",s[6])],Y=!0)},p(b,H){H&2&&I.value!==b[1]&&Qe(I,b[1])},d(b){b&&_(e),Y=!1,xe(V)}}}function Hp(s){let e,t;return e=new Fl({props:{open:!0,$$slots:{default:[Np]},$$scope:{ctx:s}}}),e.$on("close",s[2]),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,[r]){const n={};r&131&&(n.$$scope={dirty:r,ctx:a}),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Bp(s,e,t){let a,r;const n=()=>{t(1,a=t(0,r=void 0)),_u(!1)},o=()=>{a&&(a.startsWith("http")||t(1,a="https://"+a),Yu({url:a}).then(h=>{n(),ic(h)}).catch(console.error))};function l(){r=this.files,t(0,r)}function i(){a=this.value,t(1,a)}const c=h=>h.key==="Enter"&&o();return s.$$.update=()=>{if(s.$$.dirty&1&&r&&r.length>0)for(const h of r)h.name.indexOf(".yml")!=-1&&(qu(h),n())},[r,a,n,o,l,i,c]}class Wp extends ge{constructor(e){super(),ye(this,e,Bp,Hp,we,{})}}function ru(s){let e,t,a=s[0]==="class"?"Class":"Skill",r,n,o,l;return{c(){e=P("div"),t=ve("Share "),r=ve(a),this.h()},l(i){e=F(i,"DIV",{class:!0,tabindex:!0,role:!0,title:!0});var c=Q(e);t=be(c,"Share "),r=be(c,a),c.forEach(_),this.h()},h(){g(e,"class","chip share svelte-374drf"),g(e,"tabindex","0"),g(e,"role","button"),g(e,"title",n="Share "+(s[0]==="class"?"Class":"Skill"))},m(i,c){j(i,e,c),S(e,t),S(e,r),o||(l=[B(e,"click",qe(s[1])),B(e,"keypress",s[5])],o=!0)},p(i,c){c&1&&a!==(a=i[0]==="class"?"Class":"Skill")&&Ue(r,a),c&1&&n!==(n="Share "+(i[0]==="class"?"Class":"Skill"))&&g(e,"title",n)},d(i){i&&_(e),o=!1,xe(l)}}}function zp(s){let e,t,a,r='<span class="material-symbols-rounded">menu</span>',n,o,l,i,c,h="Import",p,A,k,v=s[0]&&ru(s);return{c(){e=P("div"),t=P("nav"),a=P("div"),a.innerHTML=r,n=U(),o=P("div"),l=U(),i=P("div"),c=P("div"),c.textContent=h,p=U(),v&&v.c(),this.h()},l(m){e=F(m,"DIV",{class:!0});var y=Q(e);t=F(y,"NAV",{class:!0});var d=Q(t);a=F(d,"DIV",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(a)!=="svelte-hdnmnk"&&(a.innerHTML=r),n=G(d),o=F(d,"DIV",{}),Q(o).forEach(_),l=G(d),i=F(d,"DIV",{class:!0});var I=Q(i);c=F(I,"DIV",{class:!0,tabindex:!0,role:!0,title:!0,"data-svelte-h":!0}),oe(c)!=="svelte-12xcsgq"&&(c.textContent=h),p=G(I),v&&v.l(I),I.forEach(_),d.forEach(_),y.forEach(_),this.h()},h(){g(a,"class","chip hamburger svelte-374drf"),g(a,"tabindex","0"),g(a,"role","button"),g(c,"class","chip import svelte-374drf"),g(c,"tabindex","0"),g(c,"role","button"),g(c,"title","Import Data"),g(i,"class","transfer svelte-374drf"),g(t,"class","svelte-374drf"),g(e,"class","nav-wrap svelte-374drf")},m(m,y){j(m,e,y),S(e,t),S(t,a),S(t,n),S(t,o),S(t,l),S(t,i),S(i,c),S(i,p),v&&v.m(i,null),A||(k=[B(a,"click",qe(Eu)),B(a,"keypress",s[3]),B(c,"click",qe(s[2])),B(c,"keypress",s[4])],A=!0)},p(m,[y]){m[0]?v?v.p(m,y):(v=ru(m),v.c(),v.m(i,null)):v&&(v.d(1),v=null)},i:Re,o:Re,d(m){m&&_(e),v&&v.d(),A=!1,xe(k)}}}function Up(s,e,t){let a;he(s,nc,c=>t(0,a=c));const r=()=>{let c=ke(vt);if(!c)return;let h=ir.stringify({[c.name]:c.serializeYaml()},{lineWidth:0});Gu(h).then(p=>{var A;(A=navigator==null?void 0:navigator.clipboard)==null||A.writeText(p),window.open(p)}).catch(p=>console.error(p))},n=()=>{_u(!0)};return[a,r,n,c=>{c.key==="Enter"&&(c.stopPropagation(),Eu())},c=>{c.key==="Enter"&&(c.stopPropagation(),n())},c=>{c.key==="Enter"&&(c.stopPropagation(),r())}]}class Gp extends ge{constructor(e){super(),ye(this,e,Up,zp,we,{})}}function Yp(s){let e,t,a;return{c(){e=sr("svg"),t=sr("g"),a=sr("path"),this.h()},l(r){e=or(r,"svg",{viewBox:!0,class:!0});var n=Q(e);t=or(n,"g",{fill:!0});var o=Q(t);a=or(o,"path",{d:!0}),Q(a).forEach(_),o.forEach(_),n.forEach(_),this.h()},h(){g(a,"d","M26.0015 6.9529C24.0021 6.03845 21.8787 5.37198 19.6623 5C19.3833 5.48048 19.0733 6.13144 18.8563 6.64292C16.4989 6.30193 14.1585 6.30193 11.8336 6.64292C11.6166 6.13144 11.2911 5.48048 11.0276 5C8.79575 5.37198 6.67235 6.03845 4.6869 6.9529C0.672601 12.8736 -0.41235 18.6548 0.130124 24.3585C2.79599 26.2959 5.36889 27.4739 7.89682 28.2489C8.51679 27.4119 9.07477 26.5129 9.55525 25.5675C8.64079 25.2265 7.77283 24.808 6.93587 24.312C7.15286 24.1571 7.36986 23.9866 7.57135 23.8161C12.6241 26.1255 18.0969 26.1255 23.0876 23.8161C23.3046 23.9866 23.5061 24.1571 23.7231 24.312C22.8861 24.808 22.0182 25.2265 21.1037 25.5675C21.5842 26.5129 22.1422 27.4119 22.7621 28.2489C25.2885 27.4739 27.8769 26.2959 30.5288 24.3585C31.1952 17.7559 29.4733 12.0212 26.0015 6.9529ZM10.2527 20.8402C8.73376 20.8402 7.49382 19.4608 7.49382 17.7714C7.49382 16.082 8.70276 14.7025 10.2527 14.7025C11.7871 14.7025 13.0425 16.082 13.0115 17.7714C13.0115 19.4608 11.7871 20.8402 10.2527 20.8402ZM20.4373 20.8402C18.9183 20.8402 17.6768 19.4608 17.6768 17.7714C17.6768 16.082 18.8873 14.7025 20.4373 14.7025C21.9717 14.7025 23.2271 16.082 23.1961 17.7714C23.1961 19.4608 21.9872 20.8402 20.4373 20.8402Z"),g(t,"fill","currentColor"),g(e,"viewBox","0 0 30 34"),g(e,"class","logo-3oeRIY svelte-evyltu")},m(r,n){j(r,e,n),S(e,t),S(t,a)},p:Re,i:Re,o:Re,d(r){r&&_(e)}}}class jp extends ge{constructor(e){super(),ye(this,e,null,Yp,we,{})}}function Xp(s){let e,t,a,r="Fabled",n,o,l="Dynamic Editor",i,c,h,p=new Date().getFullYear()+"",A,k,v,m,y,d,I,N=`<img src="${ze}/github-mark-white.svg" alt="Github" class="svelte-12n421s"/>`,z,$,Y=`<img src="${ze}/spigot.png" alt="Spigot" class="svelte-12n421s"/>`,V,b,H='<span class="material-symbols-rounded">help</span>',re,W,ie;return y=new jp({}),{c(){e=P("div"),t=P("div"),a=P("h1"),a.textContent=r,n=U(),o=P("h2"),o.textContent=l,i=U(),c=P("div"),h=ve("© ProMCTeam "),A=ve(p),k=U(),v=P("div"),m=P("a"),Z(y.$$.fragment),d=U(),I=P("a"),I.innerHTML=N,z=U(),$=P("a"),$.innerHTML=Y,V=U(),b=P("a"),b.innerHTML=H,this.h()},l(de){e=F(de,"DIV",{id:!0,class:!0});var ue=Q(e);t=F(ue,"DIV",{class:!0,tabindex:!0,role:!0});var ne=Q(t);a=F(ne,"H1",{class:!0,"data-svelte-h":!0}),oe(a)!=="svelte-zqez5b"&&(a.textContent=r),n=G(ne),o=F(ne,"H2",{class:!0,"data-svelte-h":!0}),oe(o)!=="svelte-18hxewo"&&(o.textContent=l),i=G(ne),c=F(ne,"DIV",{class:!0});var E=Q(c);h=be(E,"© ProMCTeam "),A=be(E,p),E.forEach(_),ne.forEach(_),k=G(ue),v=F(ue,"DIV",{class:!0});var ce=Q(v);m=F(ce,"A",{class:!0,href:!0,title:!0});var je=Q(m);J(y.$$.fragment,je),je.forEach(_),d=G(ce),I=F(ce,"A",{class:!0,href:!0,title:!0,"data-svelte-h":!0}),oe(I)!=="svelte-127bfcs"&&(I.innerHTML=N),z=G(ce),$=F(ce,"A",{class:!0,href:!0,title:!0,"data-svelte-h":!0}),oe($)!=="svelte-15qm3a"&&($.innerHTML=Y),V=G(ce),b=F(ce,"A",{class:!0,href:!0,title:!0,"data-svelte-h":!0}),oe(b)!=="svelte-8ic9rg"&&(b.innerHTML=H),ce.forEach(_),ue.forEach(_),this.h()},h(){g(a,"class","accent svelte-12n421s"),g(o,"class","svelte-12n421s"),g(c,"class","copy svelte-12n421s"),g(t,"class","home svelte-12n421s"),g(t,"tabindex","0"),g(t,"role","button"),g(m,"class","social discord svelte-12n421s"),g(m,"href","https://discord.gg/6UzkTe6RvW"),g(m,"title","Join our Discord"),g(I,"class","social github svelte-12n421s"),g(I,"href","https://github.com/promcteam/proskillapi"),g(I,"title","Check out our GitHub"),g($,"class","social spigot svelte-12n421s"),g($,"href","https://www.spigotmc.org/resources/proskillapi-create-custom-races-classes-skills-spells-with-an-easy-online-editor.91913/"),g($,"title","Check out our resource on Spigot"),g(b,"class","social wiki svelte-12n421s"),g(b,"href","https://promcteam.com/wiki/index.php?title=Proskillapi:Proskillapi"),g(b,"title","Wiki"),g(v,"class","socials svelte-12n421s"),g(e,"id","header"),g(e,"class","svelte-12n421s")},m(de,ue){j(de,e,ue),S(e,t),S(t,a),S(t,n),S(t,o),S(t,i),S(t,c),S(c,h),S(c,A),S(e,k),S(e,v),S(v,m),K(y,m,null),S(v,d),S(v,I),S(v,z),S(v,$),S(v,V),S(v,b),re=!0,W||(ie=[B(t,"click",s[0]),B(t,"keypress",s[1])],W=!0)},p:Re,i(de){re||(C(y.$$.fragment,de),re=!0)},o(de){O(y.$$.fragment,de),re=!1},d(de){de&&_(e),M(y),W=!1,xe(ie)}}}function Zp(s){return[()=>nt(`${ze}/`),a=>a.key==="Enter"&&nt(`${ze}/`)]}class Kp extends ge{constructor(e){super(),ye(this,e,Zp,Xp,we,{})}}function iu(s){let e,t,a,r,n="save",o,l,i,c,h="content_copy",p,A,k,v,m="delete",y,d,I,N=s[2]instanceof He&&nu(s);return{c(){e=P("div"),N&&N.c(),t=U(),a=P("div"),r=P("span"),r.textContent=n,l=U(),i=P("div"),c=P("span"),c.textContent=h,A=U(),k=P("div"),v=P("span"),v.textContent=m,this.h()},l(z){e=F(z,"DIV",{class:!0});var $=Q(e);N&&N.l($),t=G($),a=F($,"DIV",{tabindex:!0,role:!0,class:!0,title:!0});var Y=Q(a);r=F(Y,"SPAN",{class:!0,"data-svelte-h":!0}),oe(r)!=="svelte-m7sczt"&&(r.textContent=n),Y.forEach(_),l=G($),i=F($,"DIV",{tabindex:!0,role:!0,class:!0,title:!0});var V=Q(i);c=F(V,"SPAN",{class:!0,"data-svelte-h":!0}),oe(c)!=="svelte-1umu3ov"&&(c.textContent=h),V.forEach(_),A=G($),k=F($,"DIV",{tabindex:!0,role:!0,class:!0,title:!0});var b=Q(k);v=F(b,"SPAN",{class:!0,"data-svelte-h":!0}),oe(v)!=="svelte-1m77sfb"&&(v.textContent=m),b.forEach(_),$.forEach(_),this.h()},h(){g(r,"class","material-symbols-rounded"),g(a,"tabindex","0"),g(a,"role","button"),g(a,"class","download svelte-okwike"),g(a,"title",o="Save "+(s[2].dataType==="skill"?"Skill":"Class")),g(c,"class","material-symbols-rounded"),g(i,"tabindex","0"),g(i,"role","button"),g(i,"class","clone svelte-okwike"),g(i,"title",p="Clone "+(s[2].dataType==="skill"?"Skill":"Class")),g(v,"class","material-symbols-rounded"),g(k,"tabindex","0"),g(k,"role","button"),g(k,"class","delete svelte-okwike"),g(k,"title",y="Delete "+(s[2].dataType==="skill"?"Skill":"Class")),g(e,"class","buttons svelte-okwike")},m(z,$){j(z,e,$),N&&N.m(e,null),S(e,t),S(e,a),S(a,r),S(e,l),S(e,i),S(i,c),S(e,A),S(e,k),S(k,v),d||(I=[B(a,"click",qe(We(s[15]))),B(a,"keypress",qe(We(s[16]))),B(i,"click",qe(We(s[17]))),B(i,"keypress",qe(We(s[18]))),B(k,"click",qe(We(s[19]))),B(k,"keypress",qe(We(s[20])))],d=!0)},p(z,$){z[2]instanceof He?N?N.p(z,$):(N=nu(z),N.c(),N.m(e,t)):N&&(N.d(1),N=null),$&4&&o!==(o="Save "+(z[2].dataType==="skill"?"Skill":"Class"))&&g(a,"title",o),$&4&&p!==(p="Clone "+(z[2].dataType==="skill"?"Skill":"Class"))&&g(i,"title",p),$&4&&y!==(y="Delete "+(z[2].dataType==="skill"?"Skill":"Class"))&&g(k,"title",y)},d(z){z&&_(e),N&&N.d(),d=!1,xe(I)}}}function nu(s){let e,t,a="edit",r;return{c(){e=P("a"),t=P("span"),t.textContent=a,this.h()},l(n){e=F(n,"A",{href:!0,class:!0,title:!0});var o=Q(e);t=F(o,"SPAN",{class:!0,"data-svelte-h":!0}),oe(t)!=="svelte-qeheo0"&&(t.textContent=a),o.forEach(_),this.h()},h(){g(t,"class","material-symbols-rounded"),g(e,"href",r=ze+"/skill/"+s[2].name+"/edit"),g(e,"class","edit svelte-okwike"),g(e,"title","Edit Skill")},m(n,o){j(n,e,o),S(e,t)},p(n,o){o&4&&r!==(r=ze+"/skill/"+n[2].name+"/edit")&&g(e,"href",r)},d(n){n&&_(e)}}}function Mp(s){var m;let e,t,a=((m=s[2])==null?void 0:m.name)+"",r,n,o,l,i,c="Cancel",h,p,A="Delete",k,v;return{c(){e=P("h3"),t=ve("Do you really want to delete "),r=ve(a),n=ve("?"),o=U(),l=P("div"),i=P("div"),i.textContent=c,h=U(),p=P("div"),p.textContent=A,this.h()},l(y){e=F(y,"H3",{});var d=Q(e);t=be(d,"Do you really want to delete "),r=be(d,a),n=be(d,"?"),d.forEach(_),o=G(y),l=F(y,"DIV",{class:!0});var I=Q(l);i=F(I,"DIV",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(i)!=="svelte-1h5bffi"&&(i.textContent=c),h=G(I),p=F(I,"DIV",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(p)!=="svelte-uc75g2"&&(p.textContent=A),I.forEach(_),this.h()},h(){g(i,"class","button svelte-okwike"),g(i,"tabindex","0"),g(i,"role","button"),g(p,"class","button modal-delete svelte-okwike"),g(p,"tabindex","0"),g(p,"role","button"),g(l,"class","modal-buttons svelte-okwike")},m(y,d){j(y,e,d),S(e,t),S(e,r),S(e,n),j(y,o,d),j(y,l,d),S(l,i),S(l,h),S(l,p),k||(v=[B(i,"click",s[23]),B(i,"keypress",s[24]),B(p,"click",s[25]),B(p,"keypress",s[26])],k=!0)},p(y,d){var I;d&4&&a!==(a=((I=y[2])==null?void 0:I.name)+"")&&Ue(r,a)},d(y){y&&(_(e),_(o),_(l)),k=!1,xe(v)}}}function Jp(s){let e,t,a,r,n,o,l,i,c,h,p;const A=s[13].default,k=Pu(A,s,s[28],null);let v=s[2]&&iu(s);function m(d){s[27](d)}let y={$$slots:{default:[Mp]},$$scope:{ctx:s}};return s[4]!==void 0&&(y.open=s[4]),l=new Fl({props:y}),pe.push(()=>fe(l,"open",m)),{c(){e=P("div"),k&&k.c(),t=U(),v&&v.c(),o=U(),Z(l.$$.fragment),this.h()},l(d){e=F(d,"DIV",{class:!0,draggable:!0,tabindex:!0,role:!0});var I=Q(e);k&&k.l(I),t=G(I),v&&v.l(I),I.forEach(_),o=G(d),J(l.$$.fragment,d),this.h()},h(){g(e,"class","sidebar-entry svelte-okwike"),g(e,"draggable",a=!!s[2]),g(e,"tabindex","0"),g(e,"role","menuitem"),Fe(e,"over",s[3]),Fe(e,"active",s[2]&&s[5]===s[2]),Fe(e,"in-folder",!!lt(s[2]))},m(d,I){j(d,e,I),k&&k.m(e,null),S(e,t),v&&v.m(e,null),j(d,o,I),K(l,d,I),c=!0,h||(p=[B(e,"dragstart",s[8]),B(e,"drop",qe(We(s[9]))),B(e,"dragover",We(s[10])),B(e,"dragleave",s[21]),B(e,"click",s[14]),B(e,"keypress",s[22])],h=!0)},p(d,[I]){s=d,k&&k.p&&(!c||I&268435456)&&Fu(k,A,s,s[28],c?$u(A,s[28],I,null):Ru(s[28]),null),s[2]?v?v.p(s,I):(v=iu(s),v.c(),v.m(e,null)):v&&(v.d(1),v=null),(!c||I&4&&a!==(a=!!s[2]))&&g(e,"draggable",a),(!c||I&8)&&Fe(e,"over",s[3]),(!c||I&36)&&Fe(e,"active",s[2]&&s[5]===s[2]),(!c||I&4)&&Fe(e,"in-folder",!!lt(s[2]));const N={};I&268435476&&(N.$$scope={dirty:I,ctx:s}),!i&&I&16&&(i=!0,N.open=s[4],me(()=>i=!1)),l.$set(N)},i(d){c||(C(k,d),d&&$e(()=>{c&&(n&&n.end(1),r=Xo(e,s[11],{fn:Ge,x:s[1]==="left"?-100:100,duration:500,delay:s[6]?0:s[0]}),r.start())}),C(l.$$.fragment,d),c=!0)},o(d){O(k,d),r&&r.invalidate(),d&&(n=Zo(e,Ge,{x:s[1]==="left"?-100:100,duration:500})),O(l.$$.fragment,d),c=!1},d(d){d&&(_(e),_(o)),k&&k.d(d),v&&v.d(),d&&n&&n.end(),M(l,d),h=!1,xe(p)}}}function Qp(s,e,t){let a,r;he(s,vt,E=>t(5,a=E)),he(s,bt,E=>t(6,r=E));let{$$slots:n={},$$scope:o}=e,{delay:l=0}=e,{direction:i="left"}=e,{data:c}=e,h=!1,p=!1;const A=Ne(),k=E=>{if(!c){E.preventDefault();return}at.set(c)},v=()=>{const E=ke(at);let ce;c&&(ce=lt(c));const je=lt(E);if(je&&je.remove(E),ce){ce.add(E),t(3,h=!1),xu();return}E instanceof Ze&&(ke(ft)?nr(E):lr(E),E.parent=void 0),t(3,h=!1)},m=()=>{const E=ke(at);c!==E&&t(3,h=!0)},y=(E,ce)=>(ke(ur)||(ce.delay=0),ce.fn(E,ce)),d=E=>{E&&(E instanceof Ke?lc(E):uc(E))};function I(E){Ou.call(this,s,E)}const N=()=>kt(c),z=E=>{(E==null?void 0:E.key)==="Enter"&&kt(c)},$=()=>d(c),Y=E=>{(E==null?void 0:E.key)==="Enter"&&d(c)},V=E=>{if(E!=null&&E.shiftKey){mt(c);return}t(4,p=!0)},b=E=>{if((E==null?void 0:E.key)==="Enter"){if(E!=null&&E.shiftKey){mt(c);return}t(4,p=!0)}},H=()=>t(3,h=!1),re=E=>{E.key==="Enter"&&A("click")},W=()=>t(4,p=!1),ie=E=>{(E==null?void 0:E.key)==="Enter"&&t(4,p=!1)},de=()=>mt(c),ue=E=>{(E==null?void 0:E.key)==="Enter"&&mt(c)};function ne(E){p=E,t(4,p)}return s.$$set=E=>{"delay"in E&&t(0,l=E.delay),"direction"in E&&t(1,i=E.direction),"data"in E&&t(2,c=E.data),"$$scope"in E&&t(28,o=E.$$scope)},[l,i,c,h,p,a,r,A,k,v,m,y,d,n,I,N,z,$,Y,V,b,H,re,W,ie,de,ue,ne,o]}class dt extends ge{constructor(e){super(),ye(this,e,Qp,Jp,we,{delay:0,direction:1,data:2})}}function lu(s,e,t){const a=s.slice();return a[21]=e[t],a}function uu(s){let e,t=[],a=new Map,r,n,o=Ee(s[0].data);const l=i=>i[21].key;for(let i=0;i<o.length;i+=1){let c=lu(s,o,i),h=l(c);a.set(h,t[i]=cu(h,c))}return{c(){e=P("div");for(let i=0;i<t.length;i+=1)t[i].c();this.h()},l(i){e=F(i,"DIV",{class:!0});var c=Q(e);for(let h=0;h<t.length;h+=1)t[h].l(c);c.forEach(_),this.h()},h(){g(e,"class","folder-content svelte-gwiyfq")},m(i,c){j(i,e,c);for(let h=0;h<t.length;h+=1)t[h]&&t[h].m(e,null);n=!0},p(i,c){c&1&&(o=Ee(i[0].data),Ie(),t=Rl(t,c,l,1,i,o,a,e,$l,cu,null,lu),Se())},i(i){if(!n){for(let c=0;c<o.length;c+=1)C(t[c]);i&&$e(()=>{n&&(r||(r=Me(e,Dt,{},!0)),r.run(1))}),n=!0}},o(i){for(let c=0;c<t.length;c+=1)O(t[c]);i&&(r||(r=Me(e,Dt,{},!1)),r.run(0)),n=!1},d(i){i&&_(e);for(let c=0;c<t.length;c+=1)t[c].d();i&&r&&r.end()}}}function eh(s){let e,t;function a(){return s[20](s[21])}return e=new dt({props:{data:s[21],$$slots:{default:[ah]},$$scope:{ctx:s}}}),e.$on("click",a),{c(){Z(e.$$.fragment)},l(r){J(e.$$.fragment,r)},m(r,n){K(e,r,n),t=!0},p(r,n){s=r;const o={};n&1&&(o.data=s[21]),n&16777217&&(o.$$scope={dirty:n,ctx:s}),e.$set(o)},i(r){t||(C(e.$$.fragment,r),t=!0)},o(r){O(e.$$.fragment,r),t=!1},d(r){M(e,r)}}}function th(s){let e,t;return e=new Hl({props:{folder:s[21]}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,r){const n={};r&1&&(n.folder=a[21]),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function ah(s){let e=s[21].name+"",t,a;return{c(){t=ve(e),a=U()},l(r){t=be(r,e),a=G(r)},m(r,n){j(r,t,n),j(r,a,n)},p(r,n){n&1&&e!==(e=r[21].name+"")&&Ue(t,e)},d(r){r&&(_(t),_(a))}}}function cu(s,e){let t,a,r,n,o;const l=[th,eh],i=[];function c(h,p){return h[21]instanceof Ze?0:1}return a=c(e),r=i[a]=l[a](e),{key:s,first:null,c(){t=Ve(),r.c(),n=Ve(),this.h()},l(h){t=Ve(),r.l(h),n=Ve(),this.h()},h(){this.first=t},m(h,p){j(h,t,p),i[a].m(h,p),j(h,n,p),o=!0},p(h,p){e=h;let A=a;a=c(e),a===A?i[a].p(e,p):(Ie(),O(i[A],1,1,()=>{i[A]=null}),Se(),r=i[a],r?r.p(e,p):(r=i[a]=l[a](e),r.c()),C(r,1),r.m(n.parentNode,n))},i(h){o||(C(r),o=!0)},o(h){O(r),o=!1},d(h){h&&(_(t),_(n)),i[a].d(h)}}}function sh(s){let e,t,a="folder",r,n,o,l,i,c='<span class="material-symbols-rounded">add</span>',h,p,A='<span class="material-symbols-rounded">edit</span>',k,v,m='<span class="material-symbols-rounded">delete</span>',y,d,I,N,z,$,Y,V=s[0].open&&uu(s);return{c(){e=P("div"),t=P("span"),t.textContent=a,r=U(),n=P("span"),o=U(),l=P("div"),i=P("div"),i.innerHTML=c,h=U(),p=P("div"),p.innerHTML=A,k=U(),v=P("div"),v.innerHTML=m,I=U(),V&&V.c(),N=Ve(),this.h()},l(b){e=F(b,"DIV",{class:!0,draggable:!0,tabindex:!0,role:!0});var H=Q(e);t=F(H,"SPAN",{class:!0,"data-svelte-h":!0}),oe(t)!=="svelte-1ic1ary"&&(t.textContent=a),r=G(H),n=F(H,"SPAN",{class:!0,contenteditable:!0,tabindex:!0,role:!0}),Q(n).forEach(_),o=G(H),l=F(H,"DIV",{class:!0});var re=Q(l);i=F(re,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(i)!=="svelte-6hjmfl"&&(i.innerHTML=c),h=G(re),p=F(re,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(p)!=="svelte-156gx0"&&(p.innerHTML=A),k=G(re),v=F(re,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(v)!=="svelte-1hdl3cj"&&(v.innerHTML=m),re.forEach(_),H.forEach(_),I=G(b),V&&V.l(b),N=Ve(),this.h()},h(){g(t,"class","material-symbols-rounded folder-icon svelte-gwiyfq"),g(n,"class","name svelte-gwiyfq"),g(n,"contenteditable","false"),g(n,"tabindex","0"),g(n,"role","textbox"),s[0].name===void 0&&$e(()=>s[13].call(n)),g(i,"class","icon add svelte-gwiyfq"),g(i,"title","Add Folder"),g(i,"tabindex","0"),g(i,"role","button"),g(p,"class","icon svelte-gwiyfq"),g(p,"title","Rename"),g(p,"tabindex","0"),g(p,"role","button"),g(v,"class","icon delete svelte-gwiyfq"),g(v,"title","Delete Folder"),g(v,"tabindex","0"),g(v,"role","button"),g(l,"class","buttons svelte-gwiyfq"),g(e,"class","folder svelte-gwiyfq"),g(e,"draggable","true"),g(e,"tabindex","0"),g(e,"role","menuitem"),Fe(e,"over",s[2])},m(b,H){j(b,e,H),S(e,t),S(e,r),S(e,n),s[11](n),s[0].name!==void 0&&(n.textContent=s[0].name),S(e,o),S(e,l),S(l,i),S(l,h),S(l,p),S(l,k),S(l,v),j(b,I,H),V&&V.m(b,H),j(b,N,H),z=!0,$||(Y=[B(n,"blur",s[12]),B(n,"input",s[13]),B(n,"keydown",s[5]),B(i,"click",qe(s[7])),B(i,"keypress",s[14]),B(p,"click",qe(s[4])),B(p,"keypress",s[15]),B(v,"click",qe(s[6])),B(v,"keypress",s[16]),B(e,"dragstart",s[8]),B(e,"drop",qe(We(s[9]))),B(e,"dragover",We(s[10])),B(e,"dragleave",s[17]),B(e,"click",s[18]),B(e,"keypress",s[19])],$=!0)},p(b,[H]){s=b,H&1&&s[0].name!==n.textContent&&(n.textContent=s[0].name),(!z||H&4)&&Fe(e,"over",s[2]),s[0].open?V?(V.p(s,H),H&1&&C(V,1)):(V=uu(s),V.c(),C(V,1),V.m(N.parentNode,N)):V&&(Ie(),O(V,1,1,()=>{V=null}),Se())},i(b){z||(b&&$e(()=>{z&&(d&&d.end(1),y=Xo(e,Dt,{duration:s[3]?0:400}),y.start())}),C(V),z=!0)},o(b){y&&y.invalidate(),b&&(d=Zo(e,Dt,{})),O(V),z=!1},d(b){b&&(_(e),_(I),_(N)),s[11](null),b&&d&&d.end(),V&&V.d(b),$=!1,xe(Y)}}}function oh(s,e,t){let a;he(s,bt,b=>t(3,a=b));let{folder:r}=e,n,o=()=>{t(1,n.contentEditable="true",n),n.focus(),setTimeout(()=>{const b=document.createRange();b.setStart(n,0),b.setEnd(n,1);const H=window.getSelection();H==null||H.removeAllRanges(),H==null||H.addRange(b)},1)};const l=b=>{b.key=="Enter"&&(b.preventDefault(),b.stopPropagation(),n.blur())},i=()=>{cc(r)},c=()=>{r.createFolder(),t(0,r.open=!0,r),xu()};let h=!1;const p=()=>{at.set(r)},A=()=>{t(2,h=!1);const b=ke(at);if(!b||r.data.includes(b))return;const H=lt(b);H&&H.remove(b),b instanceof Ze&&(pc(b),b.parent=r),r.add(b)},k=()=>{r!==ke(at)&&t(2,h=!0)};function v(b){pe[b?"unshift":"push"](()=>{n=b,t(1,n)})}const m=()=>t(1,n.contentEditable="false",n);function y(){r.name=this.textContent,t(0,r)}const d=b=>{b.key==="Enter"&&(b.stopPropagation(),c())},I=b=>{b.key==="Enter"&&(b.stopPropagation(),o())},N=b=>{b.key==="Enter"&&(b.stopPropagation(),i())},z=()=>t(2,h=!1),$=()=>t(0,r.open=!r.open,r),Y=b=>{b.key==="Enter"&&(b.stopPropagation(),t(0,r.open=!r.open,r))},V=b=>nt(`${ze}/${b.dataType==="class"?"class":"skill"}/${b.name}${b.dataType==="class"?"/edit":""}`);return s.$$set=b=>{"folder"in b&&t(0,r=b.folder)},[r,n,h,a,o,l,i,c,p,A,k,v,m,y,d,I,N,z,$,Y,V]}class Hl extends ge{constructor(e){super(),ye(this,e,oh,sh,we,{folder:0})}}function pu(s,e,t){const a=s.slice();return a[39]=e[t],a[35]=t,a}function hu(s,e,t){const a=s.slice();return a[39]=e[t],a}function du(s,e,t){const a=s.slice();return a[33]=e[t],a[35]=t,a}function mu(s,e,t){const a=s.slice();return a[36]=e[t],a}function rh(s){let e,t,a=[],r=new Map,n,o,l,i,c,h=Ee(s[8]),p=[];for(let m=0;m<h.length;m+=1)p[m]=fu(hu(s,h,m));const A=m=>O(p[m],1,1,()=>{p[m]=null});let k=Ee(s[9].filter(s[20]));const v=m=>m[39].key;for(let m=0;m<k.length;m+=1){let y=pu(s,k,m),d=v(y);r.set(d,a[m]=wu(d,y))}return o=new dt({props:{delay:200+100*(s[9].length+1),direction:"right",$$slots:{default:[lh]},$$scope:{ctx:s}}}),{c(){e=P("div");for(let m=0;m<p.length;m+=1)p[m].c();t=U();for(let m=0;m<a.length;m+=1)a[m].c();n=U(),Z(o.$$.fragment),this.h()},l(m){e=F(m,"DIV",{class:!0});var y=Q(e);for(let d=0;d<p.length;d+=1)p[d].l(y);t=G(y);for(let d=0;d<a.length;d+=1)a[d].l(y);n=G(y),J(o.$$.fragment,y),y.forEach(_),this.h()},h(){g(e,"class","items svelte-57rsxg")},m(m,y){j(m,e,y);for(let d=0;d<p.length;d+=1)p[d]&&p[d].m(e,null);S(e,t);for(let d=0;d<a.length;d+=1)a[d]&&a[d].m(e,null);S(e,n),K(o,e,null),c=!0},p(m,y){if(y[0]&256){h=Ee(m[8]);let I;for(I=0;I<h.length;I+=1){const N=hu(m,h,I);p[I]?(p[I].p(N,y),C(p[I],1)):(p[I]=fu(N),p[I].c(),C(p[I],1),p[I].m(e,t))}for(Ie(),I=h.length;I<p.length;I+=1)A(I);Se()}y[0]&514&&(k=Ee(m[9].filter(m[20])),Ie(),a=Rl(a,y,v,1,m,k,r,e,$l,wu,n,pu),Se());const d={};y[0]&512&&(d.delay=200+100*(m[9].length+1)),y[1]&4096&&(d.$$scope={dirty:y,ctx:m}),o.$set(d)},i(m){if(!c){for(let y=0;y<h.length;y+=1)C(p[y]);for(let y=0;y<k.length;y+=1)C(a[y]);C(o.$$.fragment,m),m&&$e(()=>{c&&(i&&i.end(1),l=Xo(e,Ge,{x:100}),l.start())}),c=!0}},o(m){p=p.filter(Boolean);for(let y=0;y<p.length;y+=1)O(p[y]);for(let y=0;y<a.length;y+=1)O(a[y]);O(o.$$.fragment,m),l&&l.invalidate(),m&&(i=Zo(e,Ge,{x:100})),c=!1},d(m){m&&_(e),jo(p,m);for(let y=0;y<a.length;y+=1)a[y].d();M(o),m&&i&&i.end()}}}function ih(s){let e,t,a=[],r=new Map,n,o,l,i,c,h=Ee(s[6]),p=[];for(let m=0;m<h.length;m+=1)p[m]=gu(mu(s,h,m));const A=m=>O(p[m],1,1,()=>{p[m]=null});let k=Ee(s[7].filter(s[14]));const v=m=>m[33].key;for(let m=0;m<k.length;m+=1){let y=du(s,k,m),d=v(y);r.set(d,a[m]=yu(d,y))}return o=new dt({props:{delay:200+100*(s[7].length+1),$$slots:{default:[ch]},$$scope:{ctx:s}}}),{c(){e=P("div");for(let m=0;m<p.length;m+=1)p[m].c();t=U();for(let m=0;m<a.length;m+=1)a[m].c();n=U(),Z(o.$$.fragment),this.h()},l(m){e=F(m,"DIV",{class:!0});var y=Q(e);for(let d=0;d<p.length;d+=1)p[d].l(y);t=G(y);for(let d=0;d<a.length;d+=1)a[d].l(y);n=G(y),J(o.$$.fragment,y),y.forEach(_),this.h()},h(){g(e,"class","items svelte-57rsxg")},m(m,y){j(m,e,y);for(let d=0;d<p.length;d+=1)p[d]&&p[d].m(e,null);S(e,t);for(let d=0;d<a.length;d+=1)a[d]&&a[d].m(e,null);S(e,n),K(o,e,null),c=!0},p(m,y){if(y[0]&64){h=Ee(m[6]);let I;for(I=0;I<h.length;I+=1){const N=mu(m,h,I);p[I]?(p[I].p(N,y),C(p[I],1)):(p[I]=gu(N),p[I].c(),C(p[I],1),p[I].m(e,t))}for(Ie(),I=h.length;I<p.length;I+=1)A(I);Se()}y[0]&129&&(k=Ee(m[7].filter(m[14])),Ie(),a=Rl(a,y,v,1,m,k,r,e,$l,yu,n,du),Se());const d={};y[0]&128&&(d.delay=200+100*(m[7].length+1)),y[1]&4096&&(d.$$scope={dirty:y,ctx:m}),o.$set(d)},i(m){if(!c){for(let y=0;y<h.length;y+=1)C(p[y]);for(let y=0;y<k.length;y+=1)C(a[y]);C(o.$$.fragment,m),m&&$e(()=>{c&&(i&&i.end(1),l=Xo(e,Ge,{x:-100}),l.start())}),c=!0}},o(m){p=p.filter(Boolean);for(let y=0;y<p.length;y+=1)O(p[y]);for(let y=0;y<a.length;y+=1)O(a[y]);O(o.$$.fragment,m),l&&l.invalidate(),m&&(i=Zo(e,Ge,{x:-100})),c=!1},d(m){m&&_(e),jo(p,m);for(let y=0;y<a.length;y+=1)a[y].d();M(o),m&&i&&i.end()}}}function fu(s){let e,t;return e=new Hl({props:{folder:s[39]}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,r){const n={};r[0]&256&&(n.folder=a[39]),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function nh(s){let e=s[39].name+"",t,a=s[39].location==="server"?"*":"",r;return{c(){t=ve(e),r=ve(a)},l(n){t=be(n,e),r=be(n,a)},m(n,o){j(n,t,o),j(n,r,o)},p(n,o){o[0]&514&&e!==(e=n[39].name+"")&&Ue(t,e),o[0]&514&&a!==(a=n[39].location==="server"?"*":"")&&Ue(r,a)},d(n){n&&(_(t),_(r))}}}function wu(s,e){let t,a,r;function n(){return e[21](e[39])}return a=new dt({props:{data:e[39],direction:"right",delay:200+100*e[35],$$slots:{default:[nh]},$$scope:{ctx:e}}}),a.$on("click",n),{key:s,first:null,c(){t=Ve(),Z(a.$$.fragment),this.h()},l(o){t=Ve(),J(a.$$.fragment,o),this.h()},h(){this.first=t},m(o,l){j(o,t,l),K(a,o,l),r=!0},p(o,l){e=o;const i={};l[0]&514&&(i.data=e[39]),l[0]&514&&(i.delay=200+100*e[35]),l[0]&514|l[1]&4096&&(i.$$scope={dirty:l,ctx:e}),a.$set(i)},i(o){r||(C(a.$$.fragment,o),r=!0)},o(o){O(a.$$.fragment,o),r=!1},d(o){o&&_(t),M(a,o)}}}function lh(s){let e,t,a="New Skill",r,n,o="New Folder",l,i;return{c(){e=P("div"),t=P("span"),t.textContent=a,r=U(),n=P("span"),n.textContent=o,this.h()},l(c){e=F(c,"DIV",{class:!0});var h=Q(e);t=F(h,"SPAN",{tabindex:!0,role:!0,class:!0,"data-svelte-h":!0}),oe(t)!=="svelte-j11ma4"&&(t.textContent=a),r=G(h),n=F(h,"SPAN",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(n)!=="svelte-5areor"&&(n.textContent=o),h.forEach(_),this.h()},h(){g(t,"tabindex","0"),g(t,"role","button"),g(t,"class","svelte-57rsxg"),g(n,"class","new-folder svelte-57rsxg"),g(n,"tabindex","0"),g(n,"role","button"),g(e,"class","new svelte-57rsxg")},m(c,h){j(c,e,h),S(e,t),S(e,r),S(e,n),l||(i=[B(t,"click",s[22]),B(t,"keypress",s[23]),B(n,"click",s[24]),B(n,"keypress",s[25])],l=!0)},p:Re,d(c){c&&_(e),l=!1,xe(i)}}}function gu(s){let e,t;return e=new Hl({props:{folder:s[36]}}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},p(a,r){const n={};r[0]&64&&(n.folder=a[36]),e.$set(n)},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function uh(s){let e=s[33].name+"",t,a=s[33].location==="server"?"*":"",r;return{c(){t=ve(e),r=ve(a)},l(n){t=be(n,e),r=be(n,a)},m(n,o){j(n,t,o),j(n,r,o)},p(n,o){o[0]&129&&e!==(e=n[33].name+"")&&Ue(t,e),o[0]&129&&a!==(a=n[33].location==="server"?"*":"")&&Ue(r,a)},d(n){n&&(_(t),_(r))}}}function yu(s,e){let t,a,r;function n(){return e[15](e[33])}return a=new dt({props:{data:e[33],delay:200+100*e[35],$$slots:{default:[uh]},$$scope:{ctx:e}}}),a.$on("click",n),{key:s,first:null,c(){t=Ve(),Z(a.$$.fragment),this.h()},l(o){t=Ve(),J(a.$$.fragment,o),this.h()},h(){this.first=t},m(o,l){j(o,t,l),K(a,o,l),r=!0},p(o,l){e=o;const i={};l[0]&129&&(i.data=e[33]),l[0]&129&&(i.delay=200+100*e[35]),l[0]&129|l[1]&4096&&(i.$$scope={dirty:l,ctx:e}),a.$set(i)},i(o){r||(C(a.$$.fragment,o),r=!0)},o(o){O(a.$$.fragment,o),r=!1},d(o){o&&_(t),M(a,o)}}}function ch(s){let e,t,a="New Class",r,n,o="New Folder",l,i;return{c(){e=P("div"),t=P("span"),t.textContent=a,r=U(),n=P("span"),n.textContent=o,this.h()},l(c){e=F(c,"DIV",{class:!0});var h=Q(e);t=F(h,"SPAN",{tabindex:!0,role:!0,class:!0,"data-svelte-h":!0}),oe(t)!=="svelte-10oifud"&&(t.textContent=a),r=G(h),n=F(h,"SPAN",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(n)!=="svelte-yis9yl"&&(n.textContent=o),h.forEach(_),this.h()},h(){g(t,"tabindex","0"),g(t,"role","button"),g(t,"class","svelte-57rsxg"),g(n,"class","new-folder svelte-57rsxg"),g(n,"tabindex","0"),g(n,"role","button"),g(e,"class","new svelte-57rsxg")},m(c,h){j(c,e,h),S(e,t),S(e,r),S(e,n),l||(i=[B(t,"click",s[16]),B(t,"keypress",s[17]),B(n,"click",s[18]),B(n,"keypress",s[19])],l=!0)},p:Re,d(c){c&&_(e),l=!1,xe(i)}}}function ph(s){let e=!1,t=()=>{e=!1},a,r,n,o,l,i,c,h,p,A,k,v=`calc(${s[3]}px - 6rem + min(3rem, ${s[4]}px))`,m,y,d;$e(s[11]),$e(s[12]);function I(V){s[13](V)}let N={left:"Classes",right:"Skills",color:"#111",inline:!1};s[5]!==void 0&&(N.data=s[5]),o=new Ko({props:N}),pe.push(()=>fe(o,"data",I));const z=[ih,rh],$=[];function Y(V,b){return V[5]?0:1}return p=Y(s),A=$[p]=z[p](s),{c(){r=P("div"),n=P("div"),Z(o.$$.fragment),i=U(),c=P("hr"),h=U(),A.c(),this.h()},l(V){r=F(V,"DIV",{id:!0,class:!0});var b=Q(r);n=F(b,"DIV",{class:!0});var H=Q(n);J(o.$$.fragment,H),i=G(H),c=F(H,"HR",{class:!0}),H.forEach(_),h=G(b),A.l(b),b.forEach(_),this.h()},h(){g(c,"class","svelte-57rsxg"),g(n,"class","type-wrap svelte-57rsxg"),g(r,"id","sidebar"),g(r,"class","svelte-57rsxg"),Gl(r,"--height",v)},m(V,b){j(V,r,b),S(r,n),K(o,n,null),S(n,i),S(n,c),S(r,h),$[p].m(r,null),m=!0,y||(d=[B(window,"resize",s[11]),B(window,"scroll",()=>{e=!0,clearTimeout(a),a=setTimeout(t,100),s[12]()}),B(r,"introend",s[26]),B(r,"outroend",s[27]),fc(bc.call(null,r,s[10]))],y=!0)},p(V,b){b[0]&16&&!e&&(e=!0,clearTimeout(a),scrollTo(window.pageXOffset,V[4]),a=setTimeout(t,100));const H={};!l&&b[0]&32&&(l=!0,H.data=V[5],me(()=>l=!1)),o.$set(H);let re=p;p=Y(V),p===re?$[p].p(V,b):(Ie(),O($[re],1,1,()=>{$[re]=null}),Se(),A=$[p],A?A.p(V,b):(A=$[p]=z[p](V),A.c()),C(A,1),A.m(r,null)),b[0]&24&&v!==(v=`calc(${V[3]}px - 6rem + min(3rem, ${V[4]}px))`)&&Gl(r,"--height",v)},i(V){m||(C(o.$$.fragment,V),C(A),V&&$e(()=>{m&&(k||(k=Me(r,Xl,{},!0)),k.run(1))}),m=!0)},o(V){O(o.$$.fragment,V),O(A),V&&(k||(k=Me(r,Xl,{},!1)),k.run(0)),m=!1},d(V){V&&_(r),M(o),$[p].d(),V&&k&&k.end(),y=!1,xe(d)}}}function hh(s,e,t){let a,r,n,o,l;he(s,ft,X=>t(5,a=X)),he(s,wt,X=>t(6,r=X)),he(s,yt,X=>t(7,n=X)),he(s,gt,X=>t(8,o=X)),he(s,et,X=>t(9,l=X));let i=[],c,h,p=[],A=[],k,v,m;const y=(X,R)=>{X instanceof Array&&X.forEach(te=>y(te,R)),X instanceof Ze?y(X.data,R):(X instanceof Ke||X instanceof He)&&R.push(X)},d=X=>{ke(ft)?(i=X||ke(wt),t(0,p=[]),y(i,p)):(i=X||ke(gt),t(1,A=[]),y(i,A))};Lu(()=>{c=wt.subscribe(d),h=gt.subscribe(d)}),wc(d),Nu(()=>{c&&c(),h&&h()});const I=X=>{k<500&&(X.stopPropagation(),hc())};function N(){t(2,k=window.innerWidth),t(3,v=window.innerHeight)}function z(){t(4,m=window.pageYOffset)}function $(X){a=X,ft.set(a)}return[p,A,k,v,m,a,r,n,o,l,I,N,z,$,X=>!p.includes(X),X=>nt(`${ze}/class/${X.name}/edit`),()=>Wl(),X=>X.key==="Enter"&&Wl(),()=>nr(new Ze),X=>X.key==="Enter"&&nr(new Ze),X=>!A.includes(X),X=>nt(`${ze}/skill/${X.name}`),()=>zl(),X=>X.key==="Enter"&&zl(),()=>lr(new Ze),X=>X.key==="Enter"&&lr(new Ze),()=>bt.set(!0),()=>bt.set(!1)]}class dh extends ge{constructor(e){super(),ye(this,e,hh,ph,we,{},null,[-1,-1])}}function Tu(s,e,t){const a=s.slice();return a[12]=e[t],a}function vu(s){let e,t,a=s[12]+"",r;return{c(){e=P("option"),t=ve("1."),r=ve(a),this.h()},l(n){e=F(n,"OPTION",{});var o=Q(e);t=be(o,"1."),r=be(o,a),o.forEach(_),this.h()},h(){e.__value=s[12],Qe(e,e.__value)},m(n,o){j(n,e,o),S(e,t),S(e,r)},p:Re,d(n){n&&_(e)}}}function mh(s){let e,t,a,r=Ee(Object.keys(tu).reverse()),n=[];for(let o=0;o<r.length;o+=1)n[o]=vu(Tu(s,r,o));return{c(){e=P("select");for(let o=0;o<n.length;o+=1)n[o].c();this.h()},l(o){e=F(o,"SELECT",{});var l=Q(e);for(let i=0;i<n.length;i+=1)n[i].l(l);l.forEach(_),this.h()},h(){s[1]===void 0&&$e(()=>s[6].call(e))},m(o,l){j(o,e,l);for(let i=0;i<n.length;i+=1)n[i]&&n[i].m(e,null);Yl(e,s[1],!0),t||(a=B(e,"change",s[6]),t=!0)},p(o,l){if(l&0){r=Ee(Object.keys(tu).reverse());let i;for(i=0;i<r.length;i+=1){const c=Tu(o,r,i);n[i]?n[i].p(c,l):(n[i]=vu(c),n[i].c(),n[i].m(e,null))}for(;i<n.length;i+=1)n[i].d(1);n.length=r.length}l&2&&Yl(e,o[1])},d(o){o&&_(e),jo(n,o),t=!1,a()}}}function fh(s){let e,t,a;function r(o){s[7](o)}let n={left:"Symbols",right:"Text"};return s[2]!==void 0&&(n.data=s[2]),e=new Ko({props:n}),pe.push(()=>fe(e,"data",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&4&&(t=!0,i.data=o[2],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function wh(s){let e,t,a;function r(o){s[8](o)}let n={left:"True",right:"False"};return s[3]!==void 0&&(n.data=s[3]),e=new Ko({props:n}),pe.push(()=>fe(e,"data",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&8&&(t=!0,i.data=o[3],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function gh(s){let e,t,a;function r(o){s[9](o)}let n={};return s[4]!==void 0&&(n.data=s[4]),e=new Ko({props:n}),pe.push(()=>fe(e,"data",r)),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,l){const i={};!t&&l&16&&(t=!0,i.data=o[4],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function yh(s){let e,t="Settings",a,r,n,o,l,i,c,h,p,A,k,v,m,y,d,I="Clear Data",N,z,$;return l=new De({props:{label:"Server",tooltip:"This should match your target Spigot server version",$$slots:{default:[mh]},$$scope:{ctx:s}}}),c=new De({props:{label:"Use Symbols",tooltip:"If skill components should use symbols instead of text",$$slots:{default:[fh]},$$scope:{ctx:s}}}),p=new De({props:{label:"Show Summary Items",tooltip:"If skill components should show a simplified summary on the element",$$slots:{default:[wh]},$$scope:{ctx:s}}}),k=new De({props:{label:"Waterfall Animation",tooltip:"If the waterfall animation should play in the sidebar",$$slots:{default:[gh]},$$scope:{ctx:s}}}),{c(){e=P("h1"),e.textContent=t,a=U(),r=P("hr"),n=U(),o=P("div"),Z(l.$$.fragment),i=U(),Z(c.$$.fragment),h=U(),Z(p.$$.fragment),A=U(),Z(k.$$.fragment),v=U(),m=P("hr"),y=U(),d=P("button"),d.textContent=I,this.h()},l(Y){e=F(Y,"H1",{"data-svelte-h":!0}),oe(e)!=="svelte-171lafx"&&(e.textContent=t),a=G(Y),r=F(Y,"HR",{}),n=G(Y),o=F(Y,"DIV",{class:!0});var V=Q(o);J(l.$$.fragment,V),i=G(V),J(c.$$.fragment,V),h=G(V),J(p.$$.fragment,V),A=G(V),J(k.$$.fragment,V),v=G(V),m=F(V,"HR",{class:!0}),y=G(V),d=F(V,"BUTTON",{class:!0,"data-svelte-h":!0}),oe(d)!=="svelte-mz4zjt"&&(d.textContent=I),V.forEach(_),this.h()},h(){g(m,"class","span svelte-1wp1eds"),g(d,"class","button btn-danger span svelte-1wp1eds"),g(o,"class","settings-container svelte-1wp1eds")},m(Y,V){j(Y,e,V),j(Y,a,V),j(Y,r,V),j(Y,n,V),j(Y,o,V),K(l,o,null),S(o,i),K(c,o,null),S(o,h),K(p,o,null),S(o,A),K(k,o,null),S(o,v),S(o,m),S(o,y),S(o,d),N=!0,z||($=B(d,"click",s[5]),z=!0)},p(Y,V){const b={};V&32770&&(b.$$scope={dirty:V,ctx:Y}),l.$set(b);const H={};V&32772&&(H.$$scope={dirty:V,ctx:Y}),c.$set(H);const re={};V&32776&&(re.$$scope={dirty:V,ctx:Y}),p.$set(re);const W={};V&32784&&(W.$$scope={dirty:V,ctx:Y}),k.$set(W)},i(Y){N||(C(l.$$.fragment,Y),C(c.$$.fragment,Y),C(p.$$.fragment,Y),C(k.$$.fragment,Y),N=!0)},o(Y){O(l.$$.fragment,Y),O(c.$$.fragment,Y),O(p.$$.fragment,Y),O(k.$$.fragment,Y),N=!1},d(Y){Y&&(_(e),_(a),_(r),_(n),_(o)),M(l),M(c),M(p),M(k),z=!1,$()}}}function Th(s){let e,t,a;function r(o){s[10](o)}let n={width:"50rem",$$slots:{default:[yh]},$$scope:{ctx:s}};return s[0]!==void 0&&(n.open=s[0]),e=new Fl({props:n}),pe.push(()=>fe(e,"open",r)),e.$on("close",s[11]),{c(){Z(e.$$.fragment)},l(o){J(e.$$.fragment,o)},m(o,l){K(e,o,l),a=!0},p(o,[l]){const i={};l&32798&&(i.$$scope={dirty:l,ctx:o}),!t&&l&1&&(t=!0,i.open=o[0],me(()=>t=!1)),e.$set(i)},i(o){a||(C(e.$$.fragment,o),a=!0)},o(o){O(e.$$.fragment,o),a=!1},d(o){M(e,o)}}}function vh(s,e,t){let a,r,n,o;he(s,eu,m=>t(1,a=m)),he(s,Zl,m=>t(2,r=m)),he(s,Kl,m=>t(3,n=m)),he(s,ur,m=>t(4,o=m));let l=!0;const i=()=>{confirm("Are you sure you want to clear all data?")&&(yt.set([]),wt.set([]),et.set([]),gt.set([]))};function c(){a=gc(this),eu.set(a)}function h(m){r=m,Zl.set(r)}function p(m){n=m,Kl.set(n)}function A(m){o=m,ur.set(o)}function k(m){l=m,t(0,l)}function v(m){Ou.call(this,s,m)}return[l,a,r,n,o,i,c,h,p,A,k,v]}class bu extends ge{constructor(e){super(),ye(this,e,vh,Th,we,{})}}function ku(s){let e,t;return e=new dh({}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Du(s){let e,t;return e=new Wp({}),{c(){Z(e.$$.fragment)},l(a){J(e.$$.fragment,a)},m(a,r){K(e,a,r),t=!0},i(a){t||(C(e.$$.fragment,a),t=!0)},o(a){O(e.$$.fragment,a),t=!1},d(a){M(e,a)}}}function Iu(s){let e,t,a,r=s[5].name+"",n,o,l,i,c="We can keep it in memory for you to use, but will be unable to persist it to your browser's storage.",h,p,A="Closing/Refreshing the page will cause you to lose this data.",k,v,m="You'll need to export it and re-import later if you want to keep working with this.",y,d,I="I Understand",N,z,$,Y;return{c(){e=P("div"),t=P("strong"),a=ve("Failed to save "),n=ve(r),o=ve(" - Data is too large."),l=U(),i=P("div"),i.textContent=c,h=U(),p=P("div"),p.textContent=A,k=U(),v=P("div"),v.textContent=m,y=U(),d=P("div"),d.textContent=I,this.h()},l(V){e=F(V,"DIV",{class:!0});var b=Q(e);t=F(b,"STRONG",{});var H=Q(t);a=be(H,"Failed to save "),n=be(H,r),o=be(H," - Data is too large."),H.forEach(_),l=G(b),i=F(b,"DIV",{"data-svelte-h":!0}),oe(i)!=="svelte-1h0k73e"&&(i.textContent=c),h=G(b),p=F(b,"DIV",{"data-svelte-h":!0}),oe(p)!=="svelte-w2jdnb"&&(p.textContent=A),k=G(b),v=F(b,"DIV",{"data-svelte-h":!0}),oe(v)!=="svelte-facved"&&(v.textContent=m),y=G(b),d=F(b,"DIV",{class:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(d)!=="svelte-1j0nio1"&&(d.textContent=I),b.forEach(_),this.h()},h(){g(d,"class","acknowledge button"),g(d,"tabindex","0"),g(d,"role","button"),g(e,"class","save-error svelte-1x0o53o")},m(V,b){j(V,e,b),S(e,t),S(t,a),S(t,n),S(t,o),S(e,l),S(e,i),S(e,h),S(e,p),S(e,k),S(e,v),S(e,y),S(e,d),z=!0,$||(Y=[B(d,"click",s[18]),B(d,"keypress",s[19])],$=!0)},p(V,b){(!z||b&32)&&r!==(r=V[5].name+"")&&Ue(n,r)},i(V){z||(V&&$e(()=>{z&&(N||(N=Me(e,Ge,{y:-20},!0)),N.run(1))}),z=!0)},o(V){V&&(N||(N=Me(e,Ge,{y:-20},!1)),N.run(0)),z=!1},d(V){V&&_(e),V&&N&&N.end(),$=!1,xe(Y)}}}function Su(s){let e,t=s[8]?"Saving...":"Saved!",a,r,n;return{c(){e=P("div"),a=ve(t),this.h()},l(o){e=F(o,"DIV",{class:!0});var l=Q(e);a=be(l,t),l.forEach(_),this.h()},h(){g(e,"class","saving svelte-1x0o53o")},m(o,l){j(o,e,l),S(e,a),n=!0},p(o,l){(!n||l&256)&&t!==(t=o[8]?"Saving...":"Saved!")&&Ue(a,t)},i(o){n||(o&&$e(()=>{n&&(r||(r=Me(e,Ge,{y:-20},!0)),r.run(1))}),n=!0)},o(o){o&&(r||(r=Me(e,Ge,{y:-20},!1)),r.run(0)),n=!1},d(o){o&&_(e),o&&r&&r.end()}}}function Vu(s){let e,t="Drop to Import",a,r;return{c(){e=P("div"),e.textContent=t,this.h()},l(n){e=F(n,"DIV",{class:!0,role:!0,"data-svelte-h":!0}),oe(e)!=="svelte-1h6jzl1"&&(e.textContent=t),this.h()},h(){g(e,"class","dragging svelte-1x0o53o"),g(e,"role","form")},m(n,o){j(n,e,o),a||(r=B(e,"dragleave",s[9]),a=!0)},p:Re,d(n){n&&_(e),a=!1,r()}}}function bh(s){let e,t,a,r,n,o,l,i,c,h,p='<span class="material-symbols-rounded svelte-1x0o53o">cloud_download</span>',A,k,v='<span class="material-symbols-rounded svelte-1x0o53o">settings</span>',m,y,d='<span class="material-symbols-rounded svelte-1x0o53o">save</span>',I,N,z,$,Y,V,b,H,re,W;e=new Kp({}),a=new Gp({});let ie=s[3]&&ku();const de=s[12].default,ue=Pu(de,s,s[11],null);let ne=s[4]&&Du(),E=s[5]&&Iu(s);var ce=s[6];function je(R,te){return{props:{data:R[7]}}}ce&&($=jl(ce,je(s)),$.$on("close",Ml),$.$on("save",s[10]));let Te=s[1]&&Su(s),X=s[0]&&Vu(s);return{c(){Z(e.$$.fragment),t=U(),Z(a.$$.fragment),r=U(),n=P("div"),ie&&ie.c(),o=U(),l=P("div"),ue&&ue.c(),i=U(),c=P("div"),h=P("div"),h.innerHTML=p,A=U(),k=P("div"),k.innerHTML=v,m=U(),y=P("div"),y.innerHTML=d,I=U(),ne&&ne.c(),N=U(),E&&E.c(),z=U(),$&&Z($.$$.fragment),Y=U(),Te&&Te.c(),V=U(),X&&X.c(),b=Ve(),this.h()},l(R){J(e.$$.fragment,R),t=G(R),J(a.$$.fragment,R),r=G(R),n=F(R,"DIV",{id:!0,class:!0});var te=Q(n);ie&&ie.l(te),o=G(te),l=F(te,"DIV",{id:!0,class:!0});var Xe=Q(l);ue&&ue.l(Xe),Xe.forEach(_),te.forEach(_),i=G(R),c=F(R,"DIV",{id:!0,class:!0});var tt=Q(c);h=F(tt,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(h)!=="svelte-3w049m"&&(h.innerHTML=p),A=G(tt),k=F(tt,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(k)!=="svelte-1jgn50l"&&(k.innerHTML=v),m=G(tt),y=F(tt,"DIV",{class:!0,title:!0,tabindex:!0,role:!0,"data-svelte-h":!0}),oe(y)!=="svelte-1gvk6f9"&&(y.innerHTML=d),tt.forEach(_),I=G(R),ne&&ne.l(R),N=G(R),E&&E.l(R),z=G(R),$&&J($.$$.fragment,R),Y=G(R),Te&&Te.l(R),V=G(R),X&&X.l(R),b=Ve(),this.h()},h(){g(l,"id","body"),g(l,"class","svelte-1x0o53o"),Fe(l,"centered",!s[2]),g(n,"id","body-container"),g(n,"class","svelte-1x0o53o"),Fe(n,"empty",!s[2]),g(h,"class","button backup svelte-1x0o53o"),g(h,"title","Backup All Data"),g(h,"tabindex","0"),g(h,"role","button"),g(k,"class","button settings svelte-1x0o53o"),g(k,"title","Change Settings"),g(k,"tabindex","0"),g(k,"role","button"),g(y,"class","button save svelte-1x0o53o"),g(y,"title","Save"),g(y,"tabindex","0"),g(y,"role","button"),g(c,"id","floating-buttons"),g(c,"class","svelte-1x0o53o")},m(R,te){K(e,R,te),j(R,t,te),K(a,R,te),j(R,r,te),j(R,n,te),ie&&ie.m(n,null),S(n,o),S(n,l),ue&&ue.m(l,null),j(R,i,te),j(R,c,te),S(c,h),S(c,A),S(c,k),S(c,m),S(c,y),j(R,I,te),ne&&ne.m(R,te),j(R,N,te),E&&E.m(R,te),j(R,z,te),$&&K($,R,te),j(R,Y,te),Te&&Te.m(R,te),j(R,V,te),X&&X.m(R,te),j(R,b,te),H=!0,re||(W=[B(h,"click",Cu),B(h,"keypress",s[13]),B(k,"click",s[14]),B(k,"keypress",s[15]),B(y,"click",s[16]),B(y,"keypress",s[17])],re=!0)},p(R,[te]){if(R[3]?ie?te&8&&C(ie,1):(ie=ku(),ie.c(),C(ie,1),ie.m(n,o)):ie&&(Ie(),O(ie,1,1,()=>{ie=null}),Se()),ue&&ue.p&&(!H||te&2048)&&Fu(ue,de,R,R[11],H?$u(de,R[11],te,null):Ru(R[11]),null),(!H||te&4)&&Fe(l,"centered",!R[2]),(!H||te&4)&&Fe(n,"empty",!R[2]),R[4]?ne?te&16&&C(ne,1):(ne=Du(),ne.c(),C(ne,1),ne.m(N.parentNode,N)):ne&&(Ie(),O(ne,1,1,()=>{ne=null}),Se()),R[5]?E?(E.p(R,te),te&32&&C(E,1)):(E=Iu(R),E.c(),C(E,1),E.m(z.parentNode,z)):E&&(Ie(),O(E,1,1,()=>{E=null}),Se()),te&64&&ce!==(ce=R[6])){if($){Ie();const Xe=$;O(Xe.$$.fragment,1,0,()=>{M(Xe,1)}),Se()}ce?($=jl(ce,je(R)),$.$on("close",Ml),$.$on("save",R[10]),Z($.$$.fragment),C($.$$.fragment,1),K($,Y.parentNode,Y)):$=null}else if(ce){const Xe={};te&128&&(Xe.data=R[7]),$.$set(Xe)}R[1]?Te?(Te.p(R,te),te&2&&C(Te,1)):(Te=Su(R),Te.c(),C(Te,1),Te.m(V.parentNode,V)):Te&&(Ie(),O(Te,1,1,()=>{Te=null}),Se()),R[0]?X?X.p(R,te):(X=Vu(R),X.c(),X.m(b.parentNode,b)):X&&(X.d(1),X=null)},i(R){H||(C(e.$$.fragment,R),C(a.$$.fragment,R),C(ie),C(ue,R),C(ne),C(E),$&&C($.$$.fragment,R),C(Te),H=!0)},o(R){O(e.$$.fragment,R),O(a.$$.fragment,R),O(ie),O(ue,R),O(ne),O(E),$&&O($.$$.fragment,R),O(Te),H=!1},d(R){R&&(_(t),_(r),_(n),_(i),_(c),_(I),_(N),_(z),_(Y),_(V),_(b)),M(e,R),M(a,R),ie&&ie.d(),ue&&ue.d(R),ne&&ne.d(R),E&&E.d(R),$&&M($,R),Te&&Te.d(R),X&&X.d(R),re=!1,xe(W)}}}function kh(s,e,t){let a,r,n,o,l,i,c;he(s,vt,W=>t(2,a=W)),he(s,dc,W=>t(3,r=W)),he(s,mc,W=>t(4,n=W)),he(s,it,W=>t(5,o=W)),he(s,Tc,W=>t(6,l=W)),he(s,vc,W=>t(7,i=W)),he(s,Ul,W=>t(8,c=W));let{$$slots:h={},$$scope:p}=e,A=!1,k=!1,v,m;Lu(()=>{document.addEventListener("dragover",y),document.addEventListener("drop",I),m=Ul.subscribe(W=>{if(!W){setTimeout(()=>t(1,k=!1),1e3);return}v&&clearTimeout(v),v=setTimeout(()=>t(1,k=!0),1e3)})}),Nu(()=>{document.removeEventListener("dragover",y),document.removeEventListener("drop",I),m&&m()});const y=W=>{var ie,de;!((ie=W==null?void 0:W.dataTransfer)!=null&&ie.types)||!(W.dataTransfer.types.length>0&&((de=W.dataTransfer)==null?void 0:de.types[0])=="Files")||(W.dataTransfer.dropEffect="copy",W.stopPropagation(),W.preventDefault(),t(0,A=!0))},d=()=>{setTimeout(()=>t(0,A=!1),50)},I=W=>{var ie;if(!(!((ie=W==null?void 0:W.dataTransfer)!=null&&ie.files)||W.dataTransfer.files.length==0)){t(0,A=!1);for(let de=0;de<W.dataTransfer.files.length;de++){const ue=W.dataTransfer.files[de];ue.name.indexOf(".yml")!=-1&&qu(ue)}W.stopPropagation(),W.preventDefault()}},N=()=>{var W;et.set([...ke(et)]),(W=ke(vt))==null||W.save()},z=W=>W.key==="Enter"&&Cu(),$=()=>Jl(bu),Y=W=>W.key==="Enter"&&Jl(bu),V=()=>kt(),b=W=>W.key==="Enter"&&kt(),H=()=>{ke(it).acknowledged=!0,it.set(null)},re=W=>{W.key==="Enter"&&(ke(it).acknowledged=!0,it.set(null))};return s.$$set=W=>{"$$scope"in W&&t(11,p=W.$$scope)},[A,k,a,r,n,o,l,i,c,d,N,p,h,z,$,Y,V,b,H,re]}class Fh extends ge{constructor(e){super(),ye(this,e,kh,bh,we,{})}}export{Fh as component,Ph as universal};
